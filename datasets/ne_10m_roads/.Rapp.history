alg22 <- subset(dffd, algorithm == "OpencvScoring20_0")#
alg18 <- subset(dffd, algorithm == "OpencvScoring20_89")#
alg23 <- subset(dffd, algorithm == "OpencvScoring20_79")#
alg24 <- subset(dffd, algorithm == "OpencvScoring20_81")#
alg25 <- subset(dffd, algorithm == "OpencvScoring20_82")#
alg26 <- subset(dffd, algorithm == "OpencvScoring20_83")#
alg27 <- subset(dffd, algorithm == "OpencvScoring20_84")#
alg28 <- subset(dffd, algorithm == "OpencvScoring20_45")#
alg29 <- subset(dffd, algorithm == "OpencvScoring20_46")#
alg30 <- subset(dffd, algorithm == "OpencvScoring20_47")#
alg31 <- subset(dffd, algorithm == "OpencvScoring20_48")#
alg32 <- subset(dffd, algorithm == "OpencvScoring20_49")#
alg33 <- subset(dffd, algorithm == "OpencvScoring20_50")#
alg34 <- subset(dffd, algorithm == "OpencvScoring20_51")#
alg35 <- subset(dffd, algorithm == "OpencvScoring20_52")#
alg36 <- subset(dffd, algorithm == "OpencvScoring20_53")#
alg37 <- subset(dffd, algorithm == "OpencvScoring20_54")#
alg38 <- subset(dffd, algorithm == "OpencvScoring20_55")#
alg39 <- subset(dffd, algorithm == "OpencvScoring20_56")#
opencv$ocvscore <- opencv$fixed_score#
opencv$crop <- "OpencvScoring10"#
opencv <- subset(opencv, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
# rmagic$rmscore <- rmagic$fixed_score#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_y, crop_w, crop_h, processed_in, calculated_in))#
acrop$acropscore <- acrop$fixed_score#
acrop$crop <- "OpencvScoring17"#
acrop <- subset(acrop, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
# rmagic$r10score <- rmagic$fixed_score#
# rmagic$crop <- "RmagickScoring10"#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
alg22$a22score <- alg22$fixed_score#
alg22$crop <- "OpencvScoring20"#
alg22 <- subset(alg22, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 45#
alg22$a22score <- round(((alg22$a22score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg18$a18score <- alg18$fixed_score#
alg18$crop <- "OpencvScoring20_1"#
alg18 <- subset(alg18, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg18$a18score <- round(((alg18$a18score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg23$a23score <- alg23$fixed_score#
alg23$crop <- "OpencvScoring20_2"#
alg23 <- subset(alg23, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg23$a23score <- round(((alg23$a23score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg24$a24score <- alg24$fixed_score#
alg24$crop <- "OpencvScoring20_3"#
alg24 <- subset(alg24, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 67#
alg24$a24score <- round(((alg24$a24score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)
compare3 <- rbind(alg22, alg18, alg23)#
# compare3 <- rbind(alg22, alg18, alg23, alg24, alg25, alg26, alg27, alg28, alg29,#
#                   alg30, alg31, alg32, alg33, alg34, alg35, alg36, alg37, alg38, alg39)#
dffscoring <- merge(dff,compare3,by=c("scan_id"),all=TRUE)#
#remove unwanted columes#
dffscoring$date <- as.numeric(dffscoring$date)#
#
#ignore before Rox SpringTraining when settings were inconsistent#
dffscoring <- subset(dffscoring, date > 1361244845)#
#ignore images for PS, they are mostly trash#
dffscoring <- subset(dffscoring, athlete != "Pierre Sarnow")#
#
dffscoring <- subset(dffscoring, session != 178) #
#dffscoring <- subset(dffscoring, team != "Novo Nordisk") #
#
dffscoring <- subset(dffscoring, select= -c(cdate, date, score.x, weight, height, gender, device, tz, notes, session_date, timing, trainer, position))      #
dffscoring <- subset(dffscoring, athlete != "NA")#
# shorten names for graphs#
dffscoring$muscle[dffscoring$muscle=="Gastrocnemius/Soleus"] <- "GS"#
dffscoring$muscle[dffscoring$muscle=="Rectus Femoris"] <- "RF"#
dffscoring$muscle[dffscoring$muscle=="Vastus Lateralis"] <- "VL"#
dffscoring$muscle[dffscoring$muscle=="Vastus Medialis"] <- "VM"#
dffscoring$muscle[dffscoring$muscle=="Forearm Flexors"] <- "FF"#
dffscoring$muscle[dffscoring$muscle=="Hamstring"] <- "H"#
dffscoring$muscle[dffscoring$muscle=="Infraspinatus"] <- "I"#
dffscoring$muscle[dffscoring$muscle=="Latissimus Dorsi"] <- "LD"#
dffscoring$muscle[dffscoring$muscle=="Posterior Hip"] <- "PH"#
#
dffscoring$session_muscle_side <- paste(dffscoring$session, dffscoring$muscle, dffscoring$side)#
#determine accuracy #
stdev <- ddply(dffscoring, .(athlete, session_muscle_side, muscle, algorithm), summarise,#
  std = sd(score.y),#
  cvar = sd(score.y) / mean(score.y))#
stdev <- subset(stdev, std != "NA")#
#
badsessions <- subset(stdev, algorithm == "OpencvScoring20")#
maxcvar <- ddply(badsessions, .(algorithm), summarise,#
  max = max(boxplot.stats(cvar)$stats))#
#
# badsessions <- ddply(stdev, .(algorithm), summarise,#
#   outliers = boxplot.stats(cvar)$out)#
#
#badsessions2 <- subset(stdev, algorithm == "OpencvScoring17" & cvar > maxcvar$max)#
badsessions2 <- subset(stdev, algorithm == "OpencvScoring20" & cvar > 0.1)#
#
stdev2 <- stdev[ ! stdev$session_muscle_side %in% badsessions2$session_muscle_side, ]#
#
# a20 <- subset(stdev2, algorithm == "OpencvScoring20")#
# a17 <- subset(stdev2, algorithm == "OpencvScoring17")#
# ggplot(a17, aes(muscle, cvar)) +#
#    geom_boxplot(aes(fill = muscle), size=1.5)#
#
stdev3 <- ddply(stdev2, .(algorithm), summarise,#
  sdaccuracy = mean(std),#
  cvaccuracy = mean(cvar))#
#get session scores#
x <- ddply(dffscoring, .(session, athlete, muscle, side, algorithm), summarise,#
  score = mean(score.y))#
#
# range based on absolute max and min score#
# range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
#   number = boxplot.stats(score)$n,#
#   difference = max(score) - min(score))#
#
# range based on stats like in our app, ignore outliers#
range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
  number = boxplot.stats(score)$n,#
  difference = max(boxplot.stats(score)$stats) - min(boxplot.stats(score)$stats))#
#
range <- subset(range, difference != "NA")#
#range <- subset(range, difference != 0)#
range <- subset(range, number > 4)#
meanrange <- ddply(range, .(algorithm), summarise,#
  mrange = mean(difference))#
#
effrange <- merge(meanrange,stdev3,by=c("algorithm"))#
effrange <- ddply(effrange, .(algorithm), summarise,#
  effective_range = mrange/sdaccuracy)
effrange
compare3 <- "check"
colnames(opencv) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(acrop) <- c("crop_y","crop_h", "scan_id", "score", "algorithm")#
#colnames(rmagic) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg22) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg18) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg23) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg24) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg25) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg26) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg27) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg28) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg29) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg30) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg31) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg32) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg33) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg34) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg35) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg36) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg37) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg38) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg39) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
#
compare3 <- rbind(alg22, alg18, alg23)#
# compare3 <- rbind(alg22, alg18, alg23, alg24, alg25, alg26, alg27, alg28, alg29,#
#                   alg30, alg31, alg32, alg33, alg34, alg35, alg36, alg37, alg38, alg39)#
dffscoring <- merge(dff,compare3,by=c("scan_id"),all=TRUE)#
#remove unwanted columes#
dffscoring$date <- as.numeric(dffscoring$date)#
#
#ignore before Rox SpringTraining when settings were inconsistent#
dffscoring <- subset(dffscoring, date > 1361244845)#
#ignore images for PS, they are mostly trash#
dffscoring <- subset(dffscoring, athlete != "Pierre Sarnow")#
#
dffscoring <- subset(dffscoring, session != 178) #
#dffscoring <- subset(dffscoring, team != "Novo Nordisk") #
#
dffscoring <- subset(dffscoring, select= -c(cdate, date, score.x, weight, height, gender, device, tz, notes, session_date, timing, trainer, position))      #
dffscoring <- subset(dffscoring, athlete != "NA")#
# shorten names for graphs#
dffscoring$muscle[dffscoring$muscle=="Gastrocnemius/Soleus"] <- "GS"#
dffscoring$muscle[dffscoring$muscle=="Rectus Femoris"] <- "RF"#
dffscoring$muscle[dffscoring$muscle=="Vastus Lateralis"] <- "VL"#
dffscoring$muscle[dffscoring$muscle=="Vastus Medialis"] <- "VM"#
dffscoring$muscle[dffscoring$muscle=="Forearm Flexors"] <- "FF"#
dffscoring$muscle[dffscoring$muscle=="Hamstring"] <- "H"#
dffscoring$muscle[dffscoring$muscle=="Infraspinatus"] <- "I"#
dffscoring$muscle[dffscoring$muscle=="Latissimus Dorsi"] <- "LD"#
dffscoring$muscle[dffscoring$muscle=="Posterior Hip"] <- "PH"#
#
dffscoring$session_muscle_side <- paste(dffscoring$session, dffscoring$muscle, dffscoring$side)#
#determine accuracy #
stdev <- ddply(dffscoring, .(athlete, session_muscle_side, muscle, algorithm), summarise,#
  std = sd(score.y),#
  cvar = sd(score.y) / mean(score.y))#
stdev <- subset(stdev, std != "NA")#
#
badsessions <- subset(stdev, algorithm == "OpencvScoring20")#
maxcvar <- ddply(badsessions, .(algorithm), summarise,#
  max = max(boxplot.stats(cvar)$stats))#
#
# badsessions <- ddply(stdev, .(algorithm), summarise,#
#   outliers = boxplot.stats(cvar)$out)#
#
#badsessions2 <- subset(stdev, algorithm == "OpencvScoring17" & cvar > maxcvar$max)#
badsessions2 <- subset(stdev, algorithm == "OpencvScoring20" & cvar > 0.1)#
#
stdev2 <- stdev[ ! stdev$session_muscle_side %in% badsessions2$session_muscle_side, ]#
#
# a20 <- subset(stdev2, algorithm == "OpencvScoring20")#
# a17 <- subset(stdev2, algorithm == "OpencvScoring17")#
# ggplot(a17, aes(muscle, cvar)) +#
#    geom_boxplot(aes(fill = muscle), size=1.5)#
#
stdev3 <- ddply(stdev2, .(algorithm), summarise,#
  sdaccuracy = mean(std),#
  cvaccuracy = mean(cvar))#
#get session scores#
x <- ddply(dffscoring, .(session, athlete, muscle, side, algorithm), summarise,#
  score = mean(score.y))#
#
# range based on absolute max and min score#
# range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
#   number = boxplot.stats(score)$n,#
#   difference = max(score) - min(score))#
#
# range based on stats like in our app, ignore outliers#
range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
  number = boxplot.stats(score)$n,#
  difference = max(boxplot.stats(score)$stats) - min(boxplot.stats(score)$stats))#
#
range <- subset(range, difference != "NA")#
#range <- subset(range, difference != 0)#
range <- subset(range, number > 4)#
meanrange <- ddply(range, .(algorithm), summarise,#
  mrange = mean(difference))#
#
effrange <- merge(meanrange,stdev3,by=c("algorithm"))#
effrange <- ddply(effrange, .(algorithm), summarise,#
  effective_range = mrange/sdaccuracy)
effrange
q()
require(ggplot2)#
require(scales)#
require(reshape)#
require(modeest)#
require(plyr)#
require(RPostgreSQL)#
#
drv <- dbDriver("PostgreSQL")#
# #connect to local database#
con <- dbConnect(drv, dbname="musclesound_production")#
select = "select #
    scored_images.fixed_mean,#
    scored_images.fixed_threshold as fixed_threshold,#
    scored_images.auto_mean as auto_mean,#
    scored_images.auto_threshold as auto_threshold,#
    scored_images.processed_in as processed_in,#
    scored_images.created_at as created_at,#
    scored_images.updated_at as updated_at,#
    scored_images.calculated_in as calculated_in,#
    scored_images.crop_x as crop_x,#
    scored_images.crop_y as crop_y,#
    scored_images.crop_w as crop_w,#
    scored_images.crop_h as crop_h,#
    scored_images.scan_id as scan_id,#
    scored_images.fixed_score as fixed_score,#
    scored_images.algorithm as algorithm#
          FROM scored_images#
               "#
rs <- dbSendQuery(con, select)#
dffc <- fetch(rs,n=-1) #
#
dffd <- dffc#
#"OpencvScoring20"  "OpencvScoring17"  "OpencvScoring10"  "OpencvScoring21"  "RmagickScoring10"#
#"OpencvScoring20"   "OpencvScoring20_1" "OpencvScoring17"   "OpencvScoring10"   "RmagickScoring10" #
opencv <- subset(dffd, algorithm == "OpencvScoring10")#
acrop <- subset(dffd, algorithm == "OpencvScoring17")#
#rmagic <- subset(dffd, algorithm == "RmagickScoring10")#
alg22 <- subset(dffd, algorithm == "OpencvScoring20_0")#
alg18 <- subset(dffd, algorithm == "OpencvScoring20_90")#
alg23 <- subset(dffd, algorithm == "OpencvScoring20_79")#
alg24 <- subset(dffd, algorithm == "OpencvScoring20_81")#
alg25 <- subset(dffd, algorithm == "OpencvScoring20_82")#
alg26 <- subset(dffd, algorithm == "OpencvScoring20_83")#
alg27 <- subset(dffd, algorithm == "OpencvScoring20_84")#
alg28 <- subset(dffd, algorithm == "OpencvScoring20_45")#
alg29 <- subset(dffd, algorithm == "OpencvScoring20_46")#
alg30 <- subset(dffd, algorithm == "OpencvScoring20_47")#
alg31 <- subset(dffd, algorithm == "OpencvScoring20_48")#
alg32 <- subset(dffd, algorithm == "OpencvScoring20_49")#
alg33 <- subset(dffd, algorithm == "OpencvScoring20_50")#
alg34 <- subset(dffd, algorithm == "OpencvScoring20_51")#
alg35 <- subset(dffd, algorithm == "OpencvScoring20_52")#
alg36 <- subset(dffd, algorithm == "OpencvScoring20_53")#
alg37 <- subset(dffd, algorithm == "OpencvScoring20_54")#
alg38 <- subset(dffd, algorithm == "OpencvScoring20_55")#
alg39 <- subset(dffd, algorithm == "OpencvScoring20_56")#
opencv$ocvscore <- opencv$fixed_score#
opencv$crop <- "OpencvScoring10"#
opencv <- subset(opencv, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
# rmagic$rmscore <- rmagic$fixed_score#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_y, crop_w, crop_h, processed_in, calculated_in))#
acrop$acropscore <- acrop$fixed_score#
acrop$crop <- "OpencvScoring17"#
acrop <- subset(acrop, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
# rmagic$r10score <- rmagic$fixed_score#
# rmagic$crop <- "RmagickScoring10"#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
alg22$a22score <- alg22$fixed_score#
alg22$crop <- "OpencvScoring20"#
alg22 <- subset(alg22, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 45#
alg22$a22score <- round(((alg22$a22score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg18$a18score <- alg18$fixed_score#
alg18$crop <- "OpencvScoring20_1"#
alg18 <- subset(alg18, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg18$a18score <- round(((alg18$a18score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg23$a23score <- alg23$fixed_score#
alg23$crop <- "OpencvScoring20_2"#
alg23 <- subset(alg23, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg23$a23score <- round(((alg23$a23score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg24$a24score <- alg24$fixed_score#
alg24$crop <- "OpencvScoring20_3"#
alg24 <- subset(alg24, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 67#
alg24$a24score <- round(((alg24$a24score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg25$a25score <- alg25$fixed_score#
alg25$crop <- "OpencvScoring20_4"#
alg25 <- subset(alg25, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 68#
alg25$a25score <- round(((alg25$a25score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg26$a26score <- alg26$fixed_score#
alg26$crop <- "OpencvScoring20_5"#
alg26 <- subset(alg26, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 69#
alg26$a26score <- round(((alg26$a26score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg27$a27score <- alg27$fixed_score#
alg27$crop <- "OpencvScoring20_6"#
alg27 <- subset(alg27, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 70#
alg27$a27score <- round(((alg27$a27score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg28$a28score <- alg28$fixed_score#
alg28$crop <- "OpencvScoring20_7"#
alg28 <- subset(alg28, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg28$a28score <- round(((alg28$a28score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg29$a29score <- alg29$fixed_score#
alg29$crop <- "OpencvScoring20_8"#
alg29 <- subset(alg29, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg29$a29score <- round(((alg29$a29score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg30$a30score <- alg30$fixed_score#
alg30$crop <- "OpencvScoring20_9"#
alg30 <- subset(alg30, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg30$a30score <- round(((alg30$a30score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg31$a31score <- alg31$fixed_score#
alg31$crop <- "OpencvScoring20_10"#
alg31 <- subset(alg31, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg31$a31score <- round(((alg31$a31score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg32$a32score <- alg32$fixed_score#
alg32$crop <- "OpencvScoring20_11"#
alg32 <- subset(alg32, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg32$a32score <- round(((alg32$a32score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg33$a33score <- alg33$fixed_score#
alg33$crop <- "OpencvScoring20_12"#
alg33 <- subset(alg33, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg33$a33score <- round(((alg33$a33score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg34$a34score <- alg34$fixed_score#
alg34$crop <- "OpencvScoring20_13"#
alg34 <- subset(alg34, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg34$a34score <- round(((alg34$a34score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg35$a35score <- alg35$fixed_score#
alg35$crop <- "OpencvScoring20_14"#
alg35 <- subset(alg35, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg35$a35score <- round(((alg35$a35score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg36$a36score <- alg36$fixed_score#
alg36$crop <- "OpencvScoring20_15"#
alg36 <- subset(alg36, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg36$a36score <- round(((alg36$a36score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg37$a37score <- alg37$fixed_score#
alg37$crop <- "OpencvScoring20_16"#
alg37 <- subset(alg37, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg37$a37score <- round(((alg37$a37score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg38$a38score <- alg38$fixed_score#
alg38$crop <- "OpencvScoring20_17"#
alg38 <- subset(alg38, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg38$a38score <- round(((alg38$a38score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg39$a39score <- alg39$fixed_score#
alg39$crop <- "OpencvScoring20_18"#
alg39 <- subset(alg39, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg39$a39score <- round(((alg39$a39score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
# compare2 <- merge(opencv, acrop, by=c("scan_id"))#
# compare2$diff <- round((compare2$ocvscore - compare2$acropscore),digits=1)#
# compare2$type <- "all images"#
#
# ggplot(compare2, aes(type, diff)) +#
#    geom_boxplot()#
#
# index2 <- with(compare2, order(abs(diff),decreasing=T))#
# outliers <- compare2[index2, ]   #
#
########################################################################################
#run regular dff to get all scans with data#
            drv <- dbDriver("PostgreSQL")#
            # #connect to local database#
            con <- dbConnect(drv, dbname="musclesound_production")#
#
            select = "select #
                           scans.created_at as cdate, #
                           scans.study_at as date, #
                           scans.sagittal_plane as side,#
                           scans.id as scan_id,#
                           athletes.first_name || ' ' || athletes.last_name as athlete, #
                           athletes.id as id,#
                           athletes.weight as weight, #
                           athletes.height as height,#
                           athletes.gender as gender,#
                           scored_images.fixed_score as score,#
                           muscles.name as muscle,#
                           devices.name as device,#
                           devices.time_zone as tz,#
                           teams.name as team,#
                           sessions.id as session, #
                           sessions.notes as notes, #
                           sessions.start_at as session_date, #
                           sessions.event_timing as timing,#
                           users.first_name || ' ' || users.last_name as trainer#
                      FROM scans#
                           join scored_images on scans.scored_image_id = scored_images.id#
                           join athletes on scans.athlete_id = athletes.id#
                           join muscles on scans.muscle_id = muscles.id#
                           join devices on scans.device_id = devices.id#
                           join teams on scans.team_id = teams.id#
                           join sessions on scans.session_id = sessions.id#
                           join users on sessions.user_id = users.id"#
            rs <- dbSendQuery(con, select)#
            dffa <- fetch(rs,n=-1) #
#
            select2 = "select #
                           athletes.first_name || ' ' || athletes.last_name as athlete,#
                           athletes.id as id,#
                           positions.name as position#
                      FROM athletes#
                           join positions on athletes.position_id = positions.id"#
            ra <- dbSendQuery(con, select2)#
#
            dffb <- fetch(ra,n=-1)#
            dff <- merge(dffa,dffb,by=c("id","athlete"),all=TRUE)#
            #change date#
            dff$date[is.na(dff$date)] <- dff$session_date[is.na(dff$date)]#
#
##################################################################
#then merge compare2 with dff#
colnames(opencv) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(acrop) <- c("crop_y","crop_h", "scan_id", "score", "algorithm")#
#colnames(rmagic) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg22) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg18) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg23) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg24) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg25) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg26) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg27) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg28) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg29) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg30) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg31) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg32) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg33) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg34) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg35) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg36) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg37) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg38) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg39) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
#
compare3 <- rbind(alg22, alg18, alg23)#
# compare3 <- rbind(alg22, alg18, alg23, alg24, alg25, alg26, alg27, alg28, alg29,#
#                   alg30, alg31, alg32, alg33, alg34, alg35, alg36, alg37, alg38, alg39)#
dffscoring <- merge(dff,compare3,by=c("scan_id"),all=TRUE)#
#remove unwanted columes#
dffscoring$date <- as.numeric(dffscoring$date)#
#
#ignore before Rox SpringTraining when settings were inconsistent#
dffscoring <- subset(dffscoring, date > 1361244845)#
#ignore images for PS, they are mostly trash#
dffscoring <- subset(dffscoring, athlete != "Pierre Sarnow")#
#
dffscoring <- subset(dffscoring, session != 178) #
#dffscoring <- subset(dffscoring, team != "Novo Nordisk") #
#
dffscoring <- subset(dffscoring, select= -c(cdate, date, score.x, weight, height, gender, device, tz, notes, session_date, timing, trainer, position))      #
dffscoring <- subset(dffscoring, athlete != "NA")#
# shorten names for graphs#
dffscoring$muscle[dffscoring$muscle=="Gastrocnemius/Soleus"] <- "GS"#
dffscoring$muscle[dffscoring$muscle=="Rectus Femoris"] <- "RF"#
dffscoring$muscle[dffscoring$muscle=="Vastus Lateralis"] <- "VL"#
dffscoring$muscle[dffscoring$muscle=="Vastus Medialis"] <- "VM"#
dffscoring$muscle[dffscoring$muscle=="Forearm Flexors"] <- "FF"#
dffscoring$muscle[dffscoring$muscle=="Hamstring"] <- "H"#
dffscoring$muscle[dffscoring$muscle=="Infraspinatus"] <- "I"#
dffscoring$muscle[dffscoring$muscle=="Latissimus Dorsi"] <- "LD"#
dffscoring$muscle[dffscoring$muscle=="Posterior Hip"] <- "PH"#
#
dffscoring$session_muscle_side <- paste(dffscoring$session, dffscoring$muscle, dffscoring$side)#
#determine accuracy #
stdev <- ddply(dffscoring, .(athlete, session_muscle_side, muscle, algorithm), summarise,#
  std = sd(score.y),#
  cvar = sd(score.y) / mean(score.y))#
stdev <- subset(stdev, std != "NA")#
#
badsessions <- subset(stdev, algorithm == "OpencvScoring20")#
maxcvar <- ddply(badsessions, .(algorithm), summarise,#
  max = max(boxplot.stats(cvar)$stats))#
#
# badsessions <- ddply(stdev, .(algorithm), summarise,#
#   outliers = boxplot.stats(cvar)$out)#
#
#badsessions2 <- subset(stdev, algorithm == "OpencvScoring17" & cvar > maxcvar$max)#
badsessions2 <- subset(stdev, algorithm == "OpencvScoring20" & cvar > 0.1)#
#
stdev2 <- stdev[ ! stdev$session_muscle_side %in% badsessions2$session_muscle_side, ]#
#
# a20 <- subset(stdev2, algorithm == "OpencvScoring20")#
# a17 <- subset(stdev2, algorithm == "OpencvScoring17")#
# ggplot(a17, aes(muscle, cvar)) +#
#    geom_boxplot(aes(fill = muscle), size=1.5)#
#
stdev3 <- ddply(stdev2, .(algorithm), summarise,#
  sdaccuracy = mean(std),#
  cvaccuracy = mean(cvar))#
#get session scores#
x <- ddply(dffscoring, .(session, athlete, muscle, side, algorithm), summarise,#
  score = mean(score.y))#
#
# range based on absolute max and min score#
# range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
#   number = boxplot.stats(score)$n,#
#   difference = max(score) - min(score))#
#
# range based on stats like in our app, ignore outliers#
range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
  number = boxplot.stats(score)$n,#
  difference = max(boxplot.stats(score)$stats) - min(boxplot.stats(score)$stats))#
#
range <- subset(range, difference != "NA")#
#range <- subset(range, difference != 0)#
range <- subset(range, number > 4)#
meanrange <- ddply(range, .(algorithm), summarise,#
  mrange = mean(difference))#
#
effrange <- merge(meanrange,stdev3,by=c("algorithm"))#
effrange <- ddply(effrange, .(algorithm), summarise,#
  effective_range = mrange/sdaccuracy)
effrange
q()
require(ggplot2)#
require(scales)#
require(reshape)#
require(modeest)#
require(plyr)#
require(RPostgreSQL)#
#
drv <- dbDriver("PostgreSQL")#
# #connect to local database#
con <- dbConnect(drv, dbname="musclesound_production")#
select = "select #
    scored_images.fixed_mean,#
    scored_images.fixed_threshold as fixed_threshold,#
    scored_images.auto_mean as auto_mean,#
    scored_images.auto_threshold as auto_threshold,#
    scored_images.processed_in as processed_in,#
    scored_images.created_at as created_at,#
    scored_images.updated_at as updated_at,#
    scored_images.calculated_in as calculated_in,#
    scored_images.crop_x as crop_x,#
    scored_images.crop_y as crop_y,#
    scored_images.crop_w as crop_w,#
    scored_images.crop_h as crop_h,#
    scored_images.scan_id as scan_id,#
    scored_images.fixed_score as fixed_score,#
    scored_images.algorithm as algorithm#
          FROM scored_images#
               "#
rs <- dbSendQuery(con, select)#
dffc <- fetch(rs,n=-1) #
#
dffd <- dffc#
#"OpencvScoring20"  "OpencvScoring17"  "OpencvScoring10"  "OpencvScoring21"  "RmagickScoring10"#
#"OpencvScoring20"   "OpencvScoring20_1" "OpencvScoring17"   "OpencvScoring10"   "RmagickScoring10" #
opencv <- subset(dffd, algorithm == "OpencvScoring10")#
acrop <- subset(dffd, algorithm == "OpencvScoring17")#
#rmagic <- subset(dffd, algorithm == "RmagickScoring10")#
alg22 <- subset(dffd, algorithm == "OpencvScoring20_0")#
alg18 <- subset(dffd, algorithm == "OpencvScoring20_91")#
alg23 <- subset(dffd, algorithm == "OpencvScoring20_79")#
alg24 <- subset(dffd, algorithm == "OpencvScoring20_81")#
alg25 <- subset(dffd, algorithm == "OpencvScoring20_82")#
alg26 <- subset(dffd, algorithm == "OpencvScoring20_83")#
alg27 <- subset(dffd, algorithm == "OpencvScoring20_84")#
alg28 <- subset(dffd, algorithm == "OpencvScoring20_45")#
alg29 <- subset(dffd, algorithm == "OpencvScoring20_46")#
alg30 <- subset(dffd, algorithm == "OpencvScoring20_47")#
alg31 <- subset(dffd, algorithm == "OpencvScoring20_48")#
alg32 <- subset(dffd, algorithm == "OpencvScoring20_49")#
alg33 <- subset(dffd, algorithm == "OpencvScoring20_50")#
alg34 <- subset(dffd, algorithm == "OpencvScoring20_51")#
alg35 <- subset(dffd, algorithm == "OpencvScoring20_52")#
alg36 <- subset(dffd, algorithm == "OpencvScoring20_53")#
alg37 <- subset(dffd, algorithm == "OpencvScoring20_54")#
alg38 <- subset(dffd, algorithm == "OpencvScoring20_55")#
alg39 <- subset(dffd, algorithm == "OpencvScoring20_56")#
opencv$ocvscore <- opencv$fixed_score#
opencv$crop <- "OpencvScoring10"#
opencv <- subset(opencv, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
# rmagic$rmscore <- rmagic$fixed_score#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_y, crop_w, crop_h, processed_in, calculated_in))#
acrop$acropscore <- acrop$fixed_score#
acrop$crop <- "OpencvScoring17"#
acrop <- subset(acrop, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
# rmagic$r10score <- rmagic$fixed_score#
# rmagic$crop <- "RmagickScoring10"#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
alg22$a22score <- alg22$fixed_score#
alg22$crop <- "OpencvScoring20"#
alg22 <- subset(alg22, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 45#
alg22$a22score <- round(((alg22$a22score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg18$a18score <- alg18$fixed_score#
alg18$crop <- "OpencvScoring20_1"#
alg18 <- subset(alg18, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg18$a18score <- round(((alg18$a18score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg23$a23score <- alg23$fixed_score#
alg23$crop <- "OpencvScoring20_2"#
alg23 <- subset(alg23, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg23$a23score <- round(((alg23$a23score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg24$a24score <- alg24$fixed_score#
alg24$crop <- "OpencvScoring20_3"#
alg24 <- subset(alg24, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 67#
alg24$a24score <- round(((alg24$a24score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg25$a25score <- alg25$fixed_score#
alg25$crop <- "OpencvScoring20_4"#
alg25 <- subset(alg25, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 68#
alg25$a25score <- round(((alg25$a25score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg26$a26score <- alg26$fixed_score#
alg26$crop <- "OpencvScoring20_5"#
alg26 <- subset(alg26, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 69#
alg26$a26score <- round(((alg26$a26score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg27$a27score <- alg27$fixed_score#
alg27$crop <- "OpencvScoring20_6"#
alg27 <- subset(alg27, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 70#
alg27$a27score <- round(((alg27$a27score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg28$a28score <- alg28$fixed_score#
alg28$crop <- "OpencvScoring20_7"#
alg28 <- subset(alg28, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg28$a28score <- round(((alg28$a28score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg29$a29score <- alg29$fixed_score#
alg29$crop <- "OpencvScoring20_8"#
alg29 <- subset(alg29, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg29$a29score <- round(((alg29$a29score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg30$a30score <- alg30$fixed_score#
alg30$crop <- "OpencvScoring20_9"#
alg30 <- subset(alg30, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg30$a30score <- round(((alg30$a30score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg31$a31score <- alg31$fixed_score#
alg31$crop <- "OpencvScoring20_10"#
alg31 <- subset(alg31, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg31$a31score <- round(((alg31$a31score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg32$a32score <- alg32$fixed_score#
alg32$crop <- "OpencvScoring20_11"#
alg32 <- subset(alg32, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg32$a32score <- round(((alg32$a32score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg33$a33score <- alg33$fixed_score#
alg33$crop <- "OpencvScoring20_12"#
alg33 <- subset(alg33, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg33$a33score <- round(((alg33$a33score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg34$a34score <- alg34$fixed_score#
alg34$crop <- "OpencvScoring20_13"#
alg34 <- subset(alg34, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg34$a34score <- round(((alg34$a34score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg35$a35score <- alg35$fixed_score#
alg35$crop <- "OpencvScoring20_14"#
alg35 <- subset(alg35, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg35$a35score <- round(((alg35$a35score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg36$a36score <- alg36$fixed_score#
alg36$crop <- "OpencvScoring20_15"#
alg36 <- subset(alg36, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg36$a36score <- round(((alg36$a36score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg37$a37score <- alg37$fixed_score#
alg37$crop <- "OpencvScoring20_16"#
alg37 <- subset(alg37, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg37$a37score <- round(((alg37$a37score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg38$a38score <- alg38$fixed_score#
alg38$crop <- "OpencvScoring20_17"#
alg38 <- subset(alg38, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg38$a38score <- round(((alg38$a38score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg39$a39score <- alg39$fixed_score#
alg39$crop <- "OpencvScoring20_18"#
alg39 <- subset(alg39, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg39$a39score <- round(((alg39$a39score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
# compare2 <- merge(opencv, acrop, by=c("scan_id"))#
# compare2$diff <- round((compare2$ocvscore - compare2$acropscore),digits=1)#
# compare2$type <- "all images"#
#
# ggplot(compare2, aes(type, diff)) +#
#    geom_boxplot()#
#
# index2 <- with(compare2, order(abs(diff),decreasing=T))#
# outliers <- compare2[index2, ]   #
#
########################################################################################
#run regular dff to get all scans with data#
            drv <- dbDriver("PostgreSQL")#
            # #connect to local database#
            con <- dbConnect(drv, dbname="musclesound_production")#
#
            select = "select #
                           scans.created_at as cdate, #
                           scans.study_at as date, #
                           scans.sagittal_plane as side,#
                           scans.id as scan_id,#
                           athletes.first_name || ' ' || athletes.last_name as athlete, #
                           athletes.id as id,#
                           athletes.weight as weight, #
                           athletes.height as height,#
                           athletes.gender as gender,#
                           scored_images.fixed_score as score,#
                           muscles.name as muscle,#
                           devices.name as device,#
                           devices.time_zone as tz,#
                           teams.name as team,#
                           sessions.id as session, #
                           sessions.notes as notes, #
                           sessions.start_at as session_date, #
                           sessions.event_timing as timing,#
                           users.first_name || ' ' || users.last_name as trainer#
                      FROM scans#
                           join scored_images on scans.scored_image_id = scored_images.id#
                           join athletes on scans.athlete_id = athletes.id#
                           join muscles on scans.muscle_id = muscles.id#
                           join devices on scans.device_id = devices.id#
                           join teams on scans.team_id = teams.id#
                           join sessions on scans.session_id = sessions.id#
                           join users on sessions.user_id = users.id"#
            rs <- dbSendQuery(con, select)#
            dffa <- fetch(rs,n=-1) #
#
            select2 = "select #
                           athletes.first_name || ' ' || athletes.last_name as athlete,#
                           athletes.id as id,#
                           positions.name as position#
                      FROM athletes#
                           join positions on athletes.position_id = positions.id"#
            ra <- dbSendQuery(con, select2)#
#
            dffb <- fetch(ra,n=-1)#
            dff <- merge(dffa,dffb,by=c("id","athlete"),all=TRUE)#
            #change date#
            dff$date[is.na(dff$date)] <- dff$session_date[is.na(dff$date)]#
#
##################################################################
#then merge compare2 with dff#
colnames(opencv) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(acrop) <- c("crop_y","crop_h", "scan_id", "score", "algorithm")#
#colnames(rmagic) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg22) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg18) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg23) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg24) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg25) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg26) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg27) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg28) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg29) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg30) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg31) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg32) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg33) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg34) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg35) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg36) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg37) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg38) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg39) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
#
compare3 <- rbind(alg22, alg18, alg23)#
# compare3 <- rbind(alg22, alg18, alg23, alg24, alg25, alg26, alg27, alg28, alg29,#
#                   alg30, alg31, alg32, alg33, alg34, alg35, alg36, alg37, alg38, alg39)#
dffscoring <- merge(dff,compare3,by=c("scan_id"),all=TRUE)#
#remove unwanted columes#
dffscoring$date <- as.numeric(dffscoring$date)#
#
#ignore before Rox SpringTraining when settings were inconsistent#
dffscoring <- subset(dffscoring, date > 1361244845)#
#ignore images for PS, they are mostly trash#
dffscoring <- subset(dffscoring, athlete != "Pierre Sarnow")#
#
dffscoring <- subset(dffscoring, session != 178) #
#dffscoring <- subset(dffscoring, team != "Novo Nordisk") #
#
dffscoring <- subset(dffscoring, select= -c(cdate, date, score.x, weight, height, gender, device, tz, notes, session_date, timing, trainer, position))      #
dffscoring <- subset(dffscoring, athlete != "NA")#
# shorten names for graphs#
dffscoring$muscle[dffscoring$muscle=="Gastrocnemius/Soleus"] <- "GS"#
dffscoring$muscle[dffscoring$muscle=="Rectus Femoris"] <- "RF"#
dffscoring$muscle[dffscoring$muscle=="Vastus Lateralis"] <- "VL"#
dffscoring$muscle[dffscoring$muscle=="Vastus Medialis"] <- "VM"#
dffscoring$muscle[dffscoring$muscle=="Forearm Flexors"] <- "FF"#
dffscoring$muscle[dffscoring$muscle=="Hamstring"] <- "H"#
dffscoring$muscle[dffscoring$muscle=="Infraspinatus"] <- "I"#
dffscoring$muscle[dffscoring$muscle=="Latissimus Dorsi"] <- "LD"#
dffscoring$muscle[dffscoring$muscle=="Posterior Hip"] <- "PH"#
#
dffscoring$session_muscle_side <- paste(dffscoring$session, dffscoring$muscle, dffscoring$side)#
#determine accuracy #
stdev <- ddply(dffscoring, .(athlete, session_muscle_side, muscle, algorithm), summarise,#
  std = sd(score.y),#
  cvar = sd(score.y) / mean(score.y))#
stdev <- subset(stdev, std != "NA")#
#
badsessions <- subset(stdev, algorithm == "OpencvScoring20")#
maxcvar <- ddply(badsessions, .(algorithm), summarise,#
  max = max(boxplot.stats(cvar)$stats))#
#
# badsessions <- ddply(stdev, .(algorithm), summarise,#
#   outliers = boxplot.stats(cvar)$out)#
#
#badsessions2 <- subset(stdev, algorithm == "OpencvScoring17" & cvar > maxcvar$max)#
badsessions2 <- subset(stdev, algorithm == "OpencvScoring20" & cvar > 0.1)#
#
stdev2 <- stdev[ ! stdev$session_muscle_side %in% badsessions2$session_muscle_side, ]#
#
# a20 <- subset(stdev2, algorithm == "OpencvScoring20")#
# a17 <- subset(stdev2, algorithm == "OpencvScoring17")#
# ggplot(a17, aes(muscle, cvar)) +#
#    geom_boxplot(aes(fill = muscle), size=1.5)#
#
stdev3 <- ddply(stdev2, .(algorithm), summarise,#
  sdaccuracy = mean(std),#
  cvaccuracy = mean(cvar))#
#get session scores#
x <- ddply(dffscoring, .(session, athlete, muscle, side, algorithm), summarise,#
  score = mean(score.y))#
#
# range based on absolute max and min score#
# range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
#   number = boxplot.stats(score)$n,#
#   difference = max(score) - min(score))#
#
# range based on stats like in our app, ignore outliers#
range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
  number = boxplot.stats(score)$n,#
  difference = max(boxplot.stats(score)$stats) - min(boxplot.stats(score)$stats))#
#
range <- subset(range, difference != "NA")#
#range <- subset(range, difference != 0)#
range <- subset(range, number > 4)#
meanrange <- ddply(range, .(algorithm), summarise,#
  mrange = mean(difference))#
#
effrange <- merge(meanrange,stdev3,by=c("algorithm"))#
effrange <- ddply(effrange, .(algorithm), summarise,#
  effective_range = mrange/sdaccuracy)
effrange
q()
require(ggplot2)#
require(scales)#
require(reshape)#
require(modeest)#
require(plyr)#
require(RPostgreSQL)#
#
drv <- dbDriver("PostgreSQL")#
# #connect to local database#
con <- dbConnect(drv, dbname="musclesound_production")#
select = "select #
    scored_images.fixed_mean,#
    scored_images.fixed_threshold as fixed_threshold,#
    scored_images.auto_mean as auto_mean,#
    scored_images.auto_threshold as auto_threshold,#
    scored_images.processed_in as processed_in,#
    scored_images.created_at as created_at,#
    scored_images.updated_at as updated_at,#
    scored_images.calculated_in as calculated_in,#
    scored_images.crop_x as crop_x,#
    scored_images.crop_y as crop_y,#
    scored_images.crop_w as crop_w,#
    scored_images.crop_h as crop_h,#
    scored_images.scan_id as scan_id,#
    scored_images.fixed_score as fixed_score,#
    scored_images.algorithm as algorithm#
          FROM scored_images#
               "#
rs <- dbSendQuery(con, select)#
dffc <- fetch(rs,n=-1) #
#
dffd <- dffc#
#"OpencvScoring20"  "OpencvScoring17"  "OpencvScoring10"  "OpencvScoring21"  "RmagickScoring10"#
#"OpencvScoring20"   "OpencvScoring20_1" "OpencvScoring17"   "OpencvScoring10"   "RmagickScoring10" #
opencv <- subset(dffd, algorithm == "OpencvScoring10")#
acrop <- subset(dffd, algorithm == "OpencvScoring17")#
#rmagic <- subset(dffd, algorithm == "RmagickScoring10")#
alg22 <- subset(dffd, algorithm == "OpencvScoring20_0")#
alg18 <- subset(dffd, algorithm == "OpencvScoring20_92")#
alg23 <- subset(dffd, algorithm == "OpencvScoring20_79")#
alg24 <- subset(dffd, algorithm == "OpencvScoring20_81")#
alg25 <- subset(dffd, algorithm == "OpencvScoring20_82")#
alg26 <- subset(dffd, algorithm == "OpencvScoring20_83")#
alg27 <- subset(dffd, algorithm == "OpencvScoring20_84")#
alg28 <- subset(dffd, algorithm == "OpencvScoring20_45")#
alg29 <- subset(dffd, algorithm == "OpencvScoring20_46")#
alg30 <- subset(dffd, algorithm == "OpencvScoring20_47")#
alg31 <- subset(dffd, algorithm == "OpencvScoring20_48")#
alg32 <- subset(dffd, algorithm == "OpencvScoring20_49")#
alg33 <- subset(dffd, algorithm == "OpencvScoring20_50")#
alg34 <- subset(dffd, algorithm == "OpencvScoring20_51")#
alg35 <- subset(dffd, algorithm == "OpencvScoring20_52")#
alg36 <- subset(dffd, algorithm == "OpencvScoring20_53")#
alg37 <- subset(dffd, algorithm == "OpencvScoring20_54")#
alg38 <- subset(dffd, algorithm == "OpencvScoring20_55")#
alg39 <- subset(dffd, algorithm == "OpencvScoring20_56")#
opencv$ocvscore <- opencv$fixed_score#
opencv$crop <- "OpencvScoring10"#
opencv <- subset(opencv, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
# rmagic$rmscore <- rmagic$fixed_score#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_y, crop_w, crop_h, processed_in, calculated_in))#
acrop$acropscore <- acrop$fixed_score#
acrop$crop <- "OpencvScoring17"#
acrop <- subset(acrop, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
# rmagic$r10score <- rmagic$fixed_score#
# rmagic$crop <- "RmagickScoring10"#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
alg22$a22score <- alg22$fixed_score#
alg22$crop <- "OpencvScoring20"#
alg22 <- subset(alg22, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 45#
alg22$a22score <- round(((alg22$a22score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg18$a18score <- alg18$fixed_score#
alg18$crop <- "OpencvScoring20_1"#
alg18 <- subset(alg18, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg18$a18score <- round(((alg18$a18score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg23$a23score <- alg23$fixed_score#
alg23$crop <- "OpencvScoring20_2"#
alg23 <- subset(alg23, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg23$a23score <- round(((alg23$a23score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg24$a24score <- alg24$fixed_score#
alg24$crop <- "OpencvScoring20_3"#
alg24 <- subset(alg24, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 67#
alg24$a24score <- round(((alg24$a24score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg25$a25score <- alg25$fixed_score#
alg25$crop <- "OpencvScoring20_4"#
alg25 <- subset(alg25, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 68#
alg25$a25score <- round(((alg25$a25score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg26$a26score <- alg26$fixed_score#
alg26$crop <- "OpencvScoring20_5"#
alg26 <- subset(alg26, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 69#
alg26$a26score <- round(((alg26$a26score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg27$a27score <- alg27$fixed_score#
alg27$crop <- "OpencvScoring20_6"#
alg27 <- subset(alg27, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 70#
alg27$a27score <- round(((alg27$a27score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg28$a28score <- alg28$fixed_score#
alg28$crop <- "OpencvScoring20_7"#
alg28 <- subset(alg28, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg28$a28score <- round(((alg28$a28score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg29$a29score <- alg29$fixed_score#
alg29$crop <- "OpencvScoring20_8"#
alg29 <- subset(alg29, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg29$a29score <- round(((alg29$a29score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg30$a30score <- alg30$fixed_score#
alg30$crop <- "OpencvScoring20_9"#
alg30 <- subset(alg30, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg30$a30score <- round(((alg30$a30score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg31$a31score <- alg31$fixed_score#
alg31$crop <- "OpencvScoring20_10"#
alg31 <- subset(alg31, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg31$a31score <- round(((alg31$a31score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg32$a32score <- alg32$fixed_score#
alg32$crop <- "OpencvScoring20_11"#
alg32 <- subset(alg32, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg32$a32score <- round(((alg32$a32score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg33$a33score <- alg33$fixed_score#
alg33$crop <- "OpencvScoring20_12"#
alg33 <- subset(alg33, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg33$a33score <- round(((alg33$a33score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg34$a34score <- alg34$fixed_score#
alg34$crop <- "OpencvScoring20_13"#
alg34 <- subset(alg34, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg34$a34score <- round(((alg34$a34score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg35$a35score <- alg35$fixed_score#
alg35$crop <- "OpencvScoring20_14"#
alg35 <- subset(alg35, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg35$a35score <- round(((alg35$a35score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg36$a36score <- alg36$fixed_score#
alg36$crop <- "OpencvScoring20_15"#
alg36 <- subset(alg36, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg36$a36score <- round(((alg36$a36score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg37$a37score <- alg37$fixed_score#
alg37$crop <- "OpencvScoring20_16"#
alg37 <- subset(alg37, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg37$a37score <- round(((alg37$a37score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg38$a38score <- alg38$fixed_score#
alg38$crop <- "OpencvScoring20_17"#
alg38 <- subset(alg38, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg38$a38score <- round(((alg38$a38score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg39$a39score <- alg39$fixed_score#
alg39$crop <- "OpencvScoring20_18"#
alg39 <- subset(alg39, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg39$a39score <- round(((alg39$a39score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
# compare2 <- merge(opencv, acrop, by=c("scan_id"))#
# compare2$diff <- round((compare2$ocvscore - compare2$acropscore),digits=1)#
# compare2$type <- "all images"#
#
# ggplot(compare2, aes(type, diff)) +#
#    geom_boxplot()#
#
# index2 <- with(compare2, order(abs(diff),decreasing=T))#
# outliers <- compare2[index2, ]   #
#
########################################################################################
#run regular dff to get all scans with data#
            drv <- dbDriver("PostgreSQL")#
            # #connect to local database#
            con <- dbConnect(drv, dbname="musclesound_production")#
#
            select = "select #
                           scans.created_at as cdate, #
                           scans.study_at as date, #
                           scans.sagittal_plane as side,#
                           scans.id as scan_id,#
                           athletes.first_name || ' ' || athletes.last_name as athlete, #
                           athletes.id as id,#
                           athletes.weight as weight, #
                           athletes.height as height,#
                           athletes.gender as gender,#
                           scored_images.fixed_score as score,#
                           muscles.name as muscle,#
                           devices.name as device,#
                           devices.time_zone as tz,#
                           teams.name as team,#
                           sessions.id as session, #
                           sessions.notes as notes, #
                           sessions.start_at as session_date, #
                           sessions.event_timing as timing,#
                           users.first_name || ' ' || users.last_name as trainer#
                      FROM scans#
                           join scored_images on scans.scored_image_id = scored_images.id#
                           join athletes on scans.athlete_id = athletes.id#
                           join muscles on scans.muscle_id = muscles.id#
                           join devices on scans.device_id = devices.id#
                           join teams on scans.team_id = teams.id#
                           join sessions on scans.session_id = sessions.id#
                           join users on sessions.user_id = users.id"#
            rs <- dbSendQuery(con, select)#
            dffa <- fetch(rs,n=-1) #
#
            select2 = "select #
                           athletes.first_name || ' ' || athletes.last_name as athlete,#
                           athletes.id as id,#
                           positions.name as position#
                      FROM athletes#
                           join positions on athletes.position_id = positions.id"#
            ra <- dbSendQuery(con, select2)#
#
            dffb <- fetch(ra,n=-1)#
            dff <- merge(dffa,dffb,by=c("id","athlete"),all=TRUE)#
            #change date#
            dff$date[is.na(dff$date)] <- dff$session_date[is.na(dff$date)]#
#
##################################################################
#then merge compare2 with dff#
colnames(opencv) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(acrop) <- c("crop_y","crop_h", "scan_id", "score", "algorithm")#
#colnames(rmagic) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg22) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg18) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg23) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg24) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg25) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg26) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg27) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg28) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg29) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg30) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg31) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg32) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg33) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg34) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg35) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg36) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg37) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg38) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg39) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
#
compare3 <- rbind(alg22, alg18, alg23)#
# compare3 <- rbind(alg22, alg18, alg23, alg24, alg25, alg26, alg27, alg28, alg29,#
#                   alg30, alg31, alg32, alg33, alg34, alg35, alg36, alg37, alg38, alg39)#
dffscoring <- merge(dff,compare3,by=c("scan_id"),all=TRUE)#
#remove unwanted columes#
dffscoring$date <- as.numeric(dffscoring$date)#
#
#ignore before Rox SpringTraining when settings were inconsistent#
dffscoring <- subset(dffscoring, date > 1361244845)#
#ignore images for PS, they are mostly trash#
dffscoring <- subset(dffscoring, athlete != "Pierre Sarnow")#
#
dffscoring <- subset(dffscoring, session != 178) #
#dffscoring <- subset(dffscoring, team != "Novo Nordisk") #
#
dffscoring <- subset(dffscoring, select= -c(cdate, date, score.x, weight, height, gender, device, tz, notes, session_date, timing, trainer, position))      #
dffscoring <- subset(dffscoring, athlete != "NA")#
# shorten names for graphs#
dffscoring$muscle[dffscoring$muscle=="Gastrocnemius/Soleus"] <- "GS"#
dffscoring$muscle[dffscoring$muscle=="Rectus Femoris"] <- "RF"#
dffscoring$muscle[dffscoring$muscle=="Vastus Lateralis"] <- "VL"#
dffscoring$muscle[dffscoring$muscle=="Vastus Medialis"] <- "VM"#
dffscoring$muscle[dffscoring$muscle=="Forearm Flexors"] <- "FF"#
dffscoring$muscle[dffscoring$muscle=="Hamstring"] <- "H"#
dffscoring$muscle[dffscoring$muscle=="Infraspinatus"] <- "I"#
dffscoring$muscle[dffscoring$muscle=="Latissimus Dorsi"] <- "LD"#
dffscoring$muscle[dffscoring$muscle=="Posterior Hip"] <- "PH"#
#
dffscoring$session_muscle_side <- paste(dffscoring$session, dffscoring$muscle, dffscoring$side)#
#determine accuracy #
stdev <- ddply(dffscoring, .(athlete, session_muscle_side, muscle, algorithm), summarise,#
  std = sd(score.y),#
  cvar = sd(score.y) / mean(score.y))#
stdev <- subset(stdev, std != "NA")#
#
badsessions <- subset(stdev, algorithm == "OpencvScoring20")#
maxcvar <- ddply(badsessions, .(algorithm), summarise,#
  max = max(boxplot.stats(cvar)$stats))#
#
# badsessions <- ddply(stdev, .(algorithm), summarise,#
#   outliers = boxplot.stats(cvar)$out)#
#
#badsessions2 <- subset(stdev, algorithm == "OpencvScoring17" & cvar > maxcvar$max)#
badsessions2 <- subset(stdev, algorithm == "OpencvScoring20" & cvar > 0.1)#
#
stdev2 <- stdev[ ! stdev$session_muscle_side %in% badsessions2$session_muscle_side, ]#
#
# a20 <- subset(stdev2, algorithm == "OpencvScoring20")#
# a17 <- subset(stdev2, algorithm == "OpencvScoring17")#
# ggplot(a17, aes(muscle, cvar)) +#
#    geom_boxplot(aes(fill = muscle), size=1.5)#
#
stdev3 <- ddply(stdev2, .(algorithm), summarise,#
  sdaccuracy = mean(std),#
  cvaccuracy = mean(cvar))#
#get session scores#
x <- ddply(dffscoring, .(session, athlete, muscle, side, algorithm), summarise,#
  score = mean(score.y))#
#
# range based on absolute max and min score#
# range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
#   number = boxplot.stats(score)$n,#
#   difference = max(score) - min(score))#
#
# range based on stats like in our app, ignore outliers#
range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
  number = boxplot.stats(score)$n,#
  difference = max(boxplot.stats(score)$stats) - min(boxplot.stats(score)$stats))#
#
range <- subset(range, difference != "NA")#
#range <- subset(range, difference != 0)#
range <- subset(range, number > 4)#
meanrange <- ddply(range, .(algorithm), summarise,#
  mrange = mean(difference))#
#
effrange <- merge(meanrange,stdev3,by=c("algorithm"))#
effrange <- ddply(effrange, .(algorithm), summarise,#
  effective_range = mrange/sdaccuracy)
effrange
q()
require(ggplot2)#
require(scales)#
require(reshape)#
require(modeest)#
require(plyr)#
require(RPostgreSQL)#
#
drv <- dbDriver("PostgreSQL")#
# #connect to local database#
con <- dbConnect(drv, dbname="musclesound_production")#
select = "select #
    scored_images.fixed_mean,#
    scored_images.fixed_threshold as fixed_threshold,#
    scored_images.auto_mean as auto_mean,#
    scored_images.auto_threshold as auto_threshold,#
    scored_images.processed_in as processed_in,#
    scored_images.created_at as created_at,#
    scored_images.updated_at as updated_at,#
    scored_images.calculated_in as calculated_in,#
    scored_images.crop_x as crop_x,#
    scored_images.crop_y as crop_y,#
    scored_images.crop_w as crop_w,#
    scored_images.crop_h as crop_h,#
    scored_images.scan_id as scan_id,#
    scored_images.fixed_score as fixed_score,#
    scored_images.algorithm as algorithm#
          FROM scored_images#
               "#
rs <- dbSendQuery(con, select)#
dffc <- fetch(rs,n=-1) #
#
dffd <- dffc#
#"OpencvScoring20"  "OpencvScoring17"  "OpencvScoring10"  "OpencvScoring21"  "RmagickScoring10"#
#"OpencvScoring20"   "OpencvScoring20_1" "OpencvScoring17"   "OpencvScoring10"   "RmagickScoring10" #
opencv <- subset(dffd, algorithm == "OpencvScoring10")#
acrop <- subset(dffd, algorithm == "OpencvScoring17")#
#rmagic <- subset(dffd, algorithm == "RmagickScoring10")#
alg22 <- subset(dffd, algorithm == "OpencvScoring20_0")#
alg18 <- subset(dffd, algorithm == "OpencvScoring20_93")#
alg23 <- subset(dffd, algorithm == "OpencvScoring20_79")#
alg24 <- subset(dffd, algorithm == "OpencvScoring20_81")#
alg25 <- subset(dffd, algorithm == "OpencvScoring20_82")#
alg26 <- subset(dffd, algorithm == "OpencvScoring20_83")#
alg27 <- subset(dffd, algorithm == "OpencvScoring20_84")#
alg28 <- subset(dffd, algorithm == "OpencvScoring20_45")#
alg29 <- subset(dffd, algorithm == "OpencvScoring20_46")#
alg30 <- subset(dffd, algorithm == "OpencvScoring20_47")#
alg31 <- subset(dffd, algorithm == "OpencvScoring20_48")#
alg32 <- subset(dffd, algorithm == "OpencvScoring20_49")#
alg33 <- subset(dffd, algorithm == "OpencvScoring20_50")#
alg34 <- subset(dffd, algorithm == "OpencvScoring20_51")#
alg35 <- subset(dffd, algorithm == "OpencvScoring20_52")#
alg36 <- subset(dffd, algorithm == "OpencvScoring20_53")#
alg37 <- subset(dffd, algorithm == "OpencvScoring20_54")#
alg38 <- subset(dffd, algorithm == "OpencvScoring20_55")#
alg39 <- subset(dffd, algorithm == "OpencvScoring20_56")#
opencv$ocvscore <- opencv$fixed_score#
opencv$crop <- "OpencvScoring10"#
opencv <- subset(opencv, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
# rmagic$rmscore <- rmagic$fixed_score#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_y, crop_w, crop_h, processed_in, calculated_in))#
acrop$acropscore <- acrop$fixed_score#
acrop$crop <- "OpencvScoring17"#
acrop <- subset(acrop, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
# rmagic$r10score <- rmagic$fixed_score#
# rmagic$crop <- "RmagickScoring10"#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
alg22$a22score <- alg22$fixed_score#
alg22$crop <- "OpencvScoring20"#
alg22 <- subset(alg22, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 45#
alg22$a22score <- round(((alg22$a22score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg18$a18score <- alg18$fixed_score#
alg18$crop <- "OpencvScoring20_1"#
alg18 <- subset(alg18, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg18$a18score <- round(((alg18$a18score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg23$a23score <- alg23$fixed_score#
alg23$crop <- "OpencvScoring20_2"#
alg23 <- subset(alg23, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg23$a23score <- round(((alg23$a23score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg24$a24score <- alg24$fixed_score#
alg24$crop <- "OpencvScoring20_3"#
alg24 <- subset(alg24, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 67#
alg24$a24score <- round(((alg24$a24score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg25$a25score <- alg25$fixed_score#
alg25$crop <- "OpencvScoring20_4"#
alg25 <- subset(alg25, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 68#
alg25$a25score <- round(((alg25$a25score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg26$a26score <- alg26$fixed_score#
alg26$crop <- "OpencvScoring20_5"#
alg26 <- subset(alg26, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 69#
alg26$a26score <- round(((alg26$a26score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg27$a27score <- alg27$fixed_score#
alg27$crop <- "OpencvScoring20_6"#
alg27 <- subset(alg27, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 70#
alg27$a27score <- round(((alg27$a27score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg28$a28score <- alg28$fixed_score#
alg28$crop <- "OpencvScoring20_7"#
alg28 <- subset(alg28, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg28$a28score <- round(((alg28$a28score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg29$a29score <- alg29$fixed_score#
alg29$crop <- "OpencvScoring20_8"#
alg29 <- subset(alg29, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg29$a29score <- round(((alg29$a29score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg30$a30score <- alg30$fixed_score#
alg30$crop <- "OpencvScoring20_9"#
alg30 <- subset(alg30, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg30$a30score <- round(((alg30$a30score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg31$a31score <- alg31$fixed_score#
alg31$crop <- "OpencvScoring20_10"#
alg31 <- subset(alg31, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg31$a31score <- round(((alg31$a31score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg32$a32score <- alg32$fixed_score#
alg32$crop <- "OpencvScoring20_11"#
alg32 <- subset(alg32, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg32$a32score <- round(((alg32$a32score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg33$a33score <- alg33$fixed_score#
alg33$crop <- "OpencvScoring20_12"#
alg33 <- subset(alg33, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg33$a33score <- round(((alg33$a33score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg34$a34score <- alg34$fixed_score#
alg34$crop <- "OpencvScoring20_13"#
alg34 <- subset(alg34, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg34$a34score <- round(((alg34$a34score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg35$a35score <- alg35$fixed_score#
alg35$crop <- "OpencvScoring20_14"#
alg35 <- subset(alg35, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg35$a35score <- round(((alg35$a35score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg36$a36score <- alg36$fixed_score#
alg36$crop <- "OpencvScoring20_15"#
alg36 <- subset(alg36, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg36$a36score <- round(((alg36$a36score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg37$a37score <- alg37$fixed_score#
alg37$crop <- "OpencvScoring20_16"#
alg37 <- subset(alg37, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg37$a37score <- round(((alg37$a37score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg38$a38score <- alg38$fixed_score#
alg38$crop <- "OpencvScoring20_17"#
alg38 <- subset(alg38, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg38$a38score <- round(((alg38$a38score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg39$a39score <- alg39$fixed_score#
alg39$crop <- "OpencvScoring20_18"#
alg39 <- subset(alg39, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg39$a39score <- round(((alg39$a39score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
# compare2 <- merge(opencv, acrop, by=c("scan_id"))#
# compare2$diff <- round((compare2$ocvscore - compare2$acropscore),digits=1)#
# compare2$type <- "all images"#
#
# ggplot(compare2, aes(type, diff)) +#
#    geom_boxplot()#
#
# index2 <- with(compare2, order(abs(diff),decreasing=T))#
# outliers <- compare2[index2, ]   #
#
########################################################################################
#run regular dff to get all scans with data#
            drv <- dbDriver("PostgreSQL")#
            # #connect to local database#
            con <- dbConnect(drv, dbname="musclesound_production")#
#
            select = "select #
                           scans.created_at as cdate, #
                           scans.study_at as date, #
                           scans.sagittal_plane as side,#
                           scans.id as scan_id,#
                           athletes.first_name || ' ' || athletes.last_name as athlete, #
                           athletes.id as id,#
                           athletes.weight as weight, #
                           athletes.height as height,#
                           athletes.gender as gender,#
                           scored_images.fixed_score as score,#
                           muscles.name as muscle,#
                           devices.name as device,#
                           devices.time_zone as tz,#
                           teams.name as team,#
                           sessions.id as session, #
                           sessions.notes as notes, #
                           sessions.start_at as session_date, #
                           sessions.event_timing as timing,#
                           users.first_name || ' ' || users.last_name as trainer#
                      FROM scans#
                           join scored_images on scans.scored_image_id = scored_images.id#
                           join athletes on scans.athlete_id = athletes.id#
                           join muscles on scans.muscle_id = muscles.id#
                           join devices on scans.device_id = devices.id#
                           join teams on scans.team_id = teams.id#
                           join sessions on scans.session_id = sessions.id#
                           join users on sessions.user_id = users.id"#
            rs <- dbSendQuery(con, select)#
            dffa <- fetch(rs,n=-1) #
#
            select2 = "select #
                           athletes.first_name || ' ' || athletes.last_name as athlete,#
                           athletes.id as id,#
                           positions.name as position#
                      FROM athletes#
                           join positions on athletes.position_id = positions.id"#
            ra <- dbSendQuery(con, select2)#
#
            dffb <- fetch(ra,n=-1)#
            dff <- merge(dffa,dffb,by=c("id","athlete"),all=TRUE)#
            #change date#
            dff$date[is.na(dff$date)] <- dff$session_date[is.na(dff$date)]#
#
##################################################################
#then merge compare2 with dff#
colnames(opencv) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(acrop) <- c("crop_y","crop_h", "scan_id", "score", "algorithm")#
#colnames(rmagic) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg22) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg18) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg23) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg24) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg25) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg26) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg27) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg28) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg29) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg30) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg31) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg32) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg33) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg34) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg35) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg36) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg37) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg38) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg39) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
#
compare3 <- rbind(alg22, alg18, alg23)#
# compare3 <- rbind(alg22, alg18, alg23, alg24, alg25, alg26, alg27, alg28, alg29,#
#                   alg30, alg31, alg32, alg33, alg34, alg35, alg36, alg37, alg38, alg39)#
dffscoring <- merge(dff,compare3,by=c("scan_id"),all=TRUE)#
#remove unwanted columes#
dffscoring$date <- as.numeric(dffscoring$date)#
#
#ignore before Rox SpringTraining when settings were inconsistent#
dffscoring <- subset(dffscoring, date > 1361244845)#
#ignore images for PS, they are mostly trash#
dffscoring <- subset(dffscoring, athlete != "Pierre Sarnow")#
#
dffscoring <- subset(dffscoring, session != 178) #
#dffscoring <- subset(dffscoring, team != "Novo Nordisk") #
#
dffscoring <- subset(dffscoring, select= -c(cdate, date, score.x, weight, height, gender, device, tz, notes, session_date, timing, trainer, position))      #
dffscoring <- subset(dffscoring, athlete != "NA")#
# shorten names for graphs#
dffscoring$muscle[dffscoring$muscle=="Gastrocnemius/Soleus"] <- "GS"#
dffscoring$muscle[dffscoring$muscle=="Rectus Femoris"] <- "RF"#
dffscoring$muscle[dffscoring$muscle=="Vastus Lateralis"] <- "VL"#
dffscoring$muscle[dffscoring$muscle=="Vastus Medialis"] <- "VM"#
dffscoring$muscle[dffscoring$muscle=="Forearm Flexors"] <- "FF"#
dffscoring$muscle[dffscoring$muscle=="Hamstring"] <- "H"#
dffscoring$muscle[dffscoring$muscle=="Infraspinatus"] <- "I"#
dffscoring$muscle[dffscoring$muscle=="Latissimus Dorsi"] <- "LD"#
dffscoring$muscle[dffscoring$muscle=="Posterior Hip"] <- "PH"#
#
dffscoring$session_muscle_side <- paste(dffscoring$session, dffscoring$muscle, dffscoring$side)#
#determine accuracy #
stdev <- ddply(dffscoring, .(athlete, session_muscle_side, muscle, algorithm), summarise,#
  std = sd(score.y),#
  cvar = sd(score.y) / mean(score.y))#
stdev <- subset(stdev, std != "NA")#
#
badsessions <- subset(stdev, algorithm == "OpencvScoring20")#
maxcvar <- ddply(badsessions, .(algorithm), summarise,#
  max = max(boxplot.stats(cvar)$stats))#
#
# badsessions <- ddply(stdev, .(algorithm), summarise,#
#   outliers = boxplot.stats(cvar)$out)#
#
#badsessions2 <- subset(stdev, algorithm == "OpencvScoring17" & cvar > maxcvar$max)#
badsessions2 <- subset(stdev, algorithm == "OpencvScoring20" & cvar > 0.1)#
#
stdev2 <- stdev[ ! stdev$session_muscle_side %in% badsessions2$session_muscle_side, ]#
#
# a20 <- subset(stdev2, algorithm == "OpencvScoring20")#
# a17 <- subset(stdev2, algorithm == "OpencvScoring17")#
# ggplot(a17, aes(muscle, cvar)) +#
#    geom_boxplot(aes(fill = muscle), size=1.5)#
#
stdev3 <- ddply(stdev2, .(algorithm), summarise,#
  sdaccuracy = mean(std),#
  cvaccuracy = mean(cvar))#
#get session scores#
x <- ddply(dffscoring, .(session, athlete, muscle, side, algorithm), summarise,#
  score = mean(score.y))#
#
# range based on absolute max and min score#
# range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
#   number = boxplot.stats(score)$n,#
#   difference = max(score) - min(score))#
#
# range based on stats like in our app, ignore outliers#
range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
  number = boxplot.stats(score)$n,#
  difference = max(boxplot.stats(score)$stats) - min(boxplot.stats(score)$stats))#
#
range <- subset(range, difference != "NA")#
#range <- subset(range, difference != 0)#
range <- subset(range, number > 4)#
meanrange <- ddply(range, .(algorithm), summarise,#
  mrange = mean(difference))#
#
effrange <- merge(meanrange,stdev3,by=c("algorithm"))#
effrange <- ddply(effrange, .(algorithm), summarise,#
  effective_range = mrange/sdaccuracy)
effrange
q()
require(ggplot2)#
require(scales)#
require(reshape)#
require(modeest)#
require(plyr)#
require(RPostgreSQL)#
#
drv <- dbDriver("PostgreSQL")#
# #connect to local database#
con <- dbConnect(drv, dbname="musclesound_production")#
select = "select #
    scored_images.fixed_mean,#
    scored_images.fixed_threshold as fixed_threshold,#
    scored_images.auto_mean as auto_mean,#
    scored_images.auto_threshold as auto_threshold,#
    scored_images.processed_in as processed_in,#
    scored_images.created_at as created_at,#
    scored_images.updated_at as updated_at,#
    scored_images.calculated_in as calculated_in,#
    scored_images.crop_x as crop_x,#
    scored_images.crop_y as crop_y,#
    scored_images.crop_w as crop_w,#
    scored_images.crop_h as crop_h,#
    scored_images.scan_id as scan_id,#
    scored_images.fixed_score as fixed_score,#
    scored_images.algorithm as algorithm#
          FROM scored_images#
               "#
rs <- dbSendQuery(con, select)#
dffc <- fetch(rs,n=-1) #
#
dffd <- dffc#
#"OpencvScoring20"  "OpencvScoring17"  "OpencvScoring10"  "OpencvScoring21"  "RmagickScoring10"#
#"OpencvScoring20"   "OpencvScoring20_1" "OpencvScoring17"   "OpencvScoring10"   "RmagickScoring10" #
opencv <- subset(dffd, algorithm == "OpencvScoring10")#
acrop <- subset(dffd, algorithm == "OpencvScoring17")#
#rmagic <- subset(dffd, algorithm == "RmagickScoring10")#
alg22 <- subset(dffd, algorithm == "OpencvScoring20_0")#
alg18 <- subset(dffd, algorithm == "OpencvScoring20_94")#
alg23 <- subset(dffd, algorithm == "OpencvScoring20_79")#
alg24 <- subset(dffd, algorithm == "OpencvScoring20_81")#
alg25 <- subset(dffd, algorithm == "OpencvScoring20_82")#
alg26 <- subset(dffd, algorithm == "OpencvScoring20_83")#
alg27 <- subset(dffd, algorithm == "OpencvScoring20_84")#
alg28 <- subset(dffd, algorithm == "OpencvScoring20_45")#
alg29 <- subset(dffd, algorithm == "OpencvScoring20_46")#
alg30 <- subset(dffd, algorithm == "OpencvScoring20_47")#
alg31 <- subset(dffd, algorithm == "OpencvScoring20_48")#
alg32 <- subset(dffd, algorithm == "OpencvScoring20_49")#
alg33 <- subset(dffd, algorithm == "OpencvScoring20_50")#
alg34 <- subset(dffd, algorithm == "OpencvScoring20_51")#
alg35 <- subset(dffd, algorithm == "OpencvScoring20_52")#
alg36 <- subset(dffd, algorithm == "OpencvScoring20_53")#
alg37 <- subset(dffd, algorithm == "OpencvScoring20_54")#
alg38 <- subset(dffd, algorithm == "OpencvScoring20_55")#
alg39 <- subset(dffd, algorithm == "OpencvScoring20_56")#
opencv$ocvscore <- opencv$fixed_score#
opencv$crop <- "OpencvScoring10"#
opencv <- subset(opencv, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
# rmagic$rmscore <- rmagic$fixed_score#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_y, crop_w, crop_h, processed_in, calculated_in))#
acrop$acropscore <- acrop$fixed_score#
acrop$crop <- "OpencvScoring17"#
acrop <- subset(acrop, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
# rmagic$r10score <- rmagic$fixed_score#
# rmagic$crop <- "RmagickScoring10"#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
alg22$a22score <- alg22$fixed_score#
alg22$crop <- "OpencvScoring20"#
alg22 <- subset(alg22, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 45#
alg22$a22score <- round(((alg22$a22score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg18$a18score <- alg18$fixed_score#
alg18$crop <- "OpencvScoring20_1"#
alg18 <- subset(alg18, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg18$a18score <- round(((alg18$a18score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg23$a23score <- alg23$fixed_score#
alg23$crop <- "OpencvScoring20_2"#
alg23 <- subset(alg23, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg23$a23score <- round(((alg23$a23score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg24$a24score <- alg24$fixed_score#
alg24$crop <- "OpencvScoring20_3"#
alg24 <- subset(alg24, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 67#
alg24$a24score <- round(((alg24$a24score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg25$a25score <- alg25$fixed_score#
alg25$crop <- "OpencvScoring20_4"#
alg25 <- subset(alg25, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 68#
alg25$a25score <- round(((alg25$a25score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg26$a26score <- alg26$fixed_score#
alg26$crop <- "OpencvScoring20_5"#
alg26 <- subset(alg26, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 69#
alg26$a26score <- round(((alg26$a26score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg27$a27score <- alg27$fixed_score#
alg27$crop <- "OpencvScoring20_6"#
alg27 <- subset(alg27, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 70#
alg27$a27score <- round(((alg27$a27score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg28$a28score <- alg28$fixed_score#
alg28$crop <- "OpencvScoring20_7"#
alg28 <- subset(alg28, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg28$a28score <- round(((alg28$a28score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg29$a29score <- alg29$fixed_score#
alg29$crop <- "OpencvScoring20_8"#
alg29 <- subset(alg29, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg29$a29score <- round(((alg29$a29score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg30$a30score <- alg30$fixed_score#
alg30$crop <- "OpencvScoring20_9"#
alg30 <- subset(alg30, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg30$a30score <- round(((alg30$a30score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg31$a31score <- alg31$fixed_score#
alg31$crop <- "OpencvScoring20_10"#
alg31 <- subset(alg31, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg31$a31score <- round(((alg31$a31score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg32$a32score <- alg32$fixed_score#
alg32$crop <- "OpencvScoring20_11"#
alg32 <- subset(alg32, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg32$a32score <- round(((alg32$a32score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg33$a33score <- alg33$fixed_score#
alg33$crop <- "OpencvScoring20_12"#
alg33 <- subset(alg33, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg33$a33score <- round(((alg33$a33score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg34$a34score <- alg34$fixed_score#
alg34$crop <- "OpencvScoring20_13"#
alg34 <- subset(alg34, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg34$a34score <- round(((alg34$a34score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg35$a35score <- alg35$fixed_score#
alg35$crop <- "OpencvScoring20_14"#
alg35 <- subset(alg35, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg35$a35score <- round(((alg35$a35score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg36$a36score <- alg36$fixed_score#
alg36$crop <- "OpencvScoring20_15"#
alg36 <- subset(alg36, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg36$a36score <- round(((alg36$a36score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg37$a37score <- alg37$fixed_score#
alg37$crop <- "OpencvScoring20_16"#
alg37 <- subset(alg37, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg37$a37score <- round(((alg37$a37score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg38$a38score <- alg38$fixed_score#
alg38$crop <- "OpencvScoring20_17"#
alg38 <- subset(alg38, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg38$a38score <- round(((alg38$a38score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg39$a39score <- alg39$fixed_score#
alg39$crop <- "OpencvScoring20_18"#
alg39 <- subset(alg39, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg39$a39score <- round(((alg39$a39score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
# compare2 <- merge(opencv, acrop, by=c("scan_id"))#
# compare2$diff <- round((compare2$ocvscore - compare2$acropscore),digits=1)#
# compare2$type <- "all images"#
#
# ggplot(compare2, aes(type, diff)) +#
#    geom_boxplot()#
#
# index2 <- with(compare2, order(abs(diff),decreasing=T))#
# outliers <- compare2[index2, ]   #
#
########################################################################################
#run regular dff to get all scans with data#
            drv <- dbDriver("PostgreSQL")#
            # #connect to local database#
            con <- dbConnect(drv, dbname="musclesound_production")#
#
            select = "select #
                           scans.created_at as cdate, #
                           scans.study_at as date, #
                           scans.sagittal_plane as side,#
                           scans.id as scan_id,#
                           athletes.first_name || ' ' || athletes.last_name as athlete, #
                           athletes.id as id,#
                           athletes.weight as weight, #
                           athletes.height as height,#
                           athletes.gender as gender,#
                           scored_images.fixed_score as score,#
                           muscles.name as muscle,#
                           devices.name as device,#
                           devices.time_zone as tz,#
                           teams.name as team,#
                           sessions.id as session, #
                           sessions.notes as notes, #
                           sessions.start_at as session_date, #
                           sessions.event_timing as timing,#
                           users.first_name || ' ' || users.last_name as trainer#
                      FROM scans#
                           join scored_images on scans.scored_image_id = scored_images.id#
                           join athletes on scans.athlete_id = athletes.id#
                           join muscles on scans.muscle_id = muscles.id#
                           join devices on scans.device_id = devices.id#
                           join teams on scans.team_id = teams.id#
                           join sessions on scans.session_id = sessions.id#
                           join users on sessions.user_id = users.id"#
            rs <- dbSendQuery(con, select)#
            dffa <- fetch(rs,n=-1) #
#
            select2 = "select #
                           athletes.first_name || ' ' || athletes.last_name as athlete,#
                           athletes.id as id,#
                           positions.name as position#
                      FROM athletes#
                           join positions on athletes.position_id = positions.id"#
            ra <- dbSendQuery(con, select2)#
#
            dffb <- fetch(ra,n=-1)#
            dff <- merge(dffa,dffb,by=c("id","athlete"),all=TRUE)#
            #change date#
            dff$date[is.na(dff$date)] <- dff$session_date[is.na(dff$date)]#
#
##################################################################
#then merge compare2 with dff#
colnames(opencv) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(acrop) <- c("crop_y","crop_h", "scan_id", "score", "algorithm")#
#colnames(rmagic) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg22) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg18) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg23) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg24) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg25) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg26) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg27) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg28) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg29) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg30) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg31) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg32) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg33) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg34) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg35) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg36) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg37) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg38) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg39) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
#
compare3 <- rbind(alg22, alg18, alg23)#
# compare3 <- rbind(alg22, alg18, alg23, alg24, alg25, alg26, alg27, alg28, alg29,#
#                   alg30, alg31, alg32, alg33, alg34, alg35, alg36, alg37, alg38, alg39)#
dffscoring <- merge(dff,compare3,by=c("scan_id"),all=TRUE)#
#remove unwanted columes#
dffscoring$date <- as.numeric(dffscoring$date)#
#
#ignore before Rox SpringTraining when settings were inconsistent#
dffscoring <- subset(dffscoring, date > 1361244845)#
#ignore images for PS, they are mostly trash#
dffscoring <- subset(dffscoring, athlete != "Pierre Sarnow")#
#
dffscoring <- subset(dffscoring, session != 178) #
#dffscoring <- subset(dffscoring, team != "Novo Nordisk") #
#
dffscoring <- subset(dffscoring, select= -c(cdate, date, score.x, weight, height, gender, device, tz, notes, session_date, timing, trainer, position))      #
dffscoring <- subset(dffscoring, athlete != "NA")#
# shorten names for graphs#
dffscoring$muscle[dffscoring$muscle=="Gastrocnemius/Soleus"] <- "GS"#
dffscoring$muscle[dffscoring$muscle=="Rectus Femoris"] <- "RF"#
dffscoring$muscle[dffscoring$muscle=="Vastus Lateralis"] <- "VL"#
dffscoring$muscle[dffscoring$muscle=="Vastus Medialis"] <- "VM"#
dffscoring$muscle[dffscoring$muscle=="Forearm Flexors"] <- "FF"#
dffscoring$muscle[dffscoring$muscle=="Hamstring"] <- "H"#
dffscoring$muscle[dffscoring$muscle=="Infraspinatus"] <- "I"#
dffscoring$muscle[dffscoring$muscle=="Latissimus Dorsi"] <- "LD"#
dffscoring$muscle[dffscoring$muscle=="Posterior Hip"] <- "PH"#
#
dffscoring$session_muscle_side <- paste(dffscoring$session, dffscoring$muscle, dffscoring$side)#
#determine accuracy #
stdev <- ddply(dffscoring, .(athlete, session_muscle_side, muscle, algorithm), summarise,#
  std = sd(score.y),#
  cvar = sd(score.y) / mean(score.y))#
stdev <- subset(stdev, std != "NA")#
#
badsessions <- subset(stdev, algorithm == "OpencvScoring20")#
maxcvar <- ddply(badsessions, .(algorithm), summarise,#
  max = max(boxplot.stats(cvar)$stats))#
#
# badsessions <- ddply(stdev, .(algorithm), summarise,#
#   outliers = boxplot.stats(cvar)$out)#
#
#badsessions2 <- subset(stdev, algorithm == "OpencvScoring17" & cvar > maxcvar$max)#
badsessions2 <- subset(stdev, algorithm == "OpencvScoring20" & cvar > 0.1)#
#
stdev2 <- stdev[ ! stdev$session_muscle_side %in% badsessions2$session_muscle_side, ]#
#
# a20 <- subset(stdev2, algorithm == "OpencvScoring20")#
# a17 <- subset(stdev2, algorithm == "OpencvScoring17")#
# ggplot(a17, aes(muscle, cvar)) +#
#    geom_boxplot(aes(fill = muscle), size=1.5)#
#
stdev3 <- ddply(stdev2, .(algorithm), summarise,#
  sdaccuracy = mean(std),#
  cvaccuracy = mean(cvar))#
#get session scores#
x <- ddply(dffscoring, .(session, athlete, muscle, side, algorithm), summarise,#
  score = mean(score.y))#
#
# range based on absolute max and min score#
# range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
#   number = boxplot.stats(score)$n,#
#   difference = max(score) - min(score))#
#
# range based on stats like in our app, ignore outliers#
range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
  number = boxplot.stats(score)$n,#
  difference = max(boxplot.stats(score)$stats) - min(boxplot.stats(score)$stats))#
#
range <- subset(range, difference != "NA")#
#range <- subset(range, difference != 0)#
range <- subset(range, number > 4)#
meanrange <- ddply(range, .(algorithm), summarise,#
  mrange = mean(difference))#
#
effrange <- merge(meanrange,stdev3,by=c("algorithm"))#
effrange <- ddply(effrange, .(algorithm), summarise,#
  effective_range = mrange/sdaccuracy)
effrange
q()
require(ggplot2)#
require(scales)#
require(reshape)#
require(modeest)#
require(plyr)#
require(RPostgreSQL)#
#
drv <- dbDriver("PostgreSQL")#
# #connect to local database#
con <- dbConnect(drv, dbname="musclesound_production")#
select = "select #
    scored_images.fixed_mean,#
    scored_images.fixed_threshold as fixed_threshold,#
    scored_images.auto_mean as auto_mean,#
    scored_images.auto_threshold as auto_threshold,#
    scored_images.processed_in as processed_in,#
    scored_images.created_at as created_at,#
    scored_images.updated_at as updated_at,#
    scored_images.calculated_in as calculated_in,#
    scored_images.crop_x as crop_x,#
    scored_images.crop_y as crop_y,#
    scored_images.crop_w as crop_w,#
    scored_images.crop_h as crop_h,#
    scored_images.scan_id as scan_id,#
    scored_images.fixed_score as fixed_score,#
    scored_images.algorithm as algorithm#
          FROM scored_images#
               "#
rs <- dbSendQuery(con, select)#
dffc <- fetch(rs,n=-1) #
#
dffd <- dffc#
#"OpencvScoring20"  "OpencvScoring17"  "OpencvScoring10"  "OpencvScoring21"  "RmagickScoring10"#
#"OpencvScoring20"   "OpencvScoring20_1" "OpencvScoring17"   "OpencvScoring10"   "RmagickScoring10" #
opencv <- subset(dffd, algorithm == "OpencvScoring10")#
acrop <- subset(dffd, algorithm == "OpencvScoring17")#
#rmagic <- subset(dffd, algorithm == "RmagickScoring10")#
alg22 <- subset(dffd, algorithm == "OpencvScoring20_0")#
alg18 <- subset(dffd, algorithm == "OpencvScoring20_95")#
alg23 <- subset(dffd, algorithm == "OpencvScoring20_79")#
alg24 <- subset(dffd, algorithm == "OpencvScoring20_81")#
alg25 <- subset(dffd, algorithm == "OpencvScoring20_82")#
alg26 <- subset(dffd, algorithm == "OpencvScoring20_83")#
alg27 <- subset(dffd, algorithm == "OpencvScoring20_84")#
alg28 <- subset(dffd, algorithm == "OpencvScoring20_45")#
alg29 <- subset(dffd, algorithm == "OpencvScoring20_46")#
alg30 <- subset(dffd, algorithm == "OpencvScoring20_47")#
alg31 <- subset(dffd, algorithm == "OpencvScoring20_48")#
alg32 <- subset(dffd, algorithm == "OpencvScoring20_49")#
alg33 <- subset(dffd, algorithm == "OpencvScoring20_50")#
alg34 <- subset(dffd, algorithm == "OpencvScoring20_51")#
alg35 <- subset(dffd, algorithm == "OpencvScoring20_52")#
alg36 <- subset(dffd, algorithm == "OpencvScoring20_53")#
alg37 <- subset(dffd, algorithm == "OpencvScoring20_54")#
alg38 <- subset(dffd, algorithm == "OpencvScoring20_55")#
alg39 <- subset(dffd, algorithm == "OpencvScoring20_56")#
opencv$ocvscore <- opencv$fixed_score#
opencv$crop <- "OpencvScoring10"#
opencv <- subset(opencv, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
# rmagic$rmscore <- rmagic$fixed_score#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_y, crop_w, crop_h, processed_in, calculated_in))#
acrop$acropscore <- acrop$fixed_score#
acrop$crop <- "OpencvScoring17"#
acrop <- subset(acrop, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
# rmagic$r10score <- rmagic$fixed_score#
# rmagic$crop <- "RmagickScoring10"#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
alg22$a22score <- alg22$fixed_score#
alg22$crop <- "OpencvScoring20"#
alg22 <- subset(alg22, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 45#
alg22$a22score <- round(((alg22$a22score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg18$a18score <- alg18$fixed_score#
alg18$crop <- "OpencvScoring20_1"#
alg18 <- subset(alg18, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg18$a18score <- round(((alg18$a18score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg23$a23score <- alg23$fixed_score#
alg23$crop <- "OpencvScoring20_2"#
alg23 <- subset(alg23, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg23$a23score <- round(((alg23$a23score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg24$a24score <- alg24$fixed_score#
alg24$crop <- "OpencvScoring20_3"#
alg24 <- subset(alg24, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 67#
alg24$a24score <- round(((alg24$a24score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg25$a25score <- alg25$fixed_score#
alg25$crop <- "OpencvScoring20_4"#
alg25 <- subset(alg25, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 68#
alg25$a25score <- round(((alg25$a25score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg26$a26score <- alg26$fixed_score#
alg26$crop <- "OpencvScoring20_5"#
alg26 <- subset(alg26, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 69#
alg26$a26score <- round(((alg26$a26score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg27$a27score <- alg27$fixed_score#
alg27$crop <- "OpencvScoring20_6"#
alg27 <- subset(alg27, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 70#
alg27$a27score <- round(((alg27$a27score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg28$a28score <- alg28$fixed_score#
alg28$crop <- "OpencvScoring20_7"#
alg28 <- subset(alg28, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg28$a28score <- round(((alg28$a28score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg29$a29score <- alg29$fixed_score#
alg29$crop <- "OpencvScoring20_8"#
alg29 <- subset(alg29, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg29$a29score <- round(((alg29$a29score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg30$a30score <- alg30$fixed_score#
alg30$crop <- "OpencvScoring20_9"#
alg30 <- subset(alg30, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg30$a30score <- round(((alg30$a30score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg31$a31score <- alg31$fixed_score#
alg31$crop <- "OpencvScoring20_10"#
alg31 <- subset(alg31, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg31$a31score <- round(((alg31$a31score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg32$a32score <- alg32$fixed_score#
alg32$crop <- "OpencvScoring20_11"#
alg32 <- subset(alg32, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg32$a32score <- round(((alg32$a32score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg33$a33score <- alg33$fixed_score#
alg33$crop <- "OpencvScoring20_12"#
alg33 <- subset(alg33, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg33$a33score <- round(((alg33$a33score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg34$a34score <- alg34$fixed_score#
alg34$crop <- "OpencvScoring20_13"#
alg34 <- subset(alg34, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg34$a34score <- round(((alg34$a34score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg35$a35score <- alg35$fixed_score#
alg35$crop <- "OpencvScoring20_14"#
alg35 <- subset(alg35, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg35$a35score <- round(((alg35$a35score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg36$a36score <- alg36$fixed_score#
alg36$crop <- "OpencvScoring20_15"#
alg36 <- subset(alg36, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg36$a36score <- round(((alg36$a36score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg37$a37score <- alg37$fixed_score#
alg37$crop <- "OpencvScoring20_16"#
alg37 <- subset(alg37, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg37$a37score <- round(((alg37$a37score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg38$a38score <- alg38$fixed_score#
alg38$crop <- "OpencvScoring20_17"#
alg38 <- subset(alg38, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg38$a38score <- round(((alg38$a38score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg39$a39score <- alg39$fixed_score#
alg39$crop <- "OpencvScoring20_18"#
alg39 <- subset(alg39, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg39$a39score <- round(((alg39$a39score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
# compare2 <- merge(opencv, acrop, by=c("scan_id"))#
# compare2$diff <- round((compare2$ocvscore - compare2$acropscore),digits=1)#
# compare2$type <- "all images"#
#
# ggplot(compare2, aes(type, diff)) +#
#    geom_boxplot()#
#
# index2 <- with(compare2, order(abs(diff),decreasing=T))#
# outliers <- compare2[index2, ]   #
#
########################################################################################
#run regular dff to get all scans with data#
            drv <- dbDriver("PostgreSQL")#
            # #connect to local database#
            con <- dbConnect(drv, dbname="musclesound_production")#
#
            select = "select #
                           scans.created_at as cdate, #
                           scans.study_at as date, #
                           scans.sagittal_plane as side,#
                           scans.id as scan_id,#
                           athletes.first_name || ' ' || athletes.last_name as athlete, #
                           athletes.id as id,#
                           athletes.weight as weight, #
                           athletes.height as height,#
                           athletes.gender as gender,#
                           scored_images.fixed_score as score,#
                           muscles.name as muscle,#
                           devices.name as device,#
                           devices.time_zone as tz,#
                           teams.name as team,#
                           sessions.id as session, #
                           sessions.notes as notes, #
                           sessions.start_at as session_date, #
                           sessions.event_timing as timing,#
                           users.first_name || ' ' || users.last_name as trainer#
                      FROM scans#
                           join scored_images on scans.scored_image_id = scored_images.id#
                           join athletes on scans.athlete_id = athletes.id#
                           join muscles on scans.muscle_id = muscles.id#
                           join devices on scans.device_id = devices.id#
                           join teams on scans.team_id = teams.id#
                           join sessions on scans.session_id = sessions.id#
                           join users on sessions.user_id = users.id"#
            rs <- dbSendQuery(con, select)#
            dffa <- fetch(rs,n=-1) #
#
            select2 = "select #
                           athletes.first_name || ' ' || athletes.last_name as athlete,#
                           athletes.id as id,#
                           positions.name as position#
                      FROM athletes#
                           join positions on athletes.position_id = positions.id"#
            ra <- dbSendQuery(con, select2)#
#
            dffb <- fetch(ra,n=-1)#
            dff <- merge(dffa,dffb,by=c("id","athlete"),all=TRUE)#
            #change date#
            dff$date[is.na(dff$date)] <- dff$session_date[is.na(dff$date)]#
#
##################################################################
#then merge compare2 with dff#
colnames(opencv) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(acrop) <- c("crop_y","crop_h", "scan_id", "score", "algorithm")#
#colnames(rmagic) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg22) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg18) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg23) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg24) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg25) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg26) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg27) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg28) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg29) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg30) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg31) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg32) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg33) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg34) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg35) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg36) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg37) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg38) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg39) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
#
compare3 <- rbind(alg22, alg18, alg23)#
# compare3 <- rbind(alg22, alg18, alg23, alg24, alg25, alg26, alg27, alg28, alg29,#
#                   alg30, alg31, alg32, alg33, alg34, alg35, alg36, alg37, alg38, alg39)#
dffscoring <- merge(dff,compare3,by=c("scan_id"),all=TRUE)#
#remove unwanted columes#
dffscoring$date <- as.numeric(dffscoring$date)#
#
#ignore before Rox SpringTraining when settings were inconsistent#
dffscoring <- subset(dffscoring, date > 1361244845)#
#ignore images for PS, they are mostly trash#
dffscoring <- subset(dffscoring, athlete != "Pierre Sarnow")#
#
dffscoring <- subset(dffscoring, session != 178) #
#dffscoring <- subset(dffscoring, team != "Novo Nordisk") #
#
dffscoring <- subset(dffscoring, select= -c(cdate, date, score.x, weight, height, gender, device, tz, notes, session_date, timing, trainer, position))      #
dffscoring <- subset(dffscoring, athlete != "NA")#
# shorten names for graphs#
dffscoring$muscle[dffscoring$muscle=="Gastrocnemius/Soleus"] <- "GS"#
dffscoring$muscle[dffscoring$muscle=="Rectus Femoris"] <- "RF"#
dffscoring$muscle[dffscoring$muscle=="Vastus Lateralis"] <- "VL"#
dffscoring$muscle[dffscoring$muscle=="Vastus Medialis"] <- "VM"#
dffscoring$muscle[dffscoring$muscle=="Forearm Flexors"] <- "FF"#
dffscoring$muscle[dffscoring$muscle=="Hamstring"] <- "H"#
dffscoring$muscle[dffscoring$muscle=="Infraspinatus"] <- "I"#
dffscoring$muscle[dffscoring$muscle=="Latissimus Dorsi"] <- "LD"#
dffscoring$muscle[dffscoring$muscle=="Posterior Hip"] <- "PH"#
#
dffscoring$session_muscle_side <- paste(dffscoring$session, dffscoring$muscle, dffscoring$side)#
#determine accuracy #
stdev <- ddply(dffscoring, .(athlete, session_muscle_side, muscle, algorithm), summarise,#
  std = sd(score.y),#
  cvar = sd(score.y) / mean(score.y))#
stdev <- subset(stdev, std != "NA")#
#
badsessions <- subset(stdev, algorithm == "OpencvScoring20")#
maxcvar <- ddply(badsessions, .(algorithm), summarise,#
  max = max(boxplot.stats(cvar)$stats))#
#
# badsessions <- ddply(stdev, .(algorithm), summarise,#
#   outliers = boxplot.stats(cvar)$out)#
#
#badsessions2 <- subset(stdev, algorithm == "OpencvScoring17" & cvar > maxcvar$max)#
badsessions2 <- subset(stdev, algorithm == "OpencvScoring20" & cvar > 0.1)#
#
stdev2 <- stdev[ ! stdev$session_muscle_side %in% badsessions2$session_muscle_side, ]#
#
# a20 <- subset(stdev2, algorithm == "OpencvScoring20")#
# a17 <- subset(stdev2, algorithm == "OpencvScoring17")#
# ggplot(a17, aes(muscle, cvar)) +#
#    geom_boxplot(aes(fill = muscle), size=1.5)#
#
stdev3 <- ddply(stdev2, .(algorithm), summarise,#
  sdaccuracy = mean(std),#
  cvaccuracy = mean(cvar))#
#get session scores#
x <- ddply(dffscoring, .(session, athlete, muscle, side, algorithm), summarise,#
  score = mean(score.y))#
#
# range based on absolute max and min score#
# range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
#   number = boxplot.stats(score)$n,#
#   difference = max(score) - min(score))#
#
# range based on stats like in our app, ignore outliers#
range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
  number = boxplot.stats(score)$n,#
  difference = max(boxplot.stats(score)$stats) - min(boxplot.stats(score)$stats))#
#
range <- subset(range, difference != "NA")#
#range <- subset(range, difference != 0)#
range <- subset(range, number > 4)#
meanrange <- ddply(range, .(algorithm), summarise,#
  mrange = mean(difference))#
#
effrange <- merge(meanrange,stdev3,by=c("algorithm"))#
effrange <- ddply(effrange, .(algorithm), summarise,#
  effective_range = mrange/sdaccuracy)
effrange
q()
require(ggplot2)#
require(scales)#
require(reshape)#
require(modeest)#
require(plyr)#
require(RPostgreSQL)#
#
drv <- dbDriver("PostgreSQL")#
# #connect to local database#
con <- dbConnect(drv, dbname="musclesound_production")#
select = "select #
    scored_images.fixed_mean,#
    scored_images.fixed_threshold as fixed_threshold,#
    scored_images.auto_mean as auto_mean,#
    scored_images.auto_threshold as auto_threshold,#
    scored_images.processed_in as processed_in,#
    scored_images.created_at as created_at,#
    scored_images.updated_at as updated_at,#
    scored_images.calculated_in as calculated_in,#
    scored_images.crop_x as crop_x,#
    scored_images.crop_y as crop_y,#
    scored_images.crop_w as crop_w,#
    scored_images.crop_h as crop_h,#
    scored_images.scan_id as scan_id,#
    scored_images.fixed_score as fixed_score,#
    scored_images.algorithm as algorithm#
          FROM scored_images#
               "#
rs <- dbSendQuery(con, select)#
dffc <- fetch(rs,n=-1) #
#
dffd <- dffc#
#"OpencvScoring20"  "OpencvScoring17"  "OpencvScoring10"  "OpencvScoring21"  "RmagickScoring10"#
#"OpencvScoring20"   "OpencvScoring20_1" "OpencvScoring17"   "OpencvScoring10"   "RmagickScoring10" #
opencv <- subset(dffd, algorithm == "OpencvScoring10")#
acrop <- subset(dffd, algorithm == "OpencvScoring17")#
#rmagic <- subset(dffd, algorithm == "RmagickScoring10")#
alg22 <- subset(dffd, algorithm == "OpencvScoring20_0")#
alg18 <- subset(dffd, algorithm == "OpencvScoring20_96")#
alg23 <- subset(dffd, algorithm == "OpencvScoring20_79")#
alg24 <- subset(dffd, algorithm == "OpencvScoring20_81")#
alg25 <- subset(dffd, algorithm == "OpencvScoring20_82")#
alg26 <- subset(dffd, algorithm == "OpencvScoring20_83")#
alg27 <- subset(dffd, algorithm == "OpencvScoring20_84")#
alg28 <- subset(dffd, algorithm == "OpencvScoring20_45")#
alg29 <- subset(dffd, algorithm == "OpencvScoring20_46")#
alg30 <- subset(dffd, algorithm == "OpencvScoring20_47")#
alg31 <- subset(dffd, algorithm == "OpencvScoring20_48")#
alg32 <- subset(dffd, algorithm == "OpencvScoring20_49")#
alg33 <- subset(dffd, algorithm == "OpencvScoring20_50")#
alg34 <- subset(dffd, algorithm == "OpencvScoring20_51")#
alg35 <- subset(dffd, algorithm == "OpencvScoring20_52")#
alg36 <- subset(dffd, algorithm == "OpencvScoring20_53")#
alg37 <- subset(dffd, algorithm == "OpencvScoring20_54")#
alg38 <- subset(dffd, algorithm == "OpencvScoring20_55")#
alg39 <- subset(dffd, algorithm == "OpencvScoring20_56")#
opencv$ocvscore <- opencv$fixed_score#
opencv$crop <- "OpencvScoring10"#
opencv <- subset(opencv, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
# rmagic$rmscore <- rmagic$fixed_score#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_y, crop_w, crop_h, processed_in, calculated_in))#
acrop$acropscore <- acrop$fixed_score#
acrop$crop <- "OpencvScoring17"#
acrop <- subset(acrop, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
# rmagic$r10score <- rmagic$fixed_score#
# rmagic$crop <- "RmagickScoring10"#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
alg22$a22score <- alg22$fixed_score#
alg22$crop <- "OpencvScoring20"#
alg22 <- subset(alg22, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 45#
alg22$a22score <- round(((alg22$a22score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg18$a18score <- alg18$fixed_score#
alg18$crop <- "OpencvScoring20_1"#
alg18 <- subset(alg18, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg18$a18score <- round(((alg18$a18score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg23$a23score <- alg23$fixed_score#
alg23$crop <- "OpencvScoring20_2"#
alg23 <- subset(alg23, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg23$a23score <- round(((alg23$a23score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg24$a24score <- alg24$fixed_score#
alg24$crop <- "OpencvScoring20_3"#
alg24 <- subset(alg24, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 67#
alg24$a24score <- round(((alg24$a24score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg25$a25score <- alg25$fixed_score#
alg25$crop <- "OpencvScoring20_4"#
alg25 <- subset(alg25, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 68#
alg25$a25score <- round(((alg25$a25score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg26$a26score <- alg26$fixed_score#
alg26$crop <- "OpencvScoring20_5"#
alg26 <- subset(alg26, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 69#
alg26$a26score <- round(((alg26$a26score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg27$a27score <- alg27$fixed_score#
alg27$crop <- "OpencvScoring20_6"#
alg27 <- subset(alg27, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 70#
alg27$a27score <- round(((alg27$a27score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg28$a28score <- alg28$fixed_score#
alg28$crop <- "OpencvScoring20_7"#
alg28 <- subset(alg28, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg28$a28score <- round(((alg28$a28score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg29$a29score <- alg29$fixed_score#
alg29$crop <- "OpencvScoring20_8"#
alg29 <- subset(alg29, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg29$a29score <- round(((alg29$a29score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg30$a30score <- alg30$fixed_score#
alg30$crop <- "OpencvScoring20_9"#
alg30 <- subset(alg30, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg30$a30score <- round(((alg30$a30score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg31$a31score <- alg31$fixed_score#
alg31$crop <- "OpencvScoring20_10"#
alg31 <- subset(alg31, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg31$a31score <- round(((alg31$a31score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg32$a32score <- alg32$fixed_score#
alg32$crop <- "OpencvScoring20_11"#
alg32 <- subset(alg32, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg32$a32score <- round(((alg32$a32score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg33$a33score <- alg33$fixed_score#
alg33$crop <- "OpencvScoring20_12"#
alg33 <- subset(alg33, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg33$a33score <- round(((alg33$a33score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg34$a34score <- alg34$fixed_score#
alg34$crop <- "OpencvScoring20_13"#
alg34 <- subset(alg34, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg34$a34score <- round(((alg34$a34score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg35$a35score <- alg35$fixed_score#
alg35$crop <- "OpencvScoring20_14"#
alg35 <- subset(alg35, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg35$a35score <- round(((alg35$a35score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg36$a36score <- alg36$fixed_score#
alg36$crop <- "OpencvScoring20_15"#
alg36 <- subset(alg36, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg36$a36score <- round(((alg36$a36score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg37$a37score <- alg37$fixed_score#
alg37$crop <- "OpencvScoring20_16"#
alg37 <- subset(alg37, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg37$a37score <- round(((alg37$a37score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg38$a38score <- alg38$fixed_score#
alg38$crop <- "OpencvScoring20_17"#
alg38 <- subset(alg38, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg38$a38score <- round(((alg38$a38score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg39$a39score <- alg39$fixed_score#
alg39$crop <- "OpencvScoring20_18"#
alg39 <- subset(alg39, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg39$a39score <- round(((alg39$a39score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
# compare2 <- merge(opencv, acrop, by=c("scan_id"))#
# compare2$diff <- round((compare2$ocvscore - compare2$acropscore),digits=1)#
# compare2$type <- "all images"#
#
# ggplot(compare2, aes(type, diff)) +#
#    geom_boxplot()#
#
# index2 <- with(compare2, order(abs(diff),decreasing=T))#
# outliers <- compare2[index2, ]   #
#
########################################################################################
#run regular dff to get all scans with data#
            drv <- dbDriver("PostgreSQL")#
            # #connect to local database#
            con <- dbConnect(drv, dbname="musclesound_production")#
#
            select = "select #
                           scans.created_at as cdate, #
                           scans.study_at as date, #
                           scans.sagittal_plane as side,#
                           scans.id as scan_id,#
                           athletes.first_name || ' ' || athletes.last_name as athlete, #
                           athletes.id as id,#
                           athletes.weight as weight, #
                           athletes.height as height,#
                           athletes.gender as gender,#
                           scored_images.fixed_score as score,#
                           muscles.name as muscle,#
                           devices.name as device,#
                           devices.time_zone as tz,#
                           teams.name as team,#
                           sessions.id as session, #
                           sessions.notes as notes, #
                           sessions.start_at as session_date, #
                           sessions.event_timing as timing,#
                           users.first_name || ' ' || users.last_name as trainer#
                      FROM scans#
                           join scored_images on scans.scored_image_id = scored_images.id#
                           join athletes on scans.athlete_id = athletes.id#
                           join muscles on scans.muscle_id = muscles.id#
                           join devices on scans.device_id = devices.id#
                           join teams on scans.team_id = teams.id#
                           join sessions on scans.session_id = sessions.id#
                           join users on sessions.user_id = users.id"#
            rs <- dbSendQuery(con, select)#
            dffa <- fetch(rs,n=-1) #
#
            select2 = "select #
                           athletes.first_name || ' ' || athletes.last_name as athlete,#
                           athletes.id as id,#
                           positions.name as position#
                      FROM athletes#
                           join positions on athletes.position_id = positions.id"#
            ra <- dbSendQuery(con, select2)#
#
            dffb <- fetch(ra,n=-1)#
            dff <- merge(dffa,dffb,by=c("id","athlete"),all=TRUE)#
            #change date#
            dff$date[is.na(dff$date)] <- dff$session_date[is.na(dff$date)]#
#
##################################################################
#then merge compare2 with dff#
colnames(opencv) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(acrop) <- c("crop_y","crop_h", "scan_id", "score", "algorithm")#
#colnames(rmagic) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg22) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg18) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg23) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg24) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg25) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg26) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg27) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg28) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg29) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg30) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg31) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg32) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg33) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg34) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg35) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg36) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg37) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg38) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg39) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
#
compare3 <- rbind(alg22, alg18, alg23)#
# compare3 <- rbind(alg22, alg18, alg23, alg24, alg25, alg26, alg27, alg28, alg29,#
#                   alg30, alg31, alg32, alg33, alg34, alg35, alg36, alg37, alg38, alg39)#
dffscoring <- merge(dff,compare3,by=c("scan_id"),all=TRUE)#
#remove unwanted columes#
dffscoring$date <- as.numeric(dffscoring$date)#
#
#ignore before Rox SpringTraining when settings were inconsistent#
dffscoring <- subset(dffscoring, date > 1361244845)#
#ignore images for PS, they are mostly trash#
dffscoring <- subset(dffscoring, athlete != "Pierre Sarnow")#
#
dffscoring <- subset(dffscoring, session != 178) #
#dffscoring <- subset(dffscoring, team != "Novo Nordisk") #
#
dffscoring <- subset(dffscoring, select= -c(cdate, date, score.x, weight, height, gender, device, tz, notes, session_date, timing, trainer, position))      #
dffscoring <- subset(dffscoring, athlete != "NA")#
# shorten names for graphs#
dffscoring$muscle[dffscoring$muscle=="Gastrocnemius/Soleus"] <- "GS"#
dffscoring$muscle[dffscoring$muscle=="Rectus Femoris"] <- "RF"#
dffscoring$muscle[dffscoring$muscle=="Vastus Lateralis"] <- "VL"#
dffscoring$muscle[dffscoring$muscle=="Vastus Medialis"] <- "VM"#
dffscoring$muscle[dffscoring$muscle=="Forearm Flexors"] <- "FF"#
dffscoring$muscle[dffscoring$muscle=="Hamstring"] <- "H"#
dffscoring$muscle[dffscoring$muscle=="Infraspinatus"] <- "I"#
dffscoring$muscle[dffscoring$muscle=="Latissimus Dorsi"] <- "LD"#
dffscoring$muscle[dffscoring$muscle=="Posterior Hip"] <- "PH"#
#
dffscoring$session_muscle_side <- paste(dffscoring$session, dffscoring$muscle, dffscoring$side)#
#determine accuracy #
stdev <- ddply(dffscoring, .(athlete, session_muscle_side, muscle, algorithm), summarise,#
  std = sd(score.y),#
  cvar = sd(score.y) / mean(score.y))#
stdev <- subset(stdev, std != "NA")#
#
badsessions <- subset(stdev, algorithm == "OpencvScoring20")#
maxcvar <- ddply(badsessions, .(algorithm), summarise,#
  max = max(boxplot.stats(cvar)$stats))#
#
# badsessions <- ddply(stdev, .(algorithm), summarise,#
#   outliers = boxplot.stats(cvar)$out)#
#
#badsessions2 <- subset(stdev, algorithm == "OpencvScoring17" & cvar > maxcvar$max)#
badsessions2 <- subset(stdev, algorithm == "OpencvScoring20" & cvar > 0.1)#
#
stdev2 <- stdev[ ! stdev$session_muscle_side %in% badsessions2$session_muscle_side, ]#
#
# a20 <- subset(stdev2, algorithm == "OpencvScoring20")#
# a17 <- subset(stdev2, algorithm == "OpencvScoring17")#
# ggplot(a17, aes(muscle, cvar)) +#
#    geom_boxplot(aes(fill = muscle), size=1.5)#
#
stdev3 <- ddply(stdev2, .(algorithm), summarise,#
  sdaccuracy = mean(std),#
  cvaccuracy = mean(cvar))#
#get session scores#
x <- ddply(dffscoring, .(session, athlete, muscle, side, algorithm), summarise,#
  score = mean(score.y))#
#
# range based on absolute max and min score#
# range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
#   number = boxplot.stats(score)$n,#
#   difference = max(score) - min(score))#
#
# range based on stats like in our app, ignore outliers#
range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
  number = boxplot.stats(score)$n,#
  difference = max(boxplot.stats(score)$stats) - min(boxplot.stats(score)$stats))#
#
range <- subset(range, difference != "NA")#
#range <- subset(range, difference != 0)#
range <- subset(range, number > 4)#
meanrange <- ddply(range, .(algorithm), summarise,#
  mrange = mean(difference))#
#
effrange <- merge(meanrange,stdev3,by=c("algorithm"))#
effrange <- ddply(effrange, .(algorithm), summarise,#
  effective_range = mrange/sdaccuracy)
effrange
dffd <- dffc#
#"OpencvScoring20"  "OpencvScoring17"  "OpencvScoring10"  "OpencvScoring21"  "RmagickScoring10"#
#"OpencvScoring20"   "OpencvScoring20_1" "OpencvScoring17"   "OpencvScoring10"   "RmagickScoring10" #
opencv <- subset(dffd, algorithm == "OpencvScoring10")#
acrop <- subset(dffd, algorithm == "OpencvScoring17")#
#rmagic <- subset(dffd, algorithm == "RmagickScoring10")#
alg22 <- subset(dffd, algorithm == "OpencvScoring20_0")#
alg18 <- subset(dffd, algorithm == "OpencvScoring20_96")#
alg23 <- subset(dffd, algorithm == "OpencvScoring20_79")#
alg24 <- subset(dffd, algorithm == "OpencvScoring20_81")#
alg25 <- subset(dffd, algorithm == "OpencvScoring20_82")#
alg26 <- subset(dffd, algorithm == "OpencvScoring20_83")#
alg27 <- subset(dffd, algorithm == "OpencvScoring20_84")#
alg28 <- subset(dffd, algorithm == "OpencvScoring20_45")#
alg29 <- subset(dffd, algorithm == "OpencvScoring20_46")#
alg30 <- subset(dffd, algorithm == "OpencvScoring20_47")#
alg31 <- subset(dffd, algorithm == "OpencvScoring20_48")#
alg32 <- subset(dffd, algorithm == "OpencvScoring20_49")#
alg33 <- subset(dffd, algorithm == "OpencvScoring20_50")#
alg34 <- subset(dffd, algorithm == "OpencvScoring20_51")#
alg35 <- subset(dffd, algorithm == "OpencvScoring20_52")#
alg36 <- subset(dffd, algorithm == "OpencvScoring20_53")#
alg37 <- subset(dffd, algorithm == "OpencvScoring20_54")#
alg38 <- subset(dffd, algorithm == "OpencvScoring20_55")#
alg39 <- subset(dffd, algorithm == "OpencvScoring20_56")#
opencv$ocvscore <- opencv$fixed_score#
opencv$crop <- "OpencvScoring10"#
opencv <- subset(opencv, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
# rmagic$rmscore <- rmagic$fixed_score#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_y, crop_w, crop_h, processed_in, calculated_in))#
acrop$acropscore <- acrop$fixed_score#
acrop$crop <- "OpencvScoring17"#
acrop <- subset(acrop, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
# rmagic$r10score <- rmagic$fixed_score#
# rmagic$crop <- "RmagickScoring10"#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
alg22$a22score <- alg22$fixed_score#
alg22$crop <- "OpencvScoring20"#
alg22 <- subset(alg22, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 45#
alg22$a22score <- round(((alg22$a22score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg18$a18score <- alg18$fixed_score#
alg18$crop <- "OpencvScoring20_1"#
alg18 <- subset(alg18, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 69#
alg18$a18score <- round(((alg18$a18score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg23$a23score <- alg23$fixed_score#
alg23$crop <- "OpencvScoring20_2"#
alg23 <- subset(alg23, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg23$a23score <- round(((alg23$a23score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg24$a24score <- alg24$fixed_score#
alg24$crop <- "OpencvScoring20_3"#
alg24 <- subset(alg24, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 67#
alg24$a24score <- round(((alg24$a24score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg25$a25score <- alg25$fixed_score#
alg25$crop <- "OpencvScoring20_4"#
alg25 <- subset(alg25, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 68#
alg25$a25score <- round(((alg25$a25score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg26$a26score <- alg26$fixed_score#
alg26$crop <- "OpencvScoring20_5"#
alg26 <- subset(alg26, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 69#
alg26$a26score <- round(((alg26$a26score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg27$a27score <- alg27$fixed_score#
alg27$crop <- "OpencvScoring20_6"#
alg27 <- subset(alg27, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 70#
alg27$a27score <- round(((alg27$a27score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg28$a28score <- alg28$fixed_score#
alg28$crop <- "OpencvScoring20_7"#
alg28 <- subset(alg28, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg28$a28score <- round(((alg28$a28score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg29$a29score <- alg29$fixed_score#
alg29$crop <- "OpencvScoring20_8"#
alg29 <- subset(alg29, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg29$a29score <- round(((alg29$a29score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg30$a30score <- alg30$fixed_score#
alg30$crop <- "OpencvScoring20_9"#
alg30 <- subset(alg30, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg30$a30score <- round(((alg30$a30score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg31$a31score <- alg31$fixed_score#
alg31$crop <- "OpencvScoring20_10"#
alg31 <- subset(alg31, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg31$a31score <- round(((alg31$a31score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg32$a32score <- alg32$fixed_score#
alg32$crop <- "OpencvScoring20_11"#
alg32 <- subset(alg32, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg32$a32score <- round(((alg32$a32score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg33$a33score <- alg33$fixed_score#
alg33$crop <- "OpencvScoring20_12"#
alg33 <- subset(alg33, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg33$a33score <- round(((alg33$a33score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg34$a34score <- alg34$fixed_score#
alg34$crop <- "OpencvScoring20_13"#
alg34 <- subset(alg34, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg34$a34score <- round(((alg34$a34score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg35$a35score <- alg35$fixed_score#
alg35$crop <- "OpencvScoring20_14"#
alg35 <- subset(alg35, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg35$a35score <- round(((alg35$a35score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg36$a36score <- alg36$fixed_score#
alg36$crop <- "OpencvScoring20_15"#
alg36 <- subset(alg36, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg36$a36score <- round(((alg36$a36score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg37$a37score <- alg37$fixed_score#
alg37$crop <- "OpencvScoring20_16"#
alg37 <- subset(alg37, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg37$a37score <- round(((alg37$a37score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg38$a38score <- alg38$fixed_score#
alg38$crop <- "OpencvScoring20_17"#
alg38 <- subset(alg38, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg38$a38score <- round(((alg38$a38score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg39$a39score <- alg39$fixed_score#
alg39$crop <- "OpencvScoring20_18"#
alg39 <- subset(alg39, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg39$a39score <- round(((alg39$a39score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
# compare2 <- merge(opencv, acrop, by=c("scan_id"))#
# compare2$diff <- round((compare2$ocvscore - compare2$acropscore),digits=1)#
# compare2$type <- "all images"#
#
# ggplot(compare2, aes(type, diff)) +#
#    geom_boxplot()#
#
# index2 <- with(compare2, order(abs(diff),decreasing=T))#
# outliers <- compare2[index2, ]   #
#
########################################################################################
#run regular dff to get all scans with data#
            drv <- dbDriver("PostgreSQL")#
            # #connect to local database#
            con <- dbConnect(drv, dbname="musclesound_production")#
#
            select = "select #
                           scans.created_at as cdate, #
                           scans.study_at as date, #
                           scans.sagittal_plane as side,#
                           scans.id as scan_id,#
                           athletes.first_name || ' ' || athletes.last_name as athlete, #
                           athletes.id as id,#
                           athletes.weight as weight, #
                           athletes.height as height,#
                           athletes.gender as gender,#
                           scored_images.fixed_score as score,#
                           muscles.name as muscle,#
                           devices.name as device,#
                           devices.time_zone as tz,#
                           teams.name as team,#
                           sessions.id as session, #
                           sessions.notes as notes, #
                           sessions.start_at as session_date, #
                           sessions.event_timing as timing,#
                           users.first_name || ' ' || users.last_name as trainer#
                      FROM scans#
                           join scored_images on scans.scored_image_id = scored_images.id#
                           join athletes on scans.athlete_id = athletes.id#
                           join muscles on scans.muscle_id = muscles.id#
                           join devices on scans.device_id = devices.id#
                           join teams on scans.team_id = teams.id#
                           join sessions on scans.session_id = sessions.id#
                           join users on sessions.user_id = users.id"#
            rs <- dbSendQuery(con, select)#
            dffa <- fetch(rs,n=-1) #
#
            select2 = "select #
                           athletes.first_name || ' ' || athletes.last_name as athlete,#
                           athletes.id as id,#
                           positions.name as position#
                      FROM athletes#
                           join positions on athletes.position_id = positions.id"#
            ra <- dbSendQuery(con, select2)#
#
            dffb <- fetch(ra,n=-1)#
            dff <- merge(dffa,dffb,by=c("id","athlete"),all=TRUE)#
            #change date#
            dff$date[is.na(dff$date)] <- dff$session_date[is.na(dff$date)]#
#
##################################################################
#then merge compare2 with dff#
colnames(opencv) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(acrop) <- c("crop_y","crop_h", "scan_id", "score", "algorithm")#
#colnames(rmagic) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg22) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg18) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg23) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg24) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg25) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg26) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg27) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg28) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg29) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg30) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg31) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg32) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg33) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg34) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg35) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg36) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg37) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg38) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg39) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
#
compare3 <- rbind(alg22, alg18, alg23)#
# compare3 <- rbind(alg22, alg18, alg23, alg24, alg25, alg26, alg27, alg28, alg29,#
#                   alg30, alg31, alg32, alg33, alg34, alg35, alg36, alg37, alg38, alg39)#
dffscoring <- merge(dff,compare3,by=c("scan_id"),all=TRUE)#
#remove unwanted columes#
dffscoring$date <- as.numeric(dffscoring$date)#
#
#ignore before Rox SpringTraining when settings were inconsistent#
dffscoring <- subset(dffscoring, date > 1361244845)#
#ignore images for PS, they are mostly trash#
dffscoring <- subset(dffscoring, athlete != "Pierre Sarnow")#
#
dffscoring <- subset(dffscoring, session != 178) #
#dffscoring <- subset(dffscoring, team != "Novo Nordisk") #
#
dffscoring <- subset(dffscoring, select= -c(cdate, date, score.x, weight, height, gender, device, tz, notes, session_date, timing, trainer, position))      #
dffscoring <- subset(dffscoring, athlete != "NA")#
# shorten names for graphs#
dffscoring$muscle[dffscoring$muscle=="Gastrocnemius/Soleus"] <- "GS"#
dffscoring$muscle[dffscoring$muscle=="Rectus Femoris"] <- "RF"#
dffscoring$muscle[dffscoring$muscle=="Vastus Lateralis"] <- "VL"#
dffscoring$muscle[dffscoring$muscle=="Vastus Medialis"] <- "VM"#
dffscoring$muscle[dffscoring$muscle=="Forearm Flexors"] <- "FF"#
dffscoring$muscle[dffscoring$muscle=="Hamstring"] <- "H"#
dffscoring$muscle[dffscoring$muscle=="Infraspinatus"] <- "I"#
dffscoring$muscle[dffscoring$muscle=="Latissimus Dorsi"] <- "LD"#
dffscoring$muscle[dffscoring$muscle=="Posterior Hip"] <- "PH"#
#
dffscoring$session_muscle_side <- paste(dffscoring$session, dffscoring$muscle, dffscoring$side)#
#determine accuracy #
stdev <- ddply(dffscoring, .(athlete, session_muscle_side, muscle, algorithm), summarise,#
  std = sd(score.y),#
  cvar = sd(score.y) / mean(score.y))#
stdev <- subset(stdev, std != "NA")#
#
badsessions <- subset(stdev, algorithm == "OpencvScoring20")#
maxcvar <- ddply(badsessions, .(algorithm), summarise,#
  max = max(boxplot.stats(cvar)$stats))#
#
# badsessions <- ddply(stdev, .(algorithm), summarise,#
#   outliers = boxplot.stats(cvar)$out)#
#
#badsessions2 <- subset(stdev, algorithm == "OpencvScoring17" & cvar > maxcvar$max)#
badsessions2 <- subset(stdev, algorithm == "OpencvScoring20" & cvar > 0.1)#
#
stdev2 <- stdev[ ! stdev$session_muscle_side %in% badsessions2$session_muscle_side, ]#
#
# a20 <- subset(stdev2, algorithm == "OpencvScoring20")#
# a17 <- subset(stdev2, algorithm == "OpencvScoring17")#
# ggplot(a17, aes(muscle, cvar)) +#
#    geom_boxplot(aes(fill = muscle), size=1.5)#
#
stdev3 <- ddply(stdev2, .(algorithm), summarise,#
  sdaccuracy = mean(std),#
  cvaccuracy = mean(cvar))#
#get session scores#
x <- ddply(dffscoring, .(session, athlete, muscle, side, algorithm), summarise,#
  score = mean(score.y))#
#
# range based on absolute max and min score#
# range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
#   number = boxplot.stats(score)$n,#
#   difference = max(score) - min(score))#
#
# range based on stats like in our app, ignore outliers#
range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
  number = boxplot.stats(score)$n,#
  difference = max(boxplot.stats(score)$stats) - min(boxplot.stats(score)$stats))#
#
range <- subset(range, difference != "NA")#
#range <- subset(range, difference != 0)#
range <- subset(range, number > 4)#
meanrange <- ddply(range, .(algorithm), summarise,#
  mrange = mean(difference))#
#
effrange <- merge(meanrange,stdev3,by=c("algorithm"))#
effrange <- ddply(effrange, .(algorithm), summarise,#
  effective_range = mrange/sdaccuracy)
effrange
q()
require(ggplot2)#
require(scales)#
require(reshape)#
require(modeest)#
require(plyr)#
require(RPostgreSQL)#
#
drv <- dbDriver("PostgreSQL")#
# #connect to local database#
con <- dbConnect(drv, dbname="musclesound_production")#
select = "select #
    scored_images.fixed_mean,#
    scored_images.fixed_threshold as fixed_threshold,#
    scored_images.auto_mean as auto_mean,#
    scored_images.auto_threshold as auto_threshold,#
    scored_images.processed_in as processed_in,#
    scored_images.created_at as created_at,#
    scored_images.updated_at as updated_at,#
    scored_images.calculated_in as calculated_in,#
    scored_images.crop_x as crop_x,#
    scored_images.crop_y as crop_y,#
    scored_images.crop_w as crop_w,#
    scored_images.crop_h as crop_h,#
    scored_images.scan_id as scan_id,#
    scored_images.fixed_score as fixed_score,#
    scored_images.algorithm as algorithm#
          FROM scored_images#
               "#
rs <- dbSendQuery(con, select)#
dffc <- fetch(rs,n=-1) #
#
dffd <- dffc#
#"OpencvScoring20"  "OpencvScoring17"  "OpencvScoring10"  "OpencvScoring21"  "RmagickScoring10"#
#"OpencvScoring20"   "OpencvScoring20_1" "OpencvScoring17"   "OpencvScoring10"   "RmagickScoring10" #
opencv <- subset(dffd, algorithm == "OpencvScoring10")#
acrop <- subset(dffd, algorithm == "OpencvScoring17")#
#rmagic <- subset(dffd, algorithm == "RmagickScoring10")#
alg22 <- subset(dffd, algorithm == "OpencvScoring20_0")#
alg18 <- subset(dffd, algorithm == "OpencvScoring20_97")#
alg23 <- subset(dffd, algorithm == "OpencvScoring20_79")#
alg24 <- subset(dffd, algorithm == "OpencvScoring20_81")#
alg25 <- subset(dffd, algorithm == "OpencvScoring20_82")#
alg26 <- subset(dffd, algorithm == "OpencvScoring20_83")#
alg27 <- subset(dffd, algorithm == "OpencvScoring20_84")#
alg28 <- subset(dffd, algorithm == "OpencvScoring20_45")#
alg29 <- subset(dffd, algorithm == "OpencvScoring20_46")#
alg30 <- subset(dffd, algorithm == "OpencvScoring20_47")#
alg31 <- subset(dffd, algorithm == "OpencvScoring20_48")#
alg32 <- subset(dffd, algorithm == "OpencvScoring20_49")#
alg33 <- subset(dffd, algorithm == "OpencvScoring20_50")#
alg34 <- subset(dffd, algorithm == "OpencvScoring20_51")#
alg35 <- subset(dffd, algorithm == "OpencvScoring20_52")#
alg36 <- subset(dffd, algorithm == "OpencvScoring20_53")#
alg37 <- subset(dffd, algorithm == "OpencvScoring20_54")#
alg38 <- subset(dffd, algorithm == "OpencvScoring20_55")#
alg39 <- subset(dffd, algorithm == "OpencvScoring20_56")#
opencv$ocvscore <- opencv$fixed_score#
opencv$crop <- "OpencvScoring10"#
opencv <- subset(opencv, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
# rmagic$rmscore <- rmagic$fixed_score#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_y, crop_w, crop_h, processed_in, calculated_in))#
acrop$acropscore <- acrop$fixed_score#
acrop$crop <- "OpencvScoring17"#
acrop <- subset(acrop, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
# rmagic$r10score <- rmagic$fixed_score#
# rmagic$crop <- "RmagickScoring10"#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
alg22$a22score <- alg22$fixed_score#
alg22$crop <- "OpencvScoring20"#
alg22 <- subset(alg22, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 45#
alg22$a22score <- round(((alg22$a22score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg18$a18score <- alg18$fixed_score#
alg18$crop <- "OpencvScoring20_1"#
alg18 <- subset(alg18, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg18$a18score <- round(((alg18$a18score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg23$a23score <- alg23$fixed_score#
alg23$crop <- "OpencvScoring20_2"#
alg23 <- subset(alg23, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg23$a23score <- round(((alg23$a23score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg24$a24score <- alg24$fixed_score#
alg24$crop <- "OpencvScoring20_3"#
alg24 <- subset(alg24, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 67#
alg24$a24score <- round(((alg24$a24score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg25$a25score <- alg25$fixed_score#
alg25$crop <- "OpencvScoring20_4"#
alg25 <- subset(alg25, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 68#
alg25$a25score <- round(((alg25$a25score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg26$a26score <- alg26$fixed_score#
alg26$crop <- "OpencvScoring20_5"#
alg26 <- subset(alg26, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 69#
alg26$a26score <- round(((alg26$a26score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg27$a27score <- alg27$fixed_score#
alg27$crop <- "OpencvScoring20_6"#
alg27 <- subset(alg27, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 70#
alg27$a27score <- round(((alg27$a27score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg28$a28score <- alg28$fixed_score#
alg28$crop <- "OpencvScoring20_7"#
alg28 <- subset(alg28, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg28$a28score <- round(((alg28$a28score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg29$a29score <- alg29$fixed_score#
alg29$crop <- "OpencvScoring20_8"#
alg29 <- subset(alg29, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg29$a29score <- round(((alg29$a29score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg30$a30score <- alg30$fixed_score#
alg30$crop <- "OpencvScoring20_9"#
alg30 <- subset(alg30, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg30$a30score <- round(((alg30$a30score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg31$a31score <- alg31$fixed_score#
alg31$crop <- "OpencvScoring20_10"#
alg31 <- subset(alg31, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg31$a31score <- round(((alg31$a31score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg32$a32score <- alg32$fixed_score#
alg32$crop <- "OpencvScoring20_11"#
alg32 <- subset(alg32, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg32$a32score <- round(((alg32$a32score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg33$a33score <- alg33$fixed_score#
alg33$crop <- "OpencvScoring20_12"#
alg33 <- subset(alg33, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg33$a33score <- round(((alg33$a33score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg34$a34score <- alg34$fixed_score#
alg34$crop <- "OpencvScoring20_13"#
alg34 <- subset(alg34, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg34$a34score <- round(((alg34$a34score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg35$a35score <- alg35$fixed_score#
alg35$crop <- "OpencvScoring20_14"#
alg35 <- subset(alg35, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg35$a35score <- round(((alg35$a35score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg36$a36score <- alg36$fixed_score#
alg36$crop <- "OpencvScoring20_15"#
alg36 <- subset(alg36, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg36$a36score <- round(((alg36$a36score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg37$a37score <- alg37$fixed_score#
alg37$crop <- "OpencvScoring20_16"#
alg37 <- subset(alg37, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg37$a37score <- round(((alg37$a37score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg38$a38score <- alg38$fixed_score#
alg38$crop <- "OpencvScoring20_17"#
alg38 <- subset(alg38, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg38$a38score <- round(((alg38$a38score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg39$a39score <- alg39$fixed_score#
alg39$crop <- "OpencvScoring20_18"#
alg39 <- subset(alg39, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg39$a39score <- round(((alg39$a39score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
# compare2 <- merge(opencv, acrop, by=c("scan_id"))#
# compare2$diff <- round((compare2$ocvscore - compare2$acropscore),digits=1)#
# compare2$type <- "all images"#
#
# ggplot(compare2, aes(type, diff)) +#
#    geom_boxplot()#
#
# index2 <- with(compare2, order(abs(diff),decreasing=T))#
# outliers <- compare2[index2, ]   #
#
########################################################################################
#run regular dff to get all scans with data#
            drv <- dbDriver("PostgreSQL")#
            # #connect to local database#
            con <- dbConnect(drv, dbname="musclesound_production")#
#
            select = "select #
                           scans.created_at as cdate, #
                           scans.study_at as date, #
                           scans.sagittal_plane as side,#
                           scans.id as scan_id,#
                           athletes.first_name || ' ' || athletes.last_name as athlete, #
                           athletes.id as id,#
                           athletes.weight as weight, #
                           athletes.height as height,#
                           athletes.gender as gender,#
                           scored_images.fixed_score as score,#
                           muscles.name as muscle,#
                           devices.name as device,#
                           devices.time_zone as tz,#
                           teams.name as team,#
                           sessions.id as session, #
                           sessions.notes as notes, #
                           sessions.start_at as session_date, #
                           sessions.event_timing as timing,#
                           users.first_name || ' ' || users.last_name as trainer#
                      FROM scans#
                           join scored_images on scans.scored_image_id = scored_images.id#
                           join athletes on scans.athlete_id = athletes.id#
                           join muscles on scans.muscle_id = muscles.id#
                           join devices on scans.device_id = devices.id#
                           join teams on scans.team_id = teams.id#
                           join sessions on scans.session_id = sessions.id#
                           join users on sessions.user_id = users.id"#
            rs <- dbSendQuery(con, select)#
            dffa <- fetch(rs,n=-1) #
#
            select2 = "select #
                           athletes.first_name || ' ' || athletes.last_name as athlete,#
                           athletes.id as id,#
                           positions.name as position#
                      FROM athletes#
                           join positions on athletes.position_id = positions.id"#
            ra <- dbSendQuery(con, select2)#
#
            dffb <- fetch(ra,n=-1)#
            dff <- merge(dffa,dffb,by=c("id","athlete"),all=TRUE)#
            #change date#
            dff$date[is.na(dff$date)] <- dff$session_date[is.na(dff$date)]#
#
##################################################################
#then merge compare2 with dff#
colnames(opencv) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(acrop) <- c("crop_y","crop_h", "scan_id", "score", "algorithm")#
#colnames(rmagic) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg22) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg18) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg23) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg24) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg25) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg26) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg27) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg28) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg29) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg30) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg31) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg32) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg33) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg34) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg35) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg36) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg37) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg38) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg39) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
#
compare3 <- rbind(alg22, alg18, alg23)#
# compare3 <- rbind(alg22, alg18, alg23, alg24, alg25, alg26, alg27, alg28, alg29,#
#                   alg30, alg31, alg32, alg33, alg34, alg35, alg36, alg37, alg38, alg39)#
dffscoring <- merge(dff,compare3,by=c("scan_id"),all=TRUE)#
#remove unwanted columes#
dffscoring$date <- as.numeric(dffscoring$date)#
#
#ignore before Rox SpringTraining when settings were inconsistent#
dffscoring <- subset(dffscoring, date > 1361244845)#
#ignore images for PS, they are mostly trash#
dffscoring <- subset(dffscoring, athlete != "Pierre Sarnow")#
#
dffscoring <- subset(dffscoring, session != 178) #
#dffscoring <- subset(dffscoring, team != "Novo Nordisk") #
#
dffscoring <- subset(dffscoring, select= -c(cdate, date, score.x, weight, height, gender, device, tz, notes, session_date, timing, trainer, position))      #
dffscoring <- subset(dffscoring, athlete != "NA")#
# shorten names for graphs#
dffscoring$muscle[dffscoring$muscle=="Gastrocnemius/Soleus"] <- "GS"#
dffscoring$muscle[dffscoring$muscle=="Rectus Femoris"] <- "RF"#
dffscoring$muscle[dffscoring$muscle=="Vastus Lateralis"] <- "VL"#
dffscoring$muscle[dffscoring$muscle=="Vastus Medialis"] <- "VM"#
dffscoring$muscle[dffscoring$muscle=="Forearm Flexors"] <- "FF"#
dffscoring$muscle[dffscoring$muscle=="Hamstring"] <- "H"#
dffscoring$muscle[dffscoring$muscle=="Infraspinatus"] <- "I"#
dffscoring$muscle[dffscoring$muscle=="Latissimus Dorsi"] <- "LD"#
dffscoring$muscle[dffscoring$muscle=="Posterior Hip"] <- "PH"#
#
dffscoring$session_muscle_side <- paste(dffscoring$session, dffscoring$muscle, dffscoring$side)#
#determine accuracy #
stdev <- ddply(dffscoring, .(athlete, session_muscle_side, muscle, algorithm), summarise,#
  std = sd(score.y),#
  cvar = sd(score.y) / mean(score.y))#
stdev <- subset(stdev, std != "NA")#
#
badsessions <- subset(stdev, algorithm == "OpencvScoring20")#
maxcvar <- ddply(badsessions, .(algorithm), summarise,#
  max = max(boxplot.stats(cvar)$stats))#
#
# badsessions <- ddply(stdev, .(algorithm), summarise,#
#   outliers = boxplot.stats(cvar)$out)#
#
#badsessions2 <- subset(stdev, algorithm == "OpencvScoring17" & cvar > maxcvar$max)#
badsessions2 <- subset(stdev, algorithm == "OpencvScoring20" & cvar > 0.1)#
#
stdev2 <- stdev[ ! stdev$session_muscle_side %in% badsessions2$session_muscle_side, ]#
#
# a20 <- subset(stdev2, algorithm == "OpencvScoring20")#
# a17 <- subset(stdev2, algorithm == "OpencvScoring17")#
# ggplot(a17, aes(muscle, cvar)) +#
#    geom_boxplot(aes(fill = muscle), size=1.5)#
#
stdev3 <- ddply(stdev2, .(algorithm), summarise,#
  sdaccuracy = mean(std),#
  cvaccuracy = mean(cvar))#
#get session scores#
x <- ddply(dffscoring, .(session, athlete, muscle, side, algorithm), summarise,#
  score = mean(score.y))#
#
# range based on absolute max and min score#
# range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
#   number = boxplot.stats(score)$n,#
#   difference = max(score) - min(score))#
#
# range based on stats like in our app, ignore outliers#
range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
  number = boxplot.stats(score)$n,#
  difference = max(boxplot.stats(score)$stats) - min(boxplot.stats(score)$stats))#
#
range <- subset(range, difference != "NA")#
#range <- subset(range, difference != 0)#
range <- subset(range, number > 4)#
meanrange <- ddply(range, .(algorithm), summarise,#
  mrange = mean(difference))#
#
effrange <- merge(meanrange,stdev3,by=c("algorithm"))#
effrange <- ddply(effrange, .(algorithm), summarise,#
  effective_range = mrange/sdaccuracy)
effrange
q()
require(ggplot2)#
require(scales)#
require(reshape)#
require(modeest)#
require(plyr)#
require(RPostgreSQL)#
#
drv <- dbDriver("PostgreSQL")#
# #connect to local database#
con <- dbConnect(drv, dbname="musclesound_production")#
select = "select #
    scored_images.fixed_mean,#
    scored_images.fixed_threshold as fixed_threshold,#
    scored_images.auto_mean as auto_mean,#
    scored_images.auto_threshold as auto_threshold,#
    scored_images.processed_in as processed_in,#
    scored_images.created_at as created_at,#
    scored_images.updated_at as updated_at,#
    scored_images.calculated_in as calculated_in,#
    scored_images.crop_x as crop_x,#
    scored_images.crop_y as crop_y,#
    scored_images.crop_w as crop_w,#
    scored_images.crop_h as crop_h,#
    scored_images.scan_id as scan_id,#
    scored_images.fixed_score as fixed_score,#
    scored_images.algorithm as algorithm#
          FROM scored_images#
               "#
rs <- dbSendQuery(con, select)#
dffc <- fetch(rs,n=-1) #
#
dffd <- dffc#
#"OpencvScoring20"  "OpencvScoring17"  "OpencvScoring10"  "OpencvScoring21"  "RmagickScoring10"#
#"OpencvScoring20"   "OpencvScoring20_1" "OpencvScoring17"   "OpencvScoring10"   "RmagickScoring10" #
opencv <- subset(dffd, algorithm == "OpencvScoring10")#
acrop <- subset(dffd, algorithm == "OpencvScoring17")#
#rmagic <- subset(dffd, algorithm == "RmagickScoring10")#
alg22 <- subset(dffd, algorithm == "OpencvScoring20_0")#
alg18 <- subset(dffd, algorithm == "OpencvScoring20_98")#
alg23 <- subset(dffd, algorithm == "OpencvScoring20_79")#
alg24 <- subset(dffd, algorithm == "OpencvScoring20_81")#
alg25 <- subset(dffd, algorithm == "OpencvScoring20_82")#
alg26 <- subset(dffd, algorithm == "OpencvScoring20_83")#
alg27 <- subset(dffd, algorithm == "OpencvScoring20_84")#
alg28 <- subset(dffd, algorithm == "OpencvScoring20_45")#
alg29 <- subset(dffd, algorithm == "OpencvScoring20_46")#
alg30 <- subset(dffd, algorithm == "OpencvScoring20_47")#
alg31 <- subset(dffd, algorithm == "OpencvScoring20_48")#
alg32 <- subset(dffd, algorithm == "OpencvScoring20_49")#
alg33 <- subset(dffd, algorithm == "OpencvScoring20_50")#
alg34 <- subset(dffd, algorithm == "OpencvScoring20_51")#
alg35 <- subset(dffd, algorithm == "OpencvScoring20_52")#
alg36 <- subset(dffd, algorithm == "OpencvScoring20_53")#
alg37 <- subset(dffd, algorithm == "OpencvScoring20_54")#
alg38 <- subset(dffd, algorithm == "OpencvScoring20_55")#
alg39 <- subset(dffd, algorithm == "OpencvScoring20_56")#
opencv$ocvscore <- opencv$fixed_score#
opencv$crop <- "OpencvScoring10"#
opencv <- subset(opencv, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
# rmagic$rmscore <- rmagic$fixed_score#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_y, crop_w, crop_h, processed_in, calculated_in))#
acrop$acropscore <- acrop$fixed_score#
acrop$crop <- "OpencvScoring17"#
acrop <- subset(acrop, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
# rmagic$r10score <- rmagic$fixed_score#
# rmagic$crop <- "RmagickScoring10"#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
alg22$a22score <- alg22$fixed_score#
alg22$crop <- "OpencvScoring20"#
alg22 <- subset(alg22, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 45#
alg22$a22score <- round(((alg22$a22score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg18$a18score <- alg18$fixed_score#
alg18$crop <- "OpencvScoring20_1"#
alg18 <- subset(alg18, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg18$a18score <- round(((alg18$a18score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg23$a23score <- alg23$fixed_score#
alg23$crop <- "OpencvScoring20_2"#
alg23 <- subset(alg23, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg23$a23score <- round(((alg23$a23score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg24$a24score <- alg24$fixed_score#
alg24$crop <- "OpencvScoring20_3"#
alg24 <- subset(alg24, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 67#
alg24$a24score <- round(((alg24$a24score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg25$a25score <- alg25$fixed_score#
alg25$crop <- "OpencvScoring20_4"#
alg25 <- subset(alg25, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 68#
alg25$a25score <- round(((alg25$a25score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg26$a26score <- alg26$fixed_score#
alg26$crop <- "OpencvScoring20_5"#
alg26 <- subset(alg26, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 69#
alg26$a26score <- round(((alg26$a26score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg27$a27score <- alg27$fixed_score#
alg27$crop <- "OpencvScoring20_6"#
alg27 <- subset(alg27, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 70#
alg27$a27score <- round(((alg27$a27score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg28$a28score <- alg28$fixed_score#
alg28$crop <- "OpencvScoring20_7"#
alg28 <- subset(alg28, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg28$a28score <- round(((alg28$a28score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg29$a29score <- alg29$fixed_score#
alg29$crop <- "OpencvScoring20_8"#
alg29 <- subset(alg29, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg29$a29score <- round(((alg29$a29score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg30$a30score <- alg30$fixed_score#
alg30$crop <- "OpencvScoring20_9"#
alg30 <- subset(alg30, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg30$a30score <- round(((alg30$a30score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg31$a31score <- alg31$fixed_score#
alg31$crop <- "OpencvScoring20_10"#
alg31 <- subset(alg31, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg31$a31score <- round(((alg31$a31score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg32$a32score <- alg32$fixed_score#
alg32$crop <- "OpencvScoring20_11"#
alg32 <- subset(alg32, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg32$a32score <- round(((alg32$a32score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg33$a33score <- alg33$fixed_score#
alg33$crop <- "OpencvScoring20_12"#
alg33 <- subset(alg33, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg33$a33score <- round(((alg33$a33score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg34$a34score <- alg34$fixed_score#
alg34$crop <- "OpencvScoring20_13"#
alg34 <- subset(alg34, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg34$a34score <- round(((alg34$a34score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg35$a35score <- alg35$fixed_score#
alg35$crop <- "OpencvScoring20_14"#
alg35 <- subset(alg35, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg35$a35score <- round(((alg35$a35score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg36$a36score <- alg36$fixed_score#
alg36$crop <- "OpencvScoring20_15"#
alg36 <- subset(alg36, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg36$a36score <- round(((alg36$a36score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg37$a37score <- alg37$fixed_score#
alg37$crop <- "OpencvScoring20_16"#
alg37 <- subset(alg37, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg37$a37score <- round(((alg37$a37score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg38$a38score <- alg38$fixed_score#
alg38$crop <- "OpencvScoring20_17"#
alg38 <- subset(alg38, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg38$a38score <- round(((alg38$a38score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg39$a39score <- alg39$fixed_score#
alg39$crop <- "OpencvScoring20_18"#
alg39 <- subset(alg39, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg39$a39score <- round(((alg39$a39score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
# compare2 <- merge(opencv, acrop, by=c("scan_id"))#
# compare2$diff <- round((compare2$ocvscore - compare2$acropscore),digits=1)#
# compare2$type <- "all images"#
#
# ggplot(compare2, aes(type, diff)) +#
#    geom_boxplot()#
#
# index2 <- with(compare2, order(abs(diff),decreasing=T))#
# outliers <- compare2[index2, ]   #
#
########################################################################################
#run regular dff to get all scans with data#
            drv <- dbDriver("PostgreSQL")#
            # #connect to local database#
            con <- dbConnect(drv, dbname="musclesound_production")#
#
            select = "select #
                           scans.created_at as cdate, #
                           scans.study_at as date, #
                           scans.sagittal_plane as side,#
                           scans.id as scan_id,#
                           athletes.first_name || ' ' || athletes.last_name as athlete, #
                           athletes.id as id,#
                           athletes.weight as weight, #
                           athletes.height as height,#
                           athletes.gender as gender,#
                           scored_images.fixed_score as score,#
                           muscles.name as muscle,#
                           devices.name as device,#
                           devices.time_zone as tz,#
                           teams.name as team,#
                           sessions.id as session, #
                           sessions.notes as notes, #
                           sessions.start_at as session_date, #
                           sessions.event_timing as timing,#
                           users.first_name || ' ' || users.last_name as trainer#
                      FROM scans#
                           join scored_images on scans.scored_image_id = scored_images.id#
                           join athletes on scans.athlete_id = athletes.id#
                           join muscles on scans.muscle_id = muscles.id#
                           join devices on scans.device_id = devices.id#
                           join teams on scans.team_id = teams.id#
                           join sessions on scans.session_id = sessions.id#
                           join users on sessions.user_id = users.id"#
            rs <- dbSendQuery(con, select)#
            dffa <- fetch(rs,n=-1) #
#
            select2 = "select #
                           athletes.first_name || ' ' || athletes.last_name as athlete,#
                           athletes.id as id,#
                           positions.name as position#
                      FROM athletes#
                           join positions on athletes.position_id = positions.id"#
            ra <- dbSendQuery(con, select2)#
#
            dffb <- fetch(ra,n=-1)#
            dff <- merge(dffa,dffb,by=c("id","athlete"),all=TRUE)#
            #change date#
            dff$date[is.na(dff$date)] <- dff$session_date[is.na(dff$date)]#
#
##################################################################
#then merge compare2 with dff#
colnames(opencv) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(acrop) <- c("crop_y","crop_h", "scan_id", "score", "algorithm")#
#colnames(rmagic) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg22) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg18) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg23) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg24) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg25) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg26) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg27) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg28) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg29) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg30) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg31) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg32) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg33) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg34) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg35) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg36) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg37) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg38) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg39) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
#
compare3 <- rbind(alg22, alg18, alg23)#
# compare3 <- rbind(alg22, alg18, alg23, alg24, alg25, alg26, alg27, alg28, alg29,#
#                   alg30, alg31, alg32, alg33, alg34, alg35, alg36, alg37, alg38, alg39)#
dffscoring <- merge(dff,compare3,by=c("scan_id"),all=TRUE)#
#remove unwanted columes#
dffscoring$date <- as.numeric(dffscoring$date)#
#
#ignore before Rox SpringTraining when settings were inconsistent#
dffscoring <- subset(dffscoring, date > 1361244845)#
#ignore images for PS, they are mostly trash#
dffscoring <- subset(dffscoring, athlete != "Pierre Sarnow")#
#
dffscoring <- subset(dffscoring, session != 178) #
#dffscoring <- subset(dffscoring, team != "Novo Nordisk") #
#
dffscoring <- subset(dffscoring, select= -c(cdate, date, score.x, weight, height, gender, device, tz, notes, session_date, timing, trainer, position))      #
dffscoring <- subset(dffscoring, athlete != "NA")#
# shorten names for graphs#
dffscoring$muscle[dffscoring$muscle=="Gastrocnemius/Soleus"] <- "GS"#
dffscoring$muscle[dffscoring$muscle=="Rectus Femoris"] <- "RF"#
dffscoring$muscle[dffscoring$muscle=="Vastus Lateralis"] <- "VL"#
dffscoring$muscle[dffscoring$muscle=="Vastus Medialis"] <- "VM"#
dffscoring$muscle[dffscoring$muscle=="Forearm Flexors"] <- "FF"#
dffscoring$muscle[dffscoring$muscle=="Hamstring"] <- "H"#
dffscoring$muscle[dffscoring$muscle=="Infraspinatus"] <- "I"#
dffscoring$muscle[dffscoring$muscle=="Latissimus Dorsi"] <- "LD"#
dffscoring$muscle[dffscoring$muscle=="Posterior Hip"] <- "PH"#
#
dffscoring$session_muscle_side <- paste(dffscoring$session, dffscoring$muscle, dffscoring$side)#
#determine accuracy #
stdev <- ddply(dffscoring, .(athlete, session_muscle_side, muscle, algorithm), summarise,#
  std = sd(score.y),#
  cvar = sd(score.y) / mean(score.y))#
stdev <- subset(stdev, std != "NA")#
#
badsessions <- subset(stdev, algorithm == "OpencvScoring20")#
maxcvar <- ddply(badsessions, .(algorithm), summarise,#
  max = max(boxplot.stats(cvar)$stats))#
#
# badsessions <- ddply(stdev, .(algorithm), summarise,#
#   outliers = boxplot.stats(cvar)$out)#
#
#badsessions2 <- subset(stdev, algorithm == "OpencvScoring17" & cvar > maxcvar$max)#
badsessions2 <- subset(stdev, algorithm == "OpencvScoring20" & cvar > 0.1)#
#
stdev2 <- stdev[ ! stdev$session_muscle_side %in% badsessions2$session_muscle_side, ]#
#
# a20 <- subset(stdev2, algorithm == "OpencvScoring20")#
# a17 <- subset(stdev2, algorithm == "OpencvScoring17")#
# ggplot(a17, aes(muscle, cvar)) +#
#    geom_boxplot(aes(fill = muscle), size=1.5)#
#
stdev3 <- ddply(stdev2, .(algorithm), summarise,#
  sdaccuracy = mean(std),#
  cvaccuracy = mean(cvar))#
#get session scores#
x <- ddply(dffscoring, .(session, athlete, muscle, side, algorithm), summarise,#
  score = mean(score.y))#
#
# range based on absolute max and min score#
# range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
#   number = boxplot.stats(score)$n,#
#   difference = max(score) - min(score))#
#
# range based on stats like in our app, ignore outliers#
range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
  number = boxplot.stats(score)$n,#
  difference = max(boxplot.stats(score)$stats) - min(boxplot.stats(score)$stats))#
#
range <- subset(range, difference != "NA")#
#range <- subset(range, difference != 0)#
range <- subset(range, number > 4)#
meanrange <- ddply(range, .(algorithm), summarise,#
  mrange = mean(difference))#
#
effrange <- merge(meanrange,stdev3,by=c("algorithm"))#
effrange <- ddply(effrange, .(algorithm), summarise,#
  effective_range = mrange/sdaccuracy)
effrange
q()
require(ggplot2)#
require(scales)#
require(reshape)#
require(modeest)#
require(plyr)#
require(RPostgreSQL)#
#
drv <- dbDriver("PostgreSQL")#
# #connect to local database#
con <- dbConnect(drv, dbname="musclesound_production")#
select = "select #
    scored_images.fixed_mean,#
    scored_images.fixed_threshold as fixed_threshold,#
    scored_images.auto_mean as auto_mean,#
    scored_images.auto_threshold as auto_threshold,#
    scored_images.processed_in as processed_in,#
    scored_images.created_at as created_at,#
    scored_images.updated_at as updated_at,#
    scored_images.calculated_in as calculated_in,#
    scored_images.crop_x as crop_x,#
    scored_images.crop_y as crop_y,#
    scored_images.crop_w as crop_w,#
    scored_images.crop_h as crop_h,#
    scored_images.scan_id as scan_id,#
    scored_images.fixed_score as fixed_score,#
    scored_images.algorithm as algorithm#
          FROM scored_images#
               "#
rs <- dbSendQuery(con, select)#
dffc <- fetch(rs,n=-1) #
#
dffd <- dffc#
#"OpencvScoring20"  "OpencvScoring17"  "OpencvScoring10"  "OpencvScoring21"  "RmagickScoring10"#
#"OpencvScoring20"   "OpencvScoring20_1" "OpencvScoring17"   "OpencvScoring10"   "RmagickScoring10" #
opencv <- subset(dffd, algorithm == "OpencvScoring10")#
acrop <- subset(dffd, algorithm == "OpencvScoring17")#
#rmagic <- subset(dffd, algorithm == "RmagickScoring10")#
alg22 <- subset(dffd, algorithm == "OpencvScoring20_0")#
alg18 <- subset(dffd, algorithm == "OpencvScoring20_99")#
alg23 <- subset(dffd, algorithm == "OpencvScoring20_79")#
alg24 <- subset(dffd, algorithm == "OpencvScoring20_81")#
alg25 <- subset(dffd, algorithm == "OpencvScoring20_82")#
alg26 <- subset(dffd, algorithm == "OpencvScoring20_83")#
alg27 <- subset(dffd, algorithm == "OpencvScoring20_84")#
alg28 <- subset(dffd, algorithm == "OpencvScoring20_45")#
alg29 <- subset(dffd, algorithm == "OpencvScoring20_46")#
alg30 <- subset(dffd, algorithm == "OpencvScoring20_47")#
alg31 <- subset(dffd, algorithm == "OpencvScoring20_48")#
alg32 <- subset(dffd, algorithm == "OpencvScoring20_49")#
alg33 <- subset(dffd, algorithm == "OpencvScoring20_50")#
alg34 <- subset(dffd, algorithm == "OpencvScoring20_51")#
alg35 <- subset(dffd, algorithm == "OpencvScoring20_52")#
alg36 <- subset(dffd, algorithm == "OpencvScoring20_53")#
alg37 <- subset(dffd, algorithm == "OpencvScoring20_54")#
alg38 <- subset(dffd, algorithm == "OpencvScoring20_55")#
alg39 <- subset(dffd, algorithm == "OpencvScoring20_56")#
opencv$ocvscore <- opencv$fixed_score#
opencv$crop <- "OpencvScoring10"#
opencv <- subset(opencv, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
# rmagic$rmscore <- rmagic$fixed_score#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_y, crop_w, crop_h, processed_in, calculated_in))#
acrop$acropscore <- acrop$fixed_score#
acrop$crop <- "OpencvScoring17"#
acrop <- subset(acrop, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
# rmagic$r10score <- rmagic$fixed_score#
# rmagic$crop <- "RmagickScoring10"#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
alg22$a22score <- alg22$fixed_score#
alg22$crop <- "OpencvScoring20"#
alg22 <- subset(alg22, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 45#
alg22$a22score <- round(((alg22$a22score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg18$a18score <- alg18$fixed_score#
alg18$crop <- "OpencvScoring20_1"#
alg18 <- subset(alg18, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg18$a18score <- round(((alg18$a18score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg23$a23score <- alg23$fixed_score#
alg23$crop <- "OpencvScoring20_2"#
alg23 <- subset(alg23, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg23$a23score <- round(((alg23$a23score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg24$a24score <- alg24$fixed_score#
alg24$crop <- "OpencvScoring20_3"#
alg24 <- subset(alg24, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 67#
alg24$a24score <- round(((alg24$a24score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg25$a25score <- alg25$fixed_score#
alg25$crop <- "OpencvScoring20_4"#
alg25 <- subset(alg25, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 68#
alg25$a25score <- round(((alg25$a25score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg26$a26score <- alg26$fixed_score#
alg26$crop <- "OpencvScoring20_5"#
alg26 <- subset(alg26, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 69#
alg26$a26score <- round(((alg26$a26score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg27$a27score <- alg27$fixed_score#
alg27$crop <- "OpencvScoring20_6"#
alg27 <- subset(alg27, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 70#
alg27$a27score <- round(((alg27$a27score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg28$a28score <- alg28$fixed_score#
alg28$crop <- "OpencvScoring20_7"#
alg28 <- subset(alg28, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg28$a28score <- round(((alg28$a28score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg29$a29score <- alg29$fixed_score#
alg29$crop <- "OpencvScoring20_8"#
alg29 <- subset(alg29, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg29$a29score <- round(((alg29$a29score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg30$a30score <- alg30$fixed_score#
alg30$crop <- "OpencvScoring20_9"#
alg30 <- subset(alg30, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg30$a30score <- round(((alg30$a30score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg31$a31score <- alg31$fixed_score#
alg31$crop <- "OpencvScoring20_10"#
alg31 <- subset(alg31, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg31$a31score <- round(((alg31$a31score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg32$a32score <- alg32$fixed_score#
alg32$crop <- "OpencvScoring20_11"#
alg32 <- subset(alg32, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg32$a32score <- round(((alg32$a32score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg33$a33score <- alg33$fixed_score#
alg33$crop <- "OpencvScoring20_12"#
alg33 <- subset(alg33, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg33$a33score <- round(((alg33$a33score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg34$a34score <- alg34$fixed_score#
alg34$crop <- "OpencvScoring20_13"#
alg34 <- subset(alg34, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg34$a34score <- round(((alg34$a34score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg35$a35score <- alg35$fixed_score#
alg35$crop <- "OpencvScoring20_14"#
alg35 <- subset(alg35, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg35$a35score <- round(((alg35$a35score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg36$a36score <- alg36$fixed_score#
alg36$crop <- "OpencvScoring20_15"#
alg36 <- subset(alg36, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg36$a36score <- round(((alg36$a36score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg37$a37score <- alg37$fixed_score#
alg37$crop <- "OpencvScoring20_16"#
alg37 <- subset(alg37, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg37$a37score <- round(((alg37$a37score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg38$a38score <- alg38$fixed_score#
alg38$crop <- "OpencvScoring20_17"#
alg38 <- subset(alg38, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg38$a38score <- round(((alg38$a38score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg39$a39score <- alg39$fixed_score#
alg39$crop <- "OpencvScoring20_18"#
alg39 <- subset(alg39, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg39$a39score <- round(((alg39$a39score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
# compare2 <- merge(opencv, acrop, by=c("scan_id"))#
# compare2$diff <- round((compare2$ocvscore - compare2$acropscore),digits=1)#
# compare2$type <- "all images"#
#
# ggplot(compare2, aes(type, diff)) +#
#    geom_boxplot()#
#
# index2 <- with(compare2, order(abs(diff),decreasing=T))#
# outliers <- compare2[index2, ]   #
#
########################################################################################
#run regular dff to get all scans with data#
            drv <- dbDriver("PostgreSQL")#
            # #connect to local database#
            con <- dbConnect(drv, dbname="musclesound_production")#
#
            select = "select #
                           scans.created_at as cdate, #
                           scans.study_at as date, #
                           scans.sagittal_plane as side,#
                           scans.id as scan_id,#
                           athletes.first_name || ' ' || athletes.last_name as athlete, #
                           athletes.id as id,#
                           athletes.weight as weight, #
                           athletes.height as height,#
                           athletes.gender as gender,#
                           scored_images.fixed_score as score,#
                           muscles.name as muscle,#
                           devices.name as device,#
                           devices.time_zone as tz,#
                           teams.name as team,#
                           sessions.id as session, #
                           sessions.notes as notes, #
                           sessions.start_at as session_date, #
                           sessions.event_timing as timing,#
                           users.first_name || ' ' || users.last_name as trainer#
                      FROM scans#
                           join scored_images on scans.scored_image_id = scored_images.id#
                           join athletes on scans.athlete_id = athletes.id#
                           join muscles on scans.muscle_id = muscles.id#
                           join devices on scans.device_id = devices.id#
                           join teams on scans.team_id = teams.id#
                           join sessions on scans.session_id = sessions.id#
                           join users on sessions.user_id = users.id"#
            rs <- dbSendQuery(con, select)#
            dffa <- fetch(rs,n=-1) #
#
            select2 = "select #
                           athletes.first_name || ' ' || athletes.last_name as athlete,#
                           athletes.id as id,#
                           positions.name as position#
                      FROM athletes#
                           join positions on athletes.position_id = positions.id"#
            ra <- dbSendQuery(con, select2)#
#
            dffb <- fetch(ra,n=-1)#
            dff <- merge(dffa,dffb,by=c("id","athlete"),all=TRUE)#
            #change date#
            dff$date[is.na(dff$date)] <- dff$session_date[is.na(dff$date)]#
#
##################################################################
#then merge compare2 with dff#
colnames(opencv) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(acrop) <- c("crop_y","crop_h", "scan_id", "score", "algorithm")#
#colnames(rmagic) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg22) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg18) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg23) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg24) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg25) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg26) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg27) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg28) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg29) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg30) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg31) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg32) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg33) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg34) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg35) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg36) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg37) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg38) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg39) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
#
compare3 <- rbind(alg22, alg18, alg23)#
# compare3 <- rbind(alg22, alg18, alg23, alg24, alg25, alg26, alg27, alg28, alg29,#
#                   alg30, alg31, alg32, alg33, alg34, alg35, alg36, alg37, alg38, alg39)#
dffscoring <- merge(dff,compare3,by=c("scan_id"),all=TRUE)#
#remove unwanted columes#
dffscoring$date <- as.numeric(dffscoring$date)#
#
#ignore before Rox SpringTraining when settings were inconsistent#
dffscoring <- subset(dffscoring, date > 1361244845)#
#ignore images for PS, they are mostly trash#
dffscoring <- subset(dffscoring, athlete != "Pierre Sarnow")#
#
dffscoring <- subset(dffscoring, session != 178) #
#dffscoring <- subset(dffscoring, team != "Novo Nordisk") #
#
dffscoring <- subset(dffscoring, select= -c(cdate, date, score.x, weight, height, gender, device, tz, notes, session_date, timing, trainer, position))      #
dffscoring <- subset(dffscoring, athlete != "NA")#
# shorten names for graphs#
dffscoring$muscle[dffscoring$muscle=="Gastrocnemius/Soleus"] <- "GS"#
dffscoring$muscle[dffscoring$muscle=="Rectus Femoris"] <- "RF"#
dffscoring$muscle[dffscoring$muscle=="Vastus Lateralis"] <- "VL"#
dffscoring$muscle[dffscoring$muscle=="Vastus Medialis"] <- "VM"#
dffscoring$muscle[dffscoring$muscle=="Forearm Flexors"] <- "FF"#
dffscoring$muscle[dffscoring$muscle=="Hamstring"] <- "H"#
dffscoring$muscle[dffscoring$muscle=="Infraspinatus"] <- "I"#
dffscoring$muscle[dffscoring$muscle=="Latissimus Dorsi"] <- "LD"#
dffscoring$muscle[dffscoring$muscle=="Posterior Hip"] <- "PH"#
#
dffscoring$session_muscle_side <- paste(dffscoring$session, dffscoring$muscle, dffscoring$side)#
#determine accuracy #
stdev <- ddply(dffscoring, .(athlete, session_muscle_side, muscle, algorithm), summarise,#
  std = sd(score.y),#
  cvar = sd(score.y) / mean(score.y))#
stdev <- subset(stdev, std != "NA")#
#
badsessions <- subset(stdev, algorithm == "OpencvScoring20")#
maxcvar <- ddply(badsessions, .(algorithm), summarise,#
  max = max(boxplot.stats(cvar)$stats))#
#
# badsessions <- ddply(stdev, .(algorithm), summarise,#
#   outliers = boxplot.stats(cvar)$out)#
#
#badsessions2 <- subset(stdev, algorithm == "OpencvScoring17" & cvar > maxcvar$max)#
badsessions2 <- subset(stdev, algorithm == "OpencvScoring20" & cvar > 0.1)#
#
stdev2 <- stdev[ ! stdev$session_muscle_side %in% badsessions2$session_muscle_side, ]#
#
# a20 <- subset(stdev2, algorithm == "OpencvScoring20")#
# a17 <- subset(stdev2, algorithm == "OpencvScoring17")#
# ggplot(a17, aes(muscle, cvar)) +#
#    geom_boxplot(aes(fill = muscle), size=1.5)#
#
stdev3 <- ddply(stdev2, .(algorithm), summarise,#
  sdaccuracy = mean(std),#
  cvaccuracy = mean(cvar))#
#get session scores#
x <- ddply(dffscoring, .(session, athlete, muscle, side, algorithm), summarise,#
  score = mean(score.y))#
#
# range based on absolute max and min score#
# range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
#   number = boxplot.stats(score)$n,#
#   difference = max(score) - min(score))#
#
# range based on stats like in our app, ignore outliers#
range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
  number = boxplot.stats(score)$n,#
  difference = max(boxplot.stats(score)$stats) - min(boxplot.stats(score)$stats))#
#
range <- subset(range, difference != "NA")#
#range <- subset(range, difference != 0)#
range <- subset(range, number > 4)#
meanrange <- ddply(range, .(algorithm), summarise,#
  mrange = mean(difference))#
#
effrange <- merge(meanrange,stdev3,by=c("algorithm"))#
effrange <- ddply(effrange, .(algorithm), summarise,#
  effective_range = mrange/sdaccuracy)
effrange
q()
require(ggplot2)#
require(scales)#
require(reshape)#
require(modeest)#
require(plyr)#
require(RPostgreSQL)#
#
drv <- dbDriver("PostgreSQL")#
# #connect to local database#
con <- dbConnect(drv, dbname="musclesound_production")#
select = "select #
    scored_images.fixed_mean,#
    scored_images.fixed_threshold as fixed_threshold,#
    scored_images.auto_mean as auto_mean,#
    scored_images.auto_threshold as auto_threshold,#
    scored_images.processed_in as processed_in,#
    scored_images.created_at as created_at,#
    scored_images.updated_at as updated_at,#
    scored_images.calculated_in as calculated_in,#
    scored_images.crop_x as crop_x,#
    scored_images.crop_y as crop_y,#
    scored_images.crop_w as crop_w,#
    scored_images.crop_h as crop_h,#
    scored_images.scan_id as scan_id,#
    scored_images.fixed_score as fixed_score,#
    scored_images.algorithm as algorithm#
          FROM scored_images#
               "#
rs <- dbSendQuery(con, select)#
dffc <- fetch(rs,n=-1) #
#
dffd <- dffc#
#"OpencvScoring20"  "OpencvScoring17"  "OpencvScoring10"  "OpencvScoring21"  "RmagickScoring10"#
#"OpencvScoring20"   "OpencvScoring20_1" "OpencvScoring17"   "OpencvScoring10"   "RmagickScoring10" #
opencv <- subset(dffd, algorithm == "OpencvScoring10")#
acrop <- subset(dffd, algorithm == "OpencvScoring17")#
#rmagic <- subset(dffd, algorithm == "RmagickScoring10")#
alg22 <- subset(dffd, algorithm == "OpencvScoring20_0")#
alg18 <- subset(dffd, algorithm == "OpencvScoring20_100")#
alg23 <- subset(dffd, algorithm == "OpencvScoring20_79")#
alg24 <- subset(dffd, algorithm == "OpencvScoring20_81")#
alg25 <- subset(dffd, algorithm == "OpencvScoring20_82")#
alg26 <- subset(dffd, algorithm == "OpencvScoring20_83")#
alg27 <- subset(dffd, algorithm == "OpencvScoring20_84")#
alg28 <- subset(dffd, algorithm == "OpencvScoring20_45")#
alg29 <- subset(dffd, algorithm == "OpencvScoring20_46")#
alg30 <- subset(dffd, algorithm == "OpencvScoring20_47")#
alg31 <- subset(dffd, algorithm == "OpencvScoring20_48")#
alg32 <- subset(dffd, algorithm == "OpencvScoring20_49")#
alg33 <- subset(dffd, algorithm == "OpencvScoring20_50")#
alg34 <- subset(dffd, algorithm == "OpencvScoring20_51")#
alg35 <- subset(dffd, algorithm == "OpencvScoring20_52")#
alg36 <- subset(dffd, algorithm == "OpencvScoring20_53")#
alg37 <- subset(dffd, algorithm == "OpencvScoring20_54")#
alg38 <- subset(dffd, algorithm == "OpencvScoring20_55")#
alg39 <- subset(dffd, algorithm == "OpencvScoring20_56")#
opencv$ocvscore <- opencv$fixed_score#
opencv$crop <- "OpencvScoring10"#
opencv <- subset(opencv, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
# rmagic$rmscore <- rmagic$fixed_score#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_y, crop_w, crop_h, processed_in, calculated_in))#
acrop$acropscore <- acrop$fixed_score#
acrop$crop <- "OpencvScoring17"#
acrop <- subset(acrop, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
# rmagic$r10score <- rmagic$fixed_score#
# rmagic$crop <- "RmagickScoring10"#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
alg22$a22score <- alg22$fixed_score#
alg22$crop <- "OpencvScoring20"#
alg22 <- subset(alg22, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 45#
alg22$a22score <- round(((alg22$a22score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg18$a18score <- alg18$fixed_score#
alg18$crop <- "OpencvScoring20_1"#
alg18 <- subset(alg18, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg18$a18score <- round(((alg18$a18score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg23$a23score <- alg23$fixed_score#
alg23$crop <- "OpencvScoring20_2"#
alg23 <- subset(alg23, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg23$a23score <- round(((alg23$a23score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg24$a24score <- alg24$fixed_score#
alg24$crop <- "OpencvScoring20_3"#
alg24 <- subset(alg24, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 67#
alg24$a24score <- round(((alg24$a24score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg25$a25score <- alg25$fixed_score#
alg25$crop <- "OpencvScoring20_4"#
alg25 <- subset(alg25, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 68#
alg25$a25score <- round(((alg25$a25score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg26$a26score <- alg26$fixed_score#
alg26$crop <- "OpencvScoring20_5"#
alg26 <- subset(alg26, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 69#
alg26$a26score <- round(((alg26$a26score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg27$a27score <- alg27$fixed_score#
alg27$crop <- "OpencvScoring20_6"#
alg27 <- subset(alg27, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 70#
alg27$a27score <- round(((alg27$a27score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg28$a28score <- alg28$fixed_score#
alg28$crop <- "OpencvScoring20_7"#
alg28 <- subset(alg28, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg28$a28score <- round(((alg28$a28score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg29$a29score <- alg29$fixed_score#
alg29$crop <- "OpencvScoring20_8"#
alg29 <- subset(alg29, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg29$a29score <- round(((alg29$a29score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg30$a30score <- alg30$fixed_score#
alg30$crop <- "OpencvScoring20_9"#
alg30 <- subset(alg30, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg30$a30score <- round(((alg30$a30score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg31$a31score <- alg31$fixed_score#
alg31$crop <- "OpencvScoring20_10"#
alg31 <- subset(alg31, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg31$a31score <- round(((alg31$a31score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg32$a32score <- alg32$fixed_score#
alg32$crop <- "OpencvScoring20_11"#
alg32 <- subset(alg32, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg32$a32score <- round(((alg32$a32score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg33$a33score <- alg33$fixed_score#
alg33$crop <- "OpencvScoring20_12"#
alg33 <- subset(alg33, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg33$a33score <- round(((alg33$a33score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg34$a34score <- alg34$fixed_score#
alg34$crop <- "OpencvScoring20_13"#
alg34 <- subset(alg34, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg34$a34score <- round(((alg34$a34score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg35$a35score <- alg35$fixed_score#
alg35$crop <- "OpencvScoring20_14"#
alg35 <- subset(alg35, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg35$a35score <- round(((alg35$a35score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg36$a36score <- alg36$fixed_score#
alg36$crop <- "OpencvScoring20_15"#
alg36 <- subset(alg36, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg36$a36score <- round(((alg36$a36score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg37$a37score <- alg37$fixed_score#
alg37$crop <- "OpencvScoring20_16"#
alg37 <- subset(alg37, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg37$a37score <- round(((alg37$a37score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg38$a38score <- alg38$fixed_score#
alg38$crop <- "OpencvScoring20_17"#
alg38 <- subset(alg38, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg38$a38score <- round(((alg38$a38score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg39$a39score <- alg39$fixed_score#
alg39$crop <- "OpencvScoring20_18"#
alg39 <- subset(alg39, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg39$a39score <- round(((alg39$a39score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
# compare2 <- merge(opencv, acrop, by=c("scan_id"))#
# compare2$diff <- round((compare2$ocvscore - compare2$acropscore),digits=1)#
# compare2$type <- "all images"#
#
# ggplot(compare2, aes(type, diff)) +#
#    geom_boxplot()#
#
# index2 <- with(compare2, order(abs(diff),decreasing=T))#
# outliers <- compare2[index2, ]   #
#
########################################################################################
#run regular dff to get all scans with data#
            drv <- dbDriver("PostgreSQL")#
            # #connect to local database#
            con <- dbConnect(drv, dbname="musclesound_production")#
#
            select = "select #
                           scans.created_at as cdate, #
                           scans.study_at as date, #
                           scans.sagittal_plane as side,#
                           scans.id as scan_id,#
                           athletes.first_name || ' ' || athletes.last_name as athlete, #
                           athletes.id as id,#
                           athletes.weight as weight, #
                           athletes.height as height,#
                           athletes.gender as gender,#
                           scored_images.fixed_score as score,#
                           muscles.name as muscle,#
                           devices.name as device,#
                           devices.time_zone as tz,#
                           teams.name as team,#
                           sessions.id as session, #
                           sessions.notes as notes, #
                           sessions.start_at as session_date, #
                           sessions.event_timing as timing,#
                           users.first_name || ' ' || users.last_name as trainer#
                      FROM scans#
                           join scored_images on scans.scored_image_id = scored_images.id#
                           join athletes on scans.athlete_id = athletes.id#
                           join muscles on scans.muscle_id = muscles.id#
                           join devices on scans.device_id = devices.id#
                           join teams on scans.team_id = teams.id#
                           join sessions on scans.session_id = sessions.id#
                           join users on sessions.user_id = users.id"#
            rs <- dbSendQuery(con, select)#
            dffa <- fetch(rs,n=-1) #
#
            select2 = "select #
                           athletes.first_name || ' ' || athletes.last_name as athlete,#
                           athletes.id as id,#
                           positions.name as position#
                      FROM athletes#
                           join positions on athletes.position_id = positions.id"#
            ra <- dbSendQuery(con, select2)#
#
            dffb <- fetch(ra,n=-1)#
            dff <- merge(dffa,dffb,by=c("id","athlete"),all=TRUE)#
            #change date#
            dff$date[is.na(dff$date)] <- dff$session_date[is.na(dff$date)]#
#
##################################################################
#then merge compare2 with dff#
colnames(opencv) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(acrop) <- c("crop_y","crop_h", "scan_id", "score", "algorithm")#
#colnames(rmagic) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg22) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg18) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg23) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg24) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg25) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg26) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg27) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg28) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg29) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg30) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg31) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg32) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg33) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg34) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg35) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg36) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg37) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg38) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg39) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
#
compare3 <- rbind(alg22, alg18, alg23)#
# compare3 <- rbind(alg22, alg18, alg23, alg24, alg25, alg26, alg27, alg28, alg29,#
#                   alg30, alg31, alg32, alg33, alg34, alg35, alg36, alg37, alg38, alg39)#
dffscoring <- merge(dff,compare3,by=c("scan_id"),all=TRUE)#
#remove unwanted columes#
dffscoring$date <- as.numeric(dffscoring$date)#
#
#ignore before Rox SpringTraining when settings were inconsistent#
dffscoring <- subset(dffscoring, date > 1361244845)#
#ignore images for PS, they are mostly trash#
dffscoring <- subset(dffscoring, athlete != "Pierre Sarnow")#
#
dffscoring <- subset(dffscoring, session != 178) #
#dffscoring <- subset(dffscoring, team != "Novo Nordisk") #
#
dffscoring <- subset(dffscoring, select= -c(cdate, date, score.x, weight, height, gender, device, tz, notes, session_date, timing, trainer, position))      #
dffscoring <- subset(dffscoring, athlete != "NA")#
# shorten names for graphs#
dffscoring$muscle[dffscoring$muscle=="Gastrocnemius/Soleus"] <- "GS"#
dffscoring$muscle[dffscoring$muscle=="Rectus Femoris"] <- "RF"#
dffscoring$muscle[dffscoring$muscle=="Vastus Lateralis"] <- "VL"#
dffscoring$muscle[dffscoring$muscle=="Vastus Medialis"] <- "VM"#
dffscoring$muscle[dffscoring$muscle=="Forearm Flexors"] <- "FF"#
dffscoring$muscle[dffscoring$muscle=="Hamstring"] <- "H"#
dffscoring$muscle[dffscoring$muscle=="Infraspinatus"] <- "I"#
dffscoring$muscle[dffscoring$muscle=="Latissimus Dorsi"] <- "LD"#
dffscoring$muscle[dffscoring$muscle=="Posterior Hip"] <- "PH"#
#
dffscoring$session_muscle_side <- paste(dffscoring$session, dffscoring$muscle, dffscoring$side)#
#determine accuracy #
stdev <- ddply(dffscoring, .(athlete, session_muscle_side, muscle, algorithm), summarise,#
  std = sd(score.y),#
  cvar = sd(score.y) / mean(score.y))#
stdev <- subset(stdev, std != "NA")#
#
badsessions <- subset(stdev, algorithm == "OpencvScoring20")#
maxcvar <- ddply(badsessions, .(algorithm), summarise,#
  max = max(boxplot.stats(cvar)$stats))#
#
# badsessions <- ddply(stdev, .(algorithm), summarise,#
#   outliers = boxplot.stats(cvar)$out)#
#
#badsessions2 <- subset(stdev, algorithm == "OpencvScoring17" & cvar > maxcvar$max)#
badsessions2 <- subset(stdev, algorithm == "OpencvScoring20" & cvar > 0.1)#
#
stdev2 <- stdev[ ! stdev$session_muscle_side %in% badsessions2$session_muscle_side, ]#
#
# a20 <- subset(stdev2, algorithm == "OpencvScoring20")#
# a17 <- subset(stdev2, algorithm == "OpencvScoring17")#
# ggplot(a17, aes(muscle, cvar)) +#
#    geom_boxplot(aes(fill = muscle), size=1.5)#
#
stdev3 <- ddply(stdev2, .(algorithm), summarise,#
  sdaccuracy = mean(std),#
  cvaccuracy = mean(cvar))#
#get session scores#
x <- ddply(dffscoring, .(session, athlete, muscle, side, algorithm), summarise,#
  score = mean(score.y))#
#
# range based on absolute max and min score#
# range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
#   number = boxplot.stats(score)$n,#
#   difference = max(score) - min(score))#
#
# range based on stats like in our app, ignore outliers#
range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
  number = boxplot.stats(score)$n,#
  difference = max(boxplot.stats(score)$stats) - min(boxplot.stats(score)$stats))#
#
range <- subset(range, difference != "NA")#
#range <- subset(range, difference != 0)#
range <- subset(range, number > 4)#
meanrange <- ddply(range, .(algorithm), summarise,#
  mrange = mean(difference))#
#
effrange <- merge(meanrange,stdev3,by=c("algorithm"))#
effrange <- ddply(effrange, .(algorithm), summarise,#
  effective_range = mrange/sdaccuracy)
q()
require(ggplot2)#
require(scales)#
require(reshape)#
require(modeest)#
require(plyr)#
require(RPostgreSQL)#
#
drv <- dbDriver("PostgreSQL")#
# #connect to local database#
con <- dbConnect(drv, dbname="musclesound_production")#
select = "select #
    scored_images.fixed_mean,#
    scored_images.fixed_threshold as fixed_threshold,#
    scored_images.auto_mean as auto_mean,#
    scored_images.auto_threshold as auto_threshold,#
    scored_images.processed_in as processed_in,#
    scored_images.created_at as created_at,#
    scored_images.updated_at as updated_at,#
    scored_images.calculated_in as calculated_in,#
    scored_images.crop_x as crop_x,#
    scored_images.crop_y as crop_y,#
    scored_images.crop_w as crop_w,#
    scored_images.crop_h as crop_h,#
    scored_images.scan_id as scan_id,#
    scored_images.fixed_score as fixed_score,#
    scored_images.algorithm as algorithm#
          FROM scored_images#
               "#
rs <- dbSendQuery(con, select)#
dffc <- fetch(rs,n=-1) #
#
dffd <- dffc#
#"OpencvScoring20"  "OpencvScoring17"  "OpencvScoring10"  "OpencvScoring21"  "RmagickScoring10"#
#"OpencvScoring20"   "OpencvScoring20_1" "OpencvScoring17"   "OpencvScoring10"   "RmagickScoring10" #
opencv <- subset(dffd, algorithm == "OpencvScoring10")#
acrop <- subset(dffd, algorithm == "OpencvScoring17")#
#rmagic <- subset(dffd, algorithm == "RmagickScoring10")#
alg22 <- subset(dffd, algorithm == "OpencvScoring20_0")#
alg18 <- subset(dffd, algorithm == "OpencvScoring20_100")#
alg23 <- subset(dffd, algorithm == "OpencvScoring20_79")#
alg24 <- subset(dffd, algorithm == "OpencvScoring20_81")#
alg25 <- subset(dffd, algorithm == "OpencvScoring20_82")#
alg26 <- subset(dffd, algorithm == "OpencvScoring20_83")#
alg27 <- subset(dffd, algorithm == "OpencvScoring20_84")#
alg28 <- subset(dffd, algorithm == "OpencvScoring20_45")#
alg29 <- subset(dffd, algorithm == "OpencvScoring20_46")#
alg30 <- subset(dffd, algorithm == "OpencvScoring20_47")#
alg31 <- subset(dffd, algorithm == "OpencvScoring20_48")#
alg32 <- subset(dffd, algorithm == "OpencvScoring20_49")#
alg33 <- subset(dffd, algorithm == "OpencvScoring20_50")#
alg34 <- subset(dffd, algorithm == "OpencvScoring20_51")#
alg35 <- subset(dffd, algorithm == "OpencvScoring20_52")#
alg36 <- subset(dffd, algorithm == "OpencvScoring20_53")#
alg37 <- subset(dffd, algorithm == "OpencvScoring20_54")#
alg38 <- subset(dffd, algorithm == "OpencvScoring20_55")#
alg39 <- subset(dffd, algorithm == "OpencvScoring20_56")#
opencv$ocvscore <- opencv$fixed_score#
opencv$crop <- "OpencvScoring10"#
opencv <- subset(opencv, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
# rmagic$rmscore <- rmagic$fixed_score#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_y, crop_w, crop_h, processed_in, calculated_in))#
acrop$acropscore <- acrop$fixed_score#
acrop$crop <- "OpencvScoring17"#
acrop <- subset(acrop, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
# rmagic$r10score <- rmagic$fixed_score#
# rmagic$crop <- "RmagickScoring10"#
# rmagic <- subset(rmagic, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
#
alg22$a22score <- alg22$fixed_score#
alg22$crop <- "OpencvScoring20"#
alg22 <- subset(alg22, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 45#
alg22$a22score <- round(((alg22$a22score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg18$a18score <- alg18$fixed_score#
alg18$crop <- "OpencvScoring20_1"#
alg18 <- subset(alg18, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg18$a18score <- round(((alg18$a18score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg23$a23score <- alg23$fixed_score#
alg23$crop <- "OpencvScoring20_2"#
alg23 <- subset(alg23, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 65#
alg23$a23score <- round(((alg23$a23score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg24$a24score <- alg24$fixed_score#
alg24$crop <- "OpencvScoring20_3"#
alg24 <- subset(alg24, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 67#
alg24$a24score <- round(((alg24$a24score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg25$a25score <- alg25$fixed_score#
alg25$crop <- "OpencvScoring20_4"#
alg25 <- subset(alg25, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 68#
alg25$a25score <- round(((alg25$a25score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg26$a26score <- alg26$fixed_score#
alg26$crop <- "OpencvScoring20_5"#
alg26 <- subset(alg26, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 69#
alg26$a26score <- round(((alg26$a26score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg27$a27score <- alg27$fixed_score#
alg27$crop <- "OpencvScoring20_6"#
alg27 <- subset(alg27, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 70#
alg27$a27score <- round(((alg27$a27score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg28$a28score <- alg28$fixed_score#
alg28$crop <- "OpencvScoring20_7"#
alg28 <- subset(alg28, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg28$a28score <- round(((alg28$a28score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg29$a29score <- alg29$fixed_score#
alg29$crop <- "OpencvScoring20_8"#
alg29 <- subset(alg29, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg29$a29score <- round(((alg29$a29score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg30$a30score <- alg30$fixed_score#
alg30$crop <- "OpencvScoring20_9"#
alg30 <- subset(alg30, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg30$a30score <- round(((alg30$a30score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg31$a31score <- alg31$fixed_score#
alg31$crop <- "OpencvScoring20_10"#
alg31 <- subset(alg31, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg31$a31score <- round(((alg31$a31score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg32$a32score <- alg32$fixed_score#
alg32$crop <- "OpencvScoring20_11"#
alg32 <- subset(alg32, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg32$a32score <- round(((alg32$a32score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg33$a33score <- alg33$fixed_score#
alg33$crop <- "OpencvScoring20_12"#
alg33 <- subset(alg33, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg33$a33score <- round(((alg33$a33score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg34$a34score <- alg34$fixed_score#
alg34$crop <- "OpencvScoring20_13"#
alg34 <- subset(alg34, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg34$a34score <- round(((alg34$a34score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg35$a35score <- alg35$fixed_score#
alg35$crop <- "OpencvScoring20_14"#
alg35 <- subset(alg35, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg35$a35score <- round(((alg35$a35score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg36$a36score <- alg36$fixed_score#
alg36$crop <- "OpencvScoring20_15"#
alg36 <- subset(alg36, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg36$a36score <- round(((alg36$a36score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg37$a37score <- alg37$fixed_score#
alg37$crop <- "OpencvScoring20_16"#
alg37 <- subset(alg37, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg37$a37score <- round(((alg37$a37score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg38$a38score <- alg38$fixed_score#
alg38$crop <- "OpencvScoring20_17"#
alg38 <- subset(alg38, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg38$a38score <- round(((alg38$a38score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
#
alg39$a39score <- alg39$fixed_score#
alg39$crop <- "OpencvScoring20_18"#
alg39 <- subset(alg39, select= -c(fixed_score, algorithm, fixed_mean, fixed_threshold, auto_mean, auto_threshold, created_at, updated_at, crop_x, crop_w, processed_in, calculated_in))#
yo <- 0#
xo <- 2#
y1 <- 75#
x1 <- 52#
alg39$a39score <- round(((alg39$a39score-xo)/(x1-xo)*(y1-yo))+yo, digits=2)#
# compare2 <- merge(opencv, acrop, by=c("scan_id"))#
# compare2$diff <- round((compare2$ocvscore - compare2$acropscore),digits=1)#
# compare2$type <- "all images"#
#
# ggplot(compare2, aes(type, diff)) +#
#    geom_boxplot()#
#
# index2 <- with(compare2, order(abs(diff),decreasing=T))#
# outliers <- compare2[index2, ]   #
#
########################################################################################
#run regular dff to get all scans with data#
            drv <- dbDriver("PostgreSQL")#
            # #connect to local database#
            con <- dbConnect(drv, dbname="musclesound_production")#
#
            select = "select #
                           scans.created_at as cdate, #
                           scans.study_at as date, #
                           scans.sagittal_plane as side,#
                           scans.id as scan_id,#
                           athletes.first_name || ' ' || athletes.last_name as athlete, #
                           athletes.id as id,#
                           athletes.weight as weight, #
                           athletes.height as height,#
                           athletes.gender as gender,#
                           scored_images.fixed_score as score,#
                           muscles.name as muscle,#
                           devices.name as device,#
                           devices.time_zone as tz,#
                           teams.name as team,#
                           sessions.id as session, #
                           sessions.notes as notes, #
                           sessions.start_at as session_date, #
                           sessions.event_timing as timing,#
                           users.first_name || ' ' || users.last_name as trainer#
                      FROM scans#
                           join scored_images on scans.scored_image_id = scored_images.id#
                           join athletes on scans.athlete_id = athletes.id#
                           join muscles on scans.muscle_id = muscles.id#
                           join devices on scans.device_id = devices.id#
                           join teams on scans.team_id = teams.id#
                           join sessions on scans.session_id = sessions.id#
                           join users on sessions.user_id = users.id"#
            rs <- dbSendQuery(con, select)#
            dffa <- fetch(rs,n=-1) #
#
            select2 = "select #
                           athletes.first_name || ' ' || athletes.last_name as athlete,#
                           athletes.id as id,#
                           positions.name as position#
                      FROM athletes#
                           join positions on athletes.position_id = positions.id"#
            ra <- dbSendQuery(con, select2)#
#
            dffb <- fetch(ra,n=-1)#
            dff <- merge(dffa,dffb,by=c("id","athlete"),all=TRUE)#
            #change date#
            dff$date[is.na(dff$date)] <- dff$session_date[is.na(dff$date)]#
#
##################################################################
#then merge compare2 with dff#
colnames(opencv) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(acrop) <- c("crop_y","crop_h", "scan_id", "score", "algorithm")#
#colnames(rmagic) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg22) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg18) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg23) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg24) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg25) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg26) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg27) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg28) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg29) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg30) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg31) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg32) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg33) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg34) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg35) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg36) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg37) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg38) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
colnames(alg39) <- c("crop_y", "crop_h", "scan_id", "score", "algorithm")#
#
compare3 <- rbind(alg22, alg18, alg23)#
# compare3 <- rbind(alg22, alg18, alg23, alg24, alg25, alg26, alg27, alg28, alg29,#
#                   alg30, alg31, alg32, alg33, alg34, alg35, alg36, alg37, alg38, alg39)#
dffscoring <- merge(dff,compare3,by=c("scan_id"),all=TRUE)#
#remove unwanted columes#
dffscoring$date <- as.numeric(dffscoring$date)#
#
#ignore before Rox SpringTraining when settings were inconsistent#
dffscoring <- subset(dffscoring, date > 1361244845)#
#ignore images for PS, they are mostly trash#
dffscoring <- subset(dffscoring, athlete != "Pierre Sarnow")#
#
dffscoring <- subset(dffscoring, session != 178) #
#dffscoring <- subset(dffscoring, team != "Novo Nordisk") #
#
dffscoring <- subset(dffscoring, select= -c(cdate, date, score.x, weight, height, gender, device, tz, notes, session_date, timing, trainer, position))      #
dffscoring <- subset(dffscoring, athlete != "NA")#
# shorten names for graphs#
dffscoring$muscle[dffscoring$muscle=="Gastrocnemius/Soleus"] <- "GS"#
dffscoring$muscle[dffscoring$muscle=="Rectus Femoris"] <- "RF"#
dffscoring$muscle[dffscoring$muscle=="Vastus Lateralis"] <- "VL"#
dffscoring$muscle[dffscoring$muscle=="Vastus Medialis"] <- "VM"#
dffscoring$muscle[dffscoring$muscle=="Forearm Flexors"] <- "FF"#
dffscoring$muscle[dffscoring$muscle=="Hamstring"] <- "H"#
dffscoring$muscle[dffscoring$muscle=="Infraspinatus"] <- "I"#
dffscoring$muscle[dffscoring$muscle=="Latissimus Dorsi"] <- "LD"#
dffscoring$muscle[dffscoring$muscle=="Posterior Hip"] <- "PH"#
#
dffscoring$session_muscle_side <- paste(dffscoring$session, dffscoring$muscle, dffscoring$side)#
#determine accuracy #
stdev <- ddply(dffscoring, .(athlete, session_muscle_side, muscle, algorithm), summarise,#
  std = sd(score.y),#
  cvar = sd(score.y) / mean(score.y))#
stdev <- subset(stdev, std != "NA")#
#
badsessions <- subset(stdev, algorithm == "OpencvScoring20")#
maxcvar <- ddply(badsessions, .(algorithm), summarise,#
  max = max(boxplot.stats(cvar)$stats))#
#
# badsessions <- ddply(stdev, .(algorithm), summarise,#
#   outliers = boxplot.stats(cvar)$out)#
#
#badsessions2 <- subset(stdev, algorithm == "OpencvScoring17" & cvar > maxcvar$max)#
badsessions2 <- subset(stdev, algorithm == "OpencvScoring20" & cvar > 0.1)#
#
stdev2 <- stdev[ ! stdev$session_muscle_side %in% badsessions2$session_muscle_side, ]#
#
# a20 <- subset(stdev2, algorithm == "OpencvScoring20")#
# a17 <- subset(stdev2, algorithm == "OpencvScoring17")#
# ggplot(a17, aes(muscle, cvar)) +#
#    geom_boxplot(aes(fill = muscle), size=1.5)#
#
stdev3 <- ddply(stdev2, .(algorithm), summarise,#
  sdaccuracy = mean(std),#
  cvaccuracy = mean(cvar))#
#get session scores#
x <- ddply(dffscoring, .(session, athlete, muscle, side, algorithm), summarise,#
  score = mean(score.y))#
#
# range based on absolute max and min score#
# range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
#   number = boxplot.stats(score)$n,#
#   difference = max(score) - min(score))#
#
# range based on stats like in our app, ignore outliers#
range <- ddply(x, .(athlete, muscle, side, algorithm), summarise,#
  number = boxplot.stats(score)$n,#
  difference = max(boxplot.stats(score)$stats) - min(boxplot.stats(score)$stats))#
#
range <- subset(range, difference != "NA")#
#range <- subset(range, difference != 0)#
range <- subset(range, number > 4)#
meanrange <- ddply(range, .(algorithm), summarise,#
  mrange = mean(difference))#
#
effrange <- merge(meanrange,stdev3,by=c("algorithm"))#
effrange <- ddply(effrange, .(algorithm), summarise,#
  effective_range = mrange/sdaccuracy)
effrange
unique(dffc$algorithm)
q()
require(rredis)#
#require(numDeriv)#
require(ggplot2)#
#require(zoo)#
#
redisConnect()#
# Capture Stats for all images from Rails Console with Forman running#
#Scan.all.each do |scan| RedisImageStoreWorker.perform_async(scan.id) end#
#
# "scan:[scan_id]:image:row_avg" - Sorted Set with score = avg and value = row y#
# "scan:[scan_id]:image:col_avg" - Sorted set with score = avg and value = col x#
# "scan:[scan_id]:image:hist" - List with values = pixel count ordered 0-255 (bin)#
#for histogram (type = list)#
# redisSelect(2) #select db 2#
# redisKeys() #list of keys#
# redisLRange("scan:5770:image:hist",0,255)#
#for col and rows average (type = zset)#
redisSelect(2) #select db 2
i <- "scan:12435:image:col_avg"
imagestats <- NULL#
# Get list of Keys#
keys <- unique(redisKeys())#
totalkeys <- nrow(count(keys))#
j <- 0
require(stats)
imagestats <- NULL#
# Get list of Keys#
keys <- unique(redisKeys())#
totalkeys <- nrow(count(keys))#
j <- 0
require(ggplot2)#
require(scales)#
require(RColorBrewer)#
require(plyr)#
require(reshape2)#
require(png)#
require(grid)#
require(lubridate)#
require(randomNames)
imagestats <- NULL#
# Get list of Keys#
keys <- unique(redisKeys())#
totalkeys <- nrow(count(keys))#
j <- 0
nbx <- redisZRange(i,withscores = TRUE)#
        dfnbx <- as.data.frame(matrix(unlist(nbx),ncol=2))#
        k <- sapply(dfnbx, is.factor)#
        dfnbx[k] <- lapply(dfnbx[k], as.character)#
        colnames(dfnbx) <- c("x", "value")#
        dfnbx$x <- as.numeric(dfnbx$x)#
        dfnbx$value <- as.numeric(dfnbx$value)#
        index <- with(dfnbx, order(x,decreasing=F))#
        dfnbx <- dfnbx[index, ]#
        imagestats$dark <- nrow(subset(dfnbx, value < 15))
imagestats
simplelm <- lm(formula = value ~ x, data = dfnbx)#
        imagestats$lmi <- summary(simplelm)$coefficients[1]#
        imagestats$lms <- summary(simplelm)$coefficients[2]
imagestats
my_loess <- loess(value~x, data=dfnbx, span = 0.20, degree=2)#
        curve <- as.data.frame(my_loess$fitted)#
        colnames(curve) <- c("smooth")#
        imagestats$max <- (which(diff(sign(diff(curve$smooth)))==-2)+1) + min(dfnbx$x)#
        imagestats$min <- (which(diff(sign(diff(curve$smooth)))==2)+1) + min(dfnbx$x)
imagestats
lmlist   <- NULL
lmlist <- rbind(lmlist,imagestats)
lmlist
imagestats$max
lmlist   <- NULL#
imagestats <- NULL
imagestats$scan_id <- scan_id#
        nbx <- redisZRange(i,withscores = TRUE)#
        dfnbx <- as.data.frame(matrix(unlist(nbx),ncol=2))#
        k <- sapply(dfnbx, is.factor)#
        dfnbx[k] <- lapply(dfnbx[k], as.character)#
        colnames(dfnbx) <- c("x", "value")#
        dfnbx$x <- as.numeric(dfnbx$x)#
        dfnbx$value <- as.numeric(dfnbx$value)#
        index <- with(dfnbx, order(x,decreasing=F))#
        dfnbx <- dfnbx[index, ]#
        imagestats$dark <- nrow(subset(dfnbx, value < 15))#
        simplelm <- lm(formula = value ~ x, data = dfnbx)#
        imagestats$lmi <- summary(simplelm)$coefficients[1]#
        imagestats$lms <- summary(simplelm)$coefficients[2]#
        my_loess <- loess(value~x, data=dfnbx, span = 0.20, degree=2)#
        curve <- as.data.frame(my_loess$fitted)#
        colnames(curve) <- c("smooth")#
        imagestats$max <- (which(diff(sign(diff(curve$smooth)))==-2)+1) + min(dfnbx$x)#
        imagestats$min <- (which(diff(sign(diff(curve$smooth)))==2)+1) + min(dfnbx$x)#
        lmlist <- rbind(lmlist,imagestats)
lmlist
scan_id <- unique(na.omit(as.numeric(unlist(strsplit(unlist(i), "[^0-9]+")))))
scan_id
lmlist   <- NULL#
imagestats <- NULL
dfnbx <- as.data.frame(matrix(unlist(nbx),ncol=2))#
        k <- sapply(dfnbx, is.factor)#
        dfnbx[k] <- lapply(dfnbx[k], as.character)#
        colnames(dfnbx) <- c("x", "value")#
        dfnbx$x <- as.numeric(dfnbx$x)#
        dfnbx$value <- as.numeric(dfnbx$value)#
        index <- with(dfnbx, order(x,decreasing=F))#
        dfnbx <- dfnbx[index, ]#
        imagestats$dark <- nrow(subset(dfnbx, value < 15))#
        simplelm <- lm(formula = value ~ x, data = dfnbx)#
        imagestats$lmi <- summary(simplelm)$coefficients[1]#
        imagestats$lms <- summary(simplelm)$coefficients[2]#
        my_loess <- loess(value~x, data=dfnbx, span = 0.20, degree=2)#
        curve <- as.data.frame(my_loess$fitted)#
        colnames(curve) <- c("smooth")#
        imagestats$max <- (which(diff(sign(diff(curve$smooth)))==-2)+1) + min(dfnbx$x)#
        imagestats$min <- (which(diff(sign(diff(curve$smooth)))==2)+1) + min(dfnbx$x)#
        lmlist <- rbind(lmlist,imagestats)
lmlist
imagestats
lmlist   <- NULL#
imagestats <- NULL
imagestats$scan_id <- scan_id
dfnbx <- as.data.frame(matrix(unlist(nbx),ncol=2))#
        k <- sapply(dfnbx, is.factor)#
        dfnbx[k] <- lapply(dfnbx[k], as.character)#
        colnames(dfnbx) <- c("x", "value")#
        dfnbx$x <- as.numeric(dfnbx$x)#
        dfnbx$value <- as.numeric(dfnbx$value)#
        index <- with(dfnbx, order(x,decreasing=F))#
        dfnbx <- dfnbx[index, ]#
        imagestats$dark <- nrow(subset(dfnbx, value < 15))#
        simplelm <- lm(formula = value ~ x, data = dfnbx)#
        imagestats$lmi <- summary(simplelm)$coefficients[1]#
        imagestats$lms <- summary(simplelm)$coefficients[2]#
        my_loess <- loess(value~x, data=dfnbx, span = 0.20, degree=2)#
        curve <- as.data.frame(my_loess$fitted)#
        colnames(curve) <- c("smooth")#
        imagestats$max <- (which(diff(sign(diff(curve$smooth)))==-2)+1) + min(dfnbx$x)#
        imagestats$min <- (which(diff(sign(diff(curve$smooth)))==2)+1) + min(dfnbx$x)#
        lmlist <- rbind(lmlist,imagestats)
lmlist
redisConnect()#
# Capture Stats for all images from Rails Console with Forman running#
#Scan.all.each do |scan| RedisImageStoreWorker.perform_async(scan.id) end#
#
# "scan:[scan_id]:image:row_avg" - Sorted Set with score = avg and value = row y#
# "scan:[scan_id]:image:col_avg" - Sorted set with score = avg and value = col x#
# "scan:[scan_id]:image:hist" - List with values = pixel count ordered 0-255 (bin)#
#for histogram (type = list)#
# redisSelect(2) #select db 2#
# redisKeys() #list of keys#
# redisLRange("scan:5770:image:hist",0,255)#
#for col and rows average (type = zset)#
redisSelect(2) #select db 2
require(rredis)#
#require(numDeriv)#
require(ggplot2)#
#require(zoo)#
require(ggplot2)#
require(scales)#
require(RColorBrewer)#
require(plyr)#
require(reshape2)#
require(png)#
require(grid)#
require(lubridate)#
require(RPostgreSQL)
keys <- unique(redisKeys())#
totalkeys <- nrow(count(keys))#
print(totalkeys)
keys
i <- "scan:16781:image:col_avg"
iscol <- substrRight(i, 7)#
    scan_id <- unique(na.omit(as.numeric(unlist(strsplit(unlist(i), "[^0-9]+")))))
require(scales)#
require(RColorBrewer)#
require(plyr)#
require(reshape2)#
require(png)#
require(grid)#
require(lubridate)
iscol <- substrRight(i, 7)#
    scan_id <- unique(na.omit(as.numeric(unlist(strsplit(unlist(i), "[^0-9]+")))))
library(plyr)
iscol <- substrRight(i, 7)#
    scan_id <- unique(na.omit(as.numeric(unlist(strsplit(unlist(i), "[^0-9]+")))))
q()
require(rredis)#
require(ggplot2)#
require(scales)#
require(RColorBrewer)#
require(plyr)#
require(reshape2)#
require(png)#
require(grid)#
require(lubridate)#
require(RPostgreSQL)#
#
substrRight <- function(x, n){ #
 substr(x, nchar(x)-n+1, nchar(x))#
 }#
#
redisConnect()#
redisSelect(2) #
#
##################################################
# FOR A SINGLE SCAN_ID#
nbx <- redisZRange("scan:23150:image:row_avg",withscores = TRUE)#
dfnbx <- as.data.frame(matrix(unlist(nbx),ncol=2))#
#
i <- sapply(dfnbx, is.factor)#
dfnbx[i] <- lapply(dfnbx[i], as.character)#
#
colnames(dfnbx) <- c("x", "value")#
#
dfnbx$x <- as.numeric(dfnbx$x)#
dfnbx$value <- as.numeric(dfnbx$value)#
#
index <- with(dfnbx, order(x,decreasing=F))#
dfnbx <- dfnbx[index, ]#
#
imagestats <- NULL#
#might be cool to include # of dark columns - columns with avg < 15#
imagestats$dark <- nrow(subset(dfnbx, value < 15))#
imagestats$maxcol <- max(dfnbx$value)#
simplelm <- lm(formula = value ~ x, data = dfnbx)#
imagestats$lmi <- summary(simplelm)$coefficients[1]#
imagestats$lms <- summary(simplelm)$coefficients[2]#
#
#apply smoother#
my_loess <- loess(value~x, data=dfnbx, span = 0.20)#
curve <- as.data.frame(my_loess$fitted)#
#curve$x <- rep(min(dfnbx$x):max(dfnbx$x))#
#
colnames(curve) <- c("smooth")#
curve$x <- rep(1:nrow(curve))#
#
first_diff <- NULL#
first_diff$max <- (which(diff(sign(diff(curve$smooth)))==-2)+1)#
#
imagestats2 <- curve[curve$x %in% first_diff$max, ]#
imagestats2$x <- imagestats2$x + min(dfnbx$x)#
#
toptwo <- with(imagestats2, order(smooth,decreasing=TRUE)[1:2])#
toptwo <- imagestats2[toptwo, ]#
imagestats$max <- toptwo#
#
ggplot(dfnbx, aes(x, value)) + #
geom_line() +#
geom_point() +#
#annotate("text", x = c(250), y = c(50), label = paste("lm slope",summary(simplelm)$coefficients[2], sep=" "), size=15, colour="#352c65", family="Helvetica Neue", hjust=0) +#
#geom_smooth(aes(group=1),method = "lm") #
geom_smooth(aes(group=1), se=FALSE, method="loess", span=0.20, alpha = .1, size=2) #
#geom_line(aes(ddfnbx$x, ddfnbx$dx))#
#################################################
# FOR ALL SCAN IDS#
require(lubridate)#
require(rredis)#
library("parallel")#
library("doParallel")#
library("foreach")#
#
cl <- makeCluster(detectCores() - 2)#
clusterEvalQ(cl, { require(rredis); redisConnect(); redisSelect(2) })#
registerDoParallel(cl)#
#
alllist <- NULL#
collist   <- NULL#
imagestatscol <- NULL#
rowlist   <- NULL#
imagestatsrow <- NULL#
# Get list of Keys#
redisConnect()#
redisSelect(2) #
keys <- unique(redisKeys())#
totalkeys <- nrow(count(keys))#
print(totalkeys)#
j <- 0#
#
start <- now()#
alllist <- foreach(i=1:totalkeys, .packages = c("rredis","ggplot2","scales","plyr","reshape2","foreach"), .combine=rbind, .multicombine=TRUE, .inorder=FALSE) %dopar% {#
   try({#
    substrRight <- function(x, n){ #
    substr(x, nchar(x)-n+1, nchar(x))#
    }#
    k <- keys[i]#
    print(k)#
    j <- j + 1#
    print(j)    #
    #get the last 7 characters from key#
    roworcol <- substrRight(k, 7)    #
    scan_id <- unique(na.omit(as.numeric(unlist(strsplit(unlist(k), "[^0-9]+")))))#
    if (roworcol == "col_avg") {#
        imagestatscol$scan_id <- scan_id#
        nbx <- redisZRange(k,withscores = TRUE)#
        dfnbx <- as.data.frame(matrix(unlist(nbx),ncol=2))#
        kk <- sapply(dfnbx, is.factor)#
        dfnbx[kk] <- lapply(dfnbx[kk], as.character)#
        colnames(dfnbx) <- c("x", "value")#
        dfnbx$x <- as.numeric(dfnbx$x)#
        dfnbx$value <- as.numeric(dfnbx$value)#
        index <- with(dfnbx, order(x,decreasing=F))#
        dfnbx <- dfnbx[index, ]#
        imagestatscol$dark <- nrow(subset(dfnbx, value < 15))#
        imagestatscol$maxcol <- max(dfnbx$value)#
        simplelm <- lm(formula = value ~ x, data = dfnbx)#
        imagestatscol$lmi <- summary(simplelm)$coefficients[1]#
        imagestatscol$lms <- summary(simplelm)$coefficients[2]#
        my_loess <- loess(value~x, data=dfnbx, span = 0.20)#
        curve <- as.data.frame(my_loess$fitted)#
        colnames(curve) <- c("smooth")#
        curve$x <- rep(1:nrow(curve))#
        first_diff <- NULL#
        first_diff$max <- (which(diff(sign(diff(curve$smooth)))==-2)+1)#
        imagestatscol2 <- curve[curve$x %in% first_diff$max, ]#
        imagestatscol2$x <- imagestatscol2$x + min(dfnbx$x)#
        toptwo <- with(imagestatscol2, order(smooth,decreasing=TRUE)[1:2])#
        toptwo <- imagestatscol2[toptwo, ]#
        imagestatscol$max <- toptwo#
        imagestatscol$type <- "col"#
        imagestatscol#
        }#
        else if (roworcol == "row_avg") {#
        imagestatsrow$scan_id <- scan_id#
        nbx <- redisZRange(k,withscores = TRUE)#
        dfnbx <- as.data.frame(matrix(unlist(nbx),ncol=2))#
        kk <- sapply(dfnbx, is.factor)#
        dfnbx[kk] <- lapply(dfnbx[kk], as.character)#
        colnames(dfnbx) <- c("y", "value")#
        dfnbx$y <- as.numeric(dfnbx$y)#
        dfnbx$value <- as.numeric(dfnbx$value)#
        index <- with(dfnbx, order(y,decreasing=F))#
        dfnbx <- dfnbx[index, ]#
        imagestatsrow$dark <- nrow(subset(dfnbx, value < 15))#
        imagestatsrow$maxrow <- max(dfnbx$value)#
        simplelm <- lm(formula = value ~ y, data = dfnbx)#
        imagestatsrow$rowlmi <- summary(simplelm)$coefficients[1]#
        imagestatsrow$rowlms <- summary(simplelm)$coefficients[2]#
        my_loess <- loess(value~y, data=dfnbx, span = 0.20)#
        curve <- as.data.frame(my_loess$fitted)#
        colnames(curve) <- c("smooth")#
        curve$y <- rep(1:nrow(curve))#
        first_diff <- NULL#
        first_diff$max <- (which(diff(sign(diff(curve$smooth)))==-2)+1)#
        imagestatsrow2 <- curve[curve$y %in% first_diff$max, ]#
        imagestatsrow2$y <- imagestatsrow2$y + min(dfnbx$y)#
        toptwo <- with(imagestatsrow2, order(smooth,decreasing=TRUE)[1:2])#
        toptwo <- imagestatsrow2[toptwo, ]#
        imagestatsrow$rowmax <- toptwo#
        imagestatsrow$type <- "row"#
        imagestatsrow#
        }#
    else {}#
      })#
  }#
finish <- now()#
print("Total Time")#
print(finish - start)#
stopCluster(cl)
q()\
q()
require(rredis)#
require(ggplot2)#
require(scales)#
require(RColorBrewer)#
require(plyr)#
require(reshape2)#
require(png)#
require(grid)#
require(lubridate)#
require(RPostgreSQL)#
#
substrRight <- function(x, n){ #
 substr(x, nchar(x)-n+1, nchar(x))#
 }#
#
redisConnect()#
redisSelect(2) #
#
##################################################
# FOR A SINGLE SCAN_ID#
nbx <- redisZRange("scan:23150:image:row_avg",withscores = TRUE)#
dfnbx <- as.data.frame(matrix(unlist(nbx),ncol=2))#
#
i <- sapply(dfnbx, is.factor)#
dfnbx[i] <- lapply(dfnbx[i], as.character)#
#
colnames(dfnbx) <- c("x", "value")#
#
dfnbx$x <- as.numeric(dfnbx$x)#
dfnbx$value <- as.numeric(dfnbx$value)#
#
index <- with(dfnbx, order(x,decreasing=F))#
dfnbx <- dfnbx[index, ]#
#
imagestats <- NULL#
#might be cool to include # of dark columns - columns with avg < 15#
imagestats$dark <- nrow(subset(dfnbx, value < 15))#
imagestats$maxcol <- max(dfnbx$value)#
simplelm <- lm(formula = value ~ x, data = dfnbx)#
imagestats$lmi <- summary(simplelm)$coefficients[1]#
imagestats$lms <- summary(simplelm)$coefficients[2]#
#
#apply smoother#
my_loess <- loess(value~x, data=dfnbx, span = 0.20)#
curve <- as.data.frame(my_loess$fitted)#
#curve$x <- rep(min(dfnbx$x):max(dfnbx$x))#
#
colnames(curve) <- c("smooth")#
curve$x <- rep(1:nrow(curve))#
#
first_diff <- NULL#
first_diff$max <- (which(diff(sign(diff(curve$smooth)))==-2)+1)#
#
imagestats2 <- curve[curve$x %in% first_diff$max, ]#
imagestats2$x <- imagestats2$x + min(dfnbx$x)#
#
toptwo <- with(imagestats2, order(smooth,decreasing=TRUE)[1:2])#
toptwo <- imagestats2[toptwo, ]#
imagestats$max <- toptwo#
#
ggplot(dfnbx, aes(x, value)) + #
geom_line() +#
geom_point() +#
#annotate("text", x = c(250), y = c(50), label = paste("lm slope",summary(simplelm)$coefficients[2], sep=" "), size=15, colour="#352c65", family="Helvetica Neue", hjust=0) +#
#geom_smooth(aes(group=1),method = "lm") #
geom_smooth(aes(group=1), se=FALSE, method="loess", span=0.20, alpha = .1, size=2) #
#geom_line(aes(ddfnbx$x, ddfnbx$dx))#
#################################################
# FOR ALL SCAN IDS#
require(lubridate)#
require(rredis)#
library("parallel")#
library("doParallel")#
library("foreach")#
#
cl <- makeCluster(detectCores() - 2)#
clusterEvalQ(cl, { require(rredis); redisConnect(); redisSelect(2) })#
registerDoParallel(cl)#
#
alllist <- NULL#
collist   <- NULL#
imagestatscol <- NULL#
rowlist   <- NULL#
imagestatsrow <- NULL#
# Get list of Keys#
redisConnect()#
redisSelect(2) #
keys <- unique(redisKeys())#
totalkeys <- nrow(count(keys))#
print(totalkeys)#
j <- 0#
#
start <- now()#
alllist <- foreach(i=1:totalkeys, .packages = c("rredis","ggplot2","scales","plyr","reshape2","foreach"), .combine=rbind, .multicombine=TRUE, .inorder=FALSE) %dopar% {#
   try({#
    substrRight <- function(x, n){ #
    substr(x, nchar(x)-n+1, nchar(x))#
    }#
    k <- keys[i]#
    print(k)#
    j <- j + 1#
    print(j)    #
    #get the last 7 characters from key#
    roworcol <- substrRight(k, 7)    #
    scan_id <- unique(na.omit(as.numeric(unlist(strsplit(unlist(k), "[^0-9]+")))))#
    if (roworcol == "col_avg") {#
        imagestatscol$scan_id <- scan_id#
        nbx <- redisZRange(k,withscores = TRUE)#
        dfnbx <- as.data.frame(matrix(unlist(nbx),ncol=2))#
        kk <- sapply(dfnbx, is.factor)#
        dfnbx[kk] <- lapply(dfnbx[kk], as.character)#
        colnames(dfnbx) <- c("x", "value")#
        dfnbx$x <- as.numeric(dfnbx$x)#
        dfnbx$value <- as.numeric(dfnbx$value)#
        index <- with(dfnbx, order(x,decreasing=F))#
        dfnbx <- dfnbx[index, ]#
        imagestatscol$dark <- nrow(subset(dfnbx, value < 15))#
        imagestatscol$maxcol <- max(dfnbx$value)#
        simplelm <- lm(formula = value ~ x, data = dfnbx)#
        imagestatscol$lmi <- summary(simplelm)$coefficients[1]#
        imagestatscol$lms <- summary(simplelm)$coefficients[2]#
        my_loess <- loess(value~x, data=dfnbx, span = 0.20)#
        curve <- as.data.frame(my_loess$fitted)#
        colnames(curve) <- c("smooth")#
        curve$x <- rep(1:nrow(curve))#
        first_diff <- NULL#
        first_diff$max <- (which(diff(sign(diff(curve$smooth)))==-2)+1)#
        imagestatscol2 <- curve[curve$x %in% first_diff$max, ]#
        imagestatscol2$x <- imagestatscol2$x + min(dfnbx$x)#
        toptwo <- with(imagestatscol2, order(smooth,decreasing=TRUE)[1:2])#
        toptwo <- imagestatscol2[toptwo, ]#
        imagestatscol$max <- toptwo#
        imagestatscol$type <- "col"#
        imagestatscol#
        }#
        else if (roworcol == "row_avg") {#
        imagestatsrow$scan_id <- scan_id#
        nbx <- redisZRange(k,withscores = TRUE)#
        dfnbx <- as.data.frame(matrix(unlist(nbx),ncol=2))#
        kk <- sapply(dfnbx, is.factor)#
        dfnbx[kk] <- lapply(dfnbx[kk], as.character)#
        colnames(dfnbx) <- c("y", "value")#
        dfnbx$y <- as.numeric(dfnbx$y)#
        dfnbx$value <- as.numeric(dfnbx$value)#
        index <- with(dfnbx, order(y,decreasing=F))#
        dfnbx <- dfnbx[index, ]#
        imagestatsrow$dark <- nrow(subset(dfnbx, value < 15))#
        imagestatsrow$maxrow <- max(dfnbx$value)#
        simplelm <- lm(formula = value ~ y, data = dfnbx)#
        imagestatsrow$rowlmi <- summary(simplelm)$coefficients[1]#
        imagestatsrow$rowlms <- summary(simplelm)$coefficients[2]#
        my_loess <- loess(value~y, data=dfnbx, span = 0.20)#
        curve <- as.data.frame(my_loess$fitted)#
        colnames(curve) <- c("smooth")#
        curve$y <- rep(1:nrow(curve))#
        first_diff <- NULL#
        first_diff$max <- (which(diff(sign(diff(curve$smooth)))==-2)+1)#
        imagestatsrow2 <- curve[curve$y %in% first_diff$max, ]#
        imagestatsrow2$y <- imagestatsrow2$y + min(dfnbx$y)#
        toptwo <- with(imagestatsrow2, order(smooth,decreasing=TRUE)[1:2])#
        toptwo <- imagestatsrow2[toptwo, ]#
        imagestatsrow$rowmax <- toptwo#
        imagestatsrow$type <- "row"#
        imagestatsrow#
        }#
    else {}#
      })#
  }#
finish <- now()#
print("Total Time")#
print(finish - start)#
stopCluster(cl)
q()
require(RPostgreSQL)
postgresqlBuildTableDefinition(PostgreSQL, labnotebook, labnotebook, row.names = TRUE)
q()
require(rredis)#
require(ggplot2)#
require(scales)#
require(RColorBrewer)#
require(plyr)#
require(reshape2)#
require(png)#
require(grid)#
require(lubridate)#
require(RPostgreSQL)#
require(lubridate)#
require(rredis)#
require(WriteXLS)#
library("parallel")#
library("doParallel")#
library("foreach")#
#
#GET LATEST LABNOTEBOOK#
drv <- dbDriver("PostgreSQL")#
con <- dbConnect(drv, dbname="labnotebook")#
select = "select *FROM labnotebook2"#
rs <- dbSendQuery(con, select)#
labnotebook <- fetch(rs,n=-1) #
labnotebook <- labnotebook[,-1]#
labnotebookbackup <- labnotebook
setwd("/Users/psarnow/Documents/")#
dff2 <- labnotebook#
#dff2 <- subset(dff2, team == "Dallas Mavericks")#
# shorten names for graphs#
dff2$muscle[dff2$muscle=="Gastrocnemius/Soleus"] <- "GS"#
dff2$muscle[dff2$muscle=="Rectus Femoris"] <- "RF"#
dff2$muscle[dff2$muscle=="Vastus Lateralis"] <- "VL"#
dff2$muscle[dff2$muscle=="Vastus Medialis"] <- "VM"#
dff2$muscle[dff2$muscle=="Forearm Flexors"] <- "FF"#
dff2$muscle[dff2$muscle=="Hamstring Medial"] <- "HM"#
dff2$muscle[dff2$muscle=="Infraspinatus"] <- "I"#
dff2$muscle[dff2$muscle=="Latissimus Dorsi"] <- "LD"#
dff2$muscle[dff2$muscle=="Posterior Hip"] <- "PH"#
dff2$muscle[(dff2$muscle=="Posterior Deltoid")] <- "PD"#
dff2$muscle[(dff2$muscle=="Gastrocnemius Medial")] <- "GM"#
dff2$muscle[(dff2$muscle=="Gastrocnemius Lateral")] <- "GL"#
dff2$muscle[(dff2$muscle=="Hamstring Lateral")] <- "HL"#
#
#fix App State VL scans#
apu <- subset(dff2, team == "Appalachian State University")#
dff3 <- subset(dff2, team != "Appalachian State University")#
dfVL <- subset(apu, muscle == "VL")#
dfother <- subset(apu, muscle != "VL")#
#
usession <- unique(dfVL$session)#
VL <- NULL#
for (i in usession) {#
    x <- subset(dfVL, session == i)#
    index <- with(x, order(sequence_number,decreasing=F))#
    x <- x[index, ]#
    #one session had a 5 to 3 distr.#
    if (i == 4878) {#
        x$muscle[1:5] <- "VLsite1"#
        x$muscle[6:8] <- "VLsite2"#
    }#
    else if (i == 4897) {#
        x$muscle[1:3] <- "VLsite1"#
        x$muscle[4:7] <- "VLsite2"#
    }#
    else {#
        xcount <- nrow(x)#
        x$muscle[1:(xcount/2)] <- "VLsite1"#
        x$muscle[((xcount/2)+1):xcount] <- "VLsite2"#
        VL <- rbind(VL, x)#
    }#
}#
#
#custom fix a few sessions#
VL$muscle[VL$session==4904] <- "VLsite2"#
VL$muscle[VL$session==4870] <- "VLsite1"#
VL$muscle[VL$session==4899] <- "VLsite1"#
VL <- subset(VL, (session!=4898 | muscle!="VLsite1"))#
VL$session[VL$session==4899] <- as.numeric(4898)#
#
#Site B is what the biopsys are measuring#
VLb <- subset(VL, timing == "Pre" & muscle == "VLsite1")#
VLb$muscle <- "VLsiteB"#
#
VLbb <- subset(VL, timing == "Recovery" & muscle == "VLsite2")#
VLbb$muscle <- "VLsiteB"#
#
dfoverall <- rbind(VL,dfother,VLb,VLbb)#
#dfoverall$muscle_side <- paste(dfoverall$muscle, dfoverall$side)#
dff4 <- rbind(dfoverall,dff3)#
#
dff4$date <- as.numeric(dff4$date)#
#
#average time and score for each muscle session#
x <- ddply(dff4, .(muscle, side, device, athlete, session, timing, team, notes), summarise,#
date = mean(date),#
score = round(mean(score),digits=0))#
#
x$date <- as.POSIXct(x$date, origin = '1970-01-01', tz="UTC+12")#
#
x$muscle_side <- paste(x$muscle, x$side)#
#
#determine target and range for each athlete's muscle_side#
z <- ddply(x, .(athlete, muscle_side, muscle), summarise,#
  sessions = boxplot.stats(score)$n,#
  itarget = round(boxplot.stats(score)$stats[4],digits=0),#
  dtarget = round(mean(score),digits=0)+2,#
  range = round(max(boxplot.stats(score)$stats) - min(boxplot.stats(score)$stats), digits = 2))#
#
#check for sufficient number of sessions and range size...default targets#
z$target[(z$sessions < 5 | z$range < 9)] <- z$dtarget[(z$sessions < 5 | z$range < 9)]#
z$target[(is.na(z$target))] <- z$itarget[(is.na(z$target))]#
#
uu <- subset(z, select= c(athlete, muscle_side,target,range))#
#
xx <- merge(x,uu,by=c("athlete","muscle_side"))#
xx$target <- as.numeric(xx$target)#
#
#determine how far scores are from targets#
xx$dft <- round((xx$score - xx$target), digits=2)#
#determine score as percent of range#
xx$fueltank <- round(((xx$range + xx$dft) / xx$range), digits=2)#
#xx$fueltank <- sprintf("%1.2f%%", 100*round(((xx$range + xx$dft) / xx$range), digits=2))#
#
#adjust for ranges less than 2, make scores 75% erso#
xx$fueltank[(xx$range < 2) & (xx$fueltank < 0)] <- .5#
xx$fueltank[(xx$range < 2) & (xx$fueltank > 0)] <- .75#
#
#put bounds on bottom and top (lowest is 10%, highest is 120%)#
xx$fueltank[(xx$fueltank < .1)] <- .1#
xx$fueltank[(xx$fueltank > 1.2)] <- 1.2#
#
coredata <- xx#
#determine score drop if its a recovery following a pre on same day
require(EBImage)#
require(rredis)#
require(ggplot2)#
require(scales)#
require(RColorBrewer)#
require(plyr)#
require(reshape2)#
require(png)#
require(grid)#
require(lubridate)#
require(RPostgreSQL)#
require(lubridate)#
require(rredis)#
require(WriteXLS)#
library("parallel")#
library("doParallel")#
library("foreach")#
#
Rscoring <- subset(labnotebook, device != "LOGIQe" #
                   & session > 3177#
                   & team == "GU Athletes & Staff"#
                   & muscle == "Rectus Femoris")#
#
Rscoring$ymax <- pmax(Rscoring$y1,Rscoring$y2)#
Rscoring$msize <- abs(Rscoring$ymax-Rscoring$crop_y)#
ggplot(Rscoring, aes(muscle, msize)) +#
  geom_violin() +#
  geom_boxplot(alpha=.25) #
cl <- makeCluster(detectCores() - 2)#
registerDoParallel(cl)#
#
allscores <- NULL#
imagestats <- NULL#
# Get list of Images#
full_list <- unique(Rscoring$imagepath)#
totalimages <- nrow(count(full_list))#
print(totalimages)#
start <- now()#
allscores <- foreach(i=1:totalimages, .packages = c("IM","EBImage","scales","plyr","reshape2","foreach"), .combine=rbind, .multicombine=TRUE, .inorder=FALSE) %dopar% {#
  k <- full_list[i]#
  img <- subset(Rscoring, imagepath == k)#
  imagestats$scan_id <- img$scan_id  #
  img2 <- readImage(img$imagepath)[,,mean(1:3)]#
  #blur#
  x <- gblur(y, 15)#
  writeImage(x,"gblurimage.jpg")#
  #threshold#
  xt <- thresh(x, 60, 60, 0.003)#
  writeImage(xt,"thresholdimage.jpg")#
  ## morphological opening to remove objects smaller than the structuring element#
  xm <- opening(xt, makeBrush(11, shape='disc'))#
  writeImage(xm,"morphedimage.jpg")#
  #inverse foreground/background#
  xm <- 1 - xm#
  writeImage(xm,"inversebackgroundimage.jpg")#
  xm <- bwlabel(xm)#
  ## compute shape features#
  fts <- computeFeatures.shape(xm)#
  #find all but the largest shape#
  idx <- which(fts[,"s.area"] < max(fts[,"s.area"]))#
  #remove these areas from image#
  nseg <- rmObjects(xm,idx)#
  writeImage(nseg,"largestareaimage.jpg") #
  #select the pixels that have a 0's value and make them really high so we don't score them#
  nseg[nseg == 0] <- 100#
  imgroi <- y*nseg#
  #Crop Image top#
  maxc <- ncol(img2)#
  maxr <- nrow(img2)#
  imgc <- imgroi[(img$crop_y-img$chrome_y):maxr,1:maxc]#
  #imguc <- img2[(img$crop_y-img$chrome_y):maxr,1:maxc,1:3]#
  #Get pixel intensities#
#   rows <- nrow(imgc)#
#   cols <- ncol(imgc)#
#   rowsuc <- nrow(imguc)#
  #colsuc <- ncol(imguc)#
  #mean of r,g,b intensities#
  #opencv is binning the intensities, don't think i have to do that#
  #pixelmean <- imgc[1:rows,1:cols,mean(1:3)]#
  #pixelmeanuc <- imguc[1:rowsuc,1:colsuc,mean(1:3)]#
  #rescale (may not be necessary really)#
  pixelmeanrs <- rescale(imgc, c(0,255))#
  #pixelmeanrsuc <- rescale(pixelmeanuc, c(0,255))#
  thresh75 <- pixelmeanrs[ which(pixelmeanrs < 75)]#
  #thresh75uc <- pixelmeanrsuc[ which(pixelmeanrsuc < 75)]#
  imagestats$scorebc <- 75 - mean(thresh75)#
  #imagestats$scoreuc <- 75 - mean(thresh75uc)#
  imagestats$score <- img$score#
}#
finish <- now()#
print("Total Time")#
print(finish - start)#
stopCluster(cl)#
scoring <- allscores#
scoring <- as.data.frame(matrix(unlist(scoring),ncol=3))#
colnames(scoring) <- c("scan_id", "scorebc", "score")#
scoring$cropscorediff <- scoring$scoreuc - scoring$scorebc#
bcscoring <- merge(Rscoring, scoring, by=c("scan_id"))#
bcscoring$ath_muscle_side <- paste(bcscoring$athlete, bcscoring$muscle, bcscoring$side)
q()
require(e1071)
model <- svm(Species ~ ., data = iris_train,#
 method = "C-classification", kernel = "radial",#
 cost = 10, gamma = 0.1)
data(iris)
model <- svm(Species ~ ., data = iris_train,#
 method = "C-classification", kernel = "radial",#
 cost = 10, gamma = 0.1)
model <- svm(Species ~ ., data = iris,#
 method = "C-classification", kernel = "radial",#
 cost = 10, gamma = 0.1)
summary(model)
pred <- predict(model, head(iris), decision.values = TRUE)
pred
tobj <- tune.svm(type ~ ., data = spam_train[1:300, ], gamma = 10^(-6:-3), cost = 10^(1:2))
tobj <- tune.svm(type ~ ., data = iris[1:300, ], gamma = 10^(-6:-3), cost = 10^(1:2))
tobj <- tune.svm(Species ~ ., data = iris[1:300, ], gamma = 10^(-6:-3), cost = 10^(1:2))
summary(tobj)
q()
require(rredis)#
require(ggplot2)#
require(scales)#
require(RColorBrewer)#
require(plyr)#
require(reshape2)#
require(png)#
require(grid)#
require(lubridate)#
require(RPostgreSQL)#
require(WriteXLS)#
library("parallel")#
library("doParallel")#
library("foreach")
dff1 <- readWorksheet(loadWorkbook("/Users/psarnow/Documents/Nieman-MuscleSound-Study-Data-Spring-2014"),sheet=1)
require(XLConnect)
dff1 <- readWorksheet(loadWorkbook("/Users/psarnow/Documents/Nieman-MuscleSound-Study-Data-Spring-2014"),sheet=1)
dff1 <- readWorksheet(loadWorkbook("/Users/psarnow/Documents/Nieman-MuscleSound-Study-Data-Spring-2014.xlsx"),sheet=1)
dff1
dff1 <- select(dff1, Subject, (Age:Fat.)
)
require(dplyr
)
dff1 <- select(dff1, Subject, (Age:Fat.))
dff1
colnames(dff1) <- c("athlete","age","height","weight","fat")
dff1
BiopsyModel <- read.csv(file = "/Users/psarnow/Documents/scoringmodel.csv")
BiopsyModel$athelte
BiopsyModel$athelete
BiopsyModel$athlete
dff1$athlete <- paste("AS",dff1$athlete,sep="")
dff1
dff1 <- readWorksheet(loadWorkbook("/Users/psarnow/Documents/Nieman-MuscleSound-Study-Data-Spring-2014.xlsx"),sheet=1)#
dff1 <- select(dff1, Subject, (Age:Fat.)#
colnames(dff1) <- c("athlete","age","height","weight","fat")#
dff1 <- subset(dff1, athlete == "NA")
dff1 <- readWorksheet(loadWorkbook("/Users/psarnow/Documents/Nieman-MuscleSound-Study-Data-Spring-2014.xlsx"),sheet=1)#
dff1 <- select(dff1, Subject, (Age:Fat.)
dff1
dff1 <- dplyr:::select(dff1, Subject, (Age:Fat.)
)
colnames(dff1) <- c("athlete","age","height","weight","fat")
dff1
dff1 <- subset(dff1, athlete != "NA")
dff1
dff1$athlete <- paste("AS",dff1$athlete,sep="")
dff1
dff2 <- readWorksheet(loadWorkbook("/Users/psarnow/Documents//CUStudy/MuscleSound Study Table Subject Charactersistics FINAL.xlsx"),sheet=1)
dff2
dff2 <- select(dff2, Study.Code, Age, Weight..lb..1, Height..in..1, X..Body.Fat)
dff2
colnames(dff2) <- c("athlete","age","weight","height","fat")
dff2
dff2$athlete <- gsub("^.*?: ","",dff2$athlete)
dff2
dff2$athlete <- gsub("^.*?: """,dff2$athlete)
dff2$athlete <- gsub("^.*?: ",dff2$athlete)
dff2$athlete <- gsub("^.*?: " "",dff2$athlete)
dff2$athlete <- gsub("^.*?","",dff2$athlete)
dff2
dff2$athlete <- gsub("^.*?",",",dff2$athlete)
dff2
dff2$athlete <- as.numeric(gsub("\\D", "", dff2$athlete))
dff2
dff2$athlete <- paste("CU",dff2$athlete,sep="")
dff2
athleteinfo <- rbind(dff1,dff2)
athleteinfo
dff2$fat <- dff2$fat * 100
dff2
athleteinfo <- rbind(dff1,dff2)
athleteinfo
athleteinfo$BMI = (athleteinfo$weight / (athleteinfo$height * athleteinfo$height)) * 703
athleteinfo
BiopsyModel <- read.csv(file = "/Users/psarnow/Documents/scoringmodel.csv")#
#
BiopsyModel <- merge(BiopsyModel,athleteinfo, by=c("athlete"))
BiopsyModel
class(BiopsyModel$age)
class(BiopsyModel$height)
class(BiopsyModel$fat)
class(BiopsyModel$BMI)
write.csv(BiopsyModel, "scoringmodel.csv", row.names=TRUE)
write.csv(BiopsyModel, "/Users/psarnow/Documents/scoringmodel.csv", row.names=TRUE)
q()
require(rredis)#
require(ggplot2)#
require(scales)#
require(RColorBrewer)#
require(plyr)#
require(reshape2)#
require(png)#
require(grid)#
require(lubridate)#
require(RPostgreSQL)#
require(WriteXLS)#
library("parallel")#
library("doParallel")#
library("foreach")#
#
# grab the db first so we are only doing calcs on images that are scored in a session (not pending)#
# replace redis calcs with EBImage (get row and col plot profiles)#
# add colorbar stats?#
# make sure moment calcs are correct#
#
#GET LATEST LABNOTEBOOK#
drv <- dbDriver("PostgreSQL")#
con <- dbConnect(drv, dbname="labnotebook")#
select = "select *FROM labnotebook"#
rs <- dbSendQuery(con, select)#
labnotebook <- fetch(rs,n=-1) #
labnotebook <- labnotebook[,-1]
kb <- subset(labnotebook, athlete == "Kiki Broe" & session < 4160)#
#average time and score for each muscle session#
kb <- ddply(kb, .(muscle, side, device, athlete, session, timing, team, notes), plyr:::summarise,#
date = mean(date),#
score = round_any(mean(score),5))
kb
kb <- subset(labnotebook, athlete == "Kiki Broe" & session < 4160)#
#average time and score for each muscle session#
kb <- ddply(kb, .(muscle, side, athlete, session, timing, team, notes), plyr:::summarise,#
date = mean(date),#
score = round_any(mean(score),5))
kb
NCPalette <- c("#643165", "#8FC44E", "#F29632", "#BE8CBE", "#BAD892", "#EDAE68", "#BE8CBE", "#342D6C", "#BE8C44", "#BAD892")
ggplot(kb, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=2) +#
    geom_smooth(aes(date, score), method="loess", span=.5, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))
kbrf <- subset(kb, muscle == "Rectus Femoris")#
 my_loess <- loess(score~date, data=kbrf, span = 0.20)#
      curve <- as.data.frame(my_loess$fitted)
my_loess <- loess(score~date, data=kbrf, span = 0.20)
my_loess <- loess(score~date, data=kbrf, span = 1)
kb <- subset(labnotebook, athlete == "Kiki Broe")#
# & session < 4160#
NCPalette <- c("#643165", "#8FC44E", "#F29632", "#BE8CBE", "#BAD892", "#EDAE68", "#BE8CBE", "#342D6C", "#BE8C44", "#BAD892")#
#average time and score for each muscle session#
kb <- ddply(kb, .(muscle, side, athlete, session, timing, team, notes), plyr:::summarise,#
date = mean(date),#
score = round_any(mean(score),5))#
ggplot(kb, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=2) +#
    geom_smooth(aes(date, score), method="loess", span=.5, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))#
kbrf <- subset(kb, muscle == "Rectus Femoris")#
 my_loess <- loess(score~date, data=kbrf, span = 0.20)#
      curve <- as.data.frame(my_loess$fitted)
kbrf$date <- as.numeric(kbrf$date)#
 my_loess <- loess(score~date, data=kbrf, span = 0.20)#
      curve <- as.data.frame(my_loess$fitted)
curve
my_loess
my_loess <- loess(score~date, data=kbrf, span = 0.20)#
curve <- as.data.frame(my_loess$fitted)
my_loess <- loess(score~date, data=kbrf, span = 0.20)#
curve <- as.data.frame(my_loess$fitted)#
curve
my_loess <- loess(score~date, data=kbrf, span = 1)#
curve <- as.data.frame(my_loess$fitted)#
curve
my_loess <- loess(score~date, data=kbrf, span = 0.5)#
curve <- as.data.frame(my_loess$fitted)#
curve
my_loess <- loess(score~date, data=kbrf, span = 1)#
curve <- as.data.frame(my_loess$fitted)#
curve
ggplot(kb, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=2) +#
    geom_smooth(aes(date, score), method="loess", span=1, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))
?loess()
my_loess <- loess(score~date, data=kbrf, span = 2)#
curve <- as.data.frame(my_loess$fitted)#
curve
my_loess <- loess(score~date, data=kbrf, span = 1)#
curve <- as.data.frame(my_loess$fitted)#
curve
my_loess <- loess(score~date, data=kbrf, span = .5)#
curve <- as.data.frame(my_loess$fitted)#
curve
my_loess <- loess(score~date, data=kbrf, span = .35)#
curve <- as.data.frame(my_loess$fitted)#
curve
my_loess <- loess(score~date, data=kbrf, span = .4)#
curve <- as.data.frame(my_loess$fitted)#
curve
kb <- subset(labnotebook, athlete == "Kiki Broe"& session < 4160)#
# & session < 4160#
NCPalette <- c("#643165", "#8FC44E", "#F29632", "#BE8CBE", "#BAD892", "#EDAE68", "#BE8CBE", "#342D6C", "#BE8C44", "#BAD892")#
#average time and score for each muscle session#
kb <- ddply(kb, .(muscle, side, athlete, session, timing, team, notes), plyr:::summarise,#
date = mean(date),#
score = round_any(mean(score),5))#
ggplot(kb, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=2) +#
    geom_smooth(aes(date, score), method="loess", span=1, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))#
kbrf <- subset(kb, muscle == "Rectus Femoris")#
kbrf$date <- as.numeric(kbrf$date)#
#
my_loess <- loess(score~date, data=kbrf, span = 2)#
curve <- as.data.frame(my_loess$fitted)#
curve
my_loess <- loess(score~date, data=kbrf, span = 1)#
curve <- as.data.frame(my_loess$fitted)#
curve
my_loess <- loess(score~date, data=kbrf, span = .5)#
curve <- as.data.frame(my_loess$fitted)#
curve
my_loess <- loess(score~date, data=kbrf, span = .9)#
curve <- as.data.frame(my_loess$fitted)#
curve
warnings()
?simpleLoess()
kbrf <- subset(kb, muscle == "Rectus Femoris")#
#
ggplot(kbrf, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=5) +#
    geom_smooth(aes(date, score), method="loess", span=1, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))#
kbrf$date <- as.numeric(kbrf$date)#
#
my_loess <- loess(score~date, data=kbrf, span = 1)#
curve <- as.data.frame(my_loess$fitted)#
curve
my_loess$residuals
my_loess$y
my_loess$x
my_loess$trace.hat
my_loess$one.delta
my_loess$two.delta
my_loess$weights
my_loess$enp
my_loess$fitted
ggplot(kbrf, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=5) +#
    geom_smooth(aes(date, score), method="loess", span=.9, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))#
kbrf$date <- as.numeric(kbrf$date)#
#
my_loess <- loess(score~date, data=kbrf, span = .9)#
curve <- as.data.frame(my_loess$fitted)#
curve
kbrf <- subset(kb, muscle == "Rectus Femoris")#
#
ggplot(kbrf, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=5) +#
    geom_smooth(aes(date, score), method="loess", span=.9, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))#
kbrf$date <- as.numeric(kbrf$date)#
#
my_loess <- loess(score~date, data=kbrf, span = .9)#
curve <- as.data.frame(my_loess$fitted)#
curve
kbrf <- subset(kb, muscle == "Rectus Femoris")#
#
ggplot(kbrf, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=5) +#
    geom_smooth(aes(date, score), method="loess", span=.7, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))#
kbrf$date <- as.numeric(kbrf$date)#
#
my_loess <- loess(score~date, data=kbrf, span = .7)#
curve <- as.data.frame(my_loess$fitted)#
curve
kbrf <- subset(kb, muscle == "Rectus Femoris")#
#
ggplot(kbrf, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=5) +#
    geom_smooth(aes(date, score), method="loess", span=.5, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))#
kbrf$date <- as.numeric(kbrf$date)#
#
my_loess <- loess(score~date, data=kbrf, span = .5)#
curve <- as.data.frame(my_loess$fitted)#
curve
kbrf <- subset(kb, muscle == "Rectus Femoris")#
#
ggplot(kbrf, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=5) +#
    geom_smooth(aes(date, score), method="loess", span=.6, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))#
kbrf$date <- as.numeric(kbrf$date)#
#
my_loess <- loess(score~date, data=kbrf, span = .6)#
curve <- as.data.frame(my_loess$fitted)#
curve
kbrf <- subset(kb, muscle == "Rectus Femoris")#
#
ggplot(kbrf, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=5) +#
    geom_smooth(aes(date, score), method="loess", span=.7, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))#
kbrf$date <- as.numeric(kbrf$date)#
#
my_loess <- loess(score~date, data=kbrf, span = .7)#
curve <- as.data.frame(my_loess$fitted)#
curve
kbrf <- subset(kb, muscle == "Rectus Femoris")#
#
ggplot(kbrf, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=5) +#
    geom_smooth(aes(date, score), method="loess", span=.67, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))#
kbrf$date <- as.numeric(kbrf$date)#
#
my_loess <- loess(score~date, data=kbrf, span = .67)#
curve <- as.data.frame(my_loess$fitted)#
curve
kbrf <- subset(kb, muscle != "Rectus Femoris")#
#
ggplot(kbrf, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=5) +#
    geom_smooth(aes(date, score), method="loess", span=1, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))#
kbrf$date <- as.numeric(kbrf$date)#
#
my_loess <- loess(score~date, data=kbrf, span = 1)#
curve <- as.data.frame(my_loess$fitted)#
curve
kbrf <- subset(kb, muscle != "Rectus Femoris")#
#
ggplot(kbrf, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=5) +#
    geom_smooth(aes(date, score), method="loess", span=.7, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))#
kbrf$date <- as.numeric(kbrf$date)#
#
my_loess <- loess(score~date, data=kbrf, span = .7)#
curve <- as.data.frame(my_loess$fitted)#
curve
kbrf <- subset(kb, muscle != "Rectus Femoris")#
#
ggplot(kbrf, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=5) +#
    geom_smooth(aes(date, score), method="loess", span=.67, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))#
kbrf$date <- as.numeric(kbrf$date)#
#
my_loess <- loess(score~date, data=kbrf, span = .67)#
curve <- as.data.frame(my_loess$fitted)#
curve
kbrf <- subset(kb, muscle != "Rectus Femoris")#
#
ggplot(kbrf, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=5) +#
    geom_smooth(aes(date, score), method="loess", span=.57, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))#
kbrf$date <- as.numeric(kbrf$date)#
#
my_loess <- loess(score~date, data=kbrf, span = .57)#
curve <- as.data.frame(my_loess$fitted)#
curve
warnings()
ggplot(kbrf, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=5) +#
    geom_smooth(aes(date, score), method="loess", family = "symmetric", span=1, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))
kbrf <- subset(kb, muscle != "Rectus Femoris")#
#
ggplot(kbrf, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=5) +#
    geom_smooth(aes(date, score), method="loess", family = "symmetric", span=1, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))
kbrf <- subset(kb, muscle != "Rectus Femoris")#
#
ggplot(kbrf, aes(date, score, group = muscle, color = muscle)) + #
    geom_point(size=5) +#
    geom_smooth(aes(date, score), method="loess", family = "symmetric", span=.5, alpha = .01, size=2) +#
    scale_colour_manual(values=NCPalette) +#
    scale_x_datetime(breaks = date_breaks("1 day"), minor_breaks = date_breaks("12 hours"), labels = date_format("%m/%d"))
?loess()
q()
q
setwd("/Users/psarnow/Dropbox/DOW/CPW_GMUBoundaries/")#
#
library(maptools)#
library(gpclib)#
library(sp)#
library(ggplot2)#
library(ggmap)#
library(rgdal)#
library(dplyr)#
library(magrittr)#
require(scales)#
require(plyr)#
require(RColorBrewer)#
NCPalette <- c("#643165", "#8FC44E", "#F29632", "#BE8CBE", "#BAD892", "#EDAE68", "#BE8CBE", "#342D6C", "#BE8C44", "#BAD892")#
hcpalette <- c("#7cb5ec", "#434348","#beaed4","#fdc086","#90ed7d")#
# require(devtools)#
# install_github('rCharts', 'ramnathv')#
#
gpclibPermit()#
# read data into R#
# shapefile <- readShapeSpatial("BigGameGMUBoundaries03172015.shp", proj4string = CRS("+proj=utm +datum=WGS84"))#
ElkHarvest2013 <- read.csv(file = "/Users/psarnow/Dropbox/DOW/ElkHarvest2013.csv")#
ElkHarvest2014 <- read.csv(file = "/Users/psarnow/Dropbox/DOW/2014_EstimatedHarvest.csv")#
#
ElkHarvest2013$Type <- as.character(ElkHarvest2013$Type)#
ElkHarvest2013$Season <- as.character(ElkHarvest2013$Season)#
ElkHarvest2013$GMUID <- as.character(ElkHarvest2013$GMUID)#
#
ElkHarvest2014$Type <- as.character(ElkHarvest2014$Type)#
ElkHarvest2014$Season <- as.character(ElkHarvest2014$Season)#
ElkHarvest2014$GMUID <- as.character(ElkHarvest2014$GMUID)#
#
ElkHarvestRifleAll <- rbind(ElkHarvest2013,ElkHarvest2014)#
ElkHarvestRifle2014 <- filter(ElkHarvestRifleAll, Season == "First" | Season == "Second" #
                                      | Season == "Third" | Season == "Fourth"#
                                      & Type == "Rifle")#
ElkHarvestRifle2014 <- filter(ElkHarvestRifle2014, Year == 2014)#
#
shapefile <- readShapeSpatial("BigGameGMUBoundaries03172015.shp", proj4string = CRS("+proj=utm +zone=13"))#
# converting utm to longlat#
shapefile2 <- spTransform(shapefile, CRS("+proj=longlat +datum=WGS84"))#
#######
# Centroids of GMUID#
# use gCentroid in the rgeos package if you want to label at the true centroid#
shapefile_centroids <- shapefile2#
shapefile_centroids@data$centroids <- as.data.frame(coordinates(shapefile_centroids))#
shapefile_centroids2 <- shapefile_centroids %>% fortify(region = "GMUID")#
#
shapefile_centroids2 <- merge(shapefile_centroids2, shapefile_centroids@data, by.x = 'id', by.y = 'GMUID')#
shapefile_centroids2$GMUID <- as.character(shapefile_centroids2$id)#
shapefile_centroids2$longitude <- shapefile_centroids2$centroids$V1#
shapefile_centroids2$latitude <- shapefile_centroids2$centroids$V2#
data_centroids <- select(shapefile_centroids2,GMUID, group,longitude,latitude)#
data_centroids <- data_centroids[!duplicated(data_centroids$GMUID),]#
#######
### Step 1: shapefile becomes SpatialLinesDataFrame.#
setwd("/Users/psarnow/Dropbox/DOW/ne_10m_roads/")#
#
roaddata <- readShapeLines("ne_10m_roads.shp")#
### Step 2: If necessary, subset data before I use fortify().#
### dplyr does not work with SpatialLinesDataFrame at this point.#
COroads <- roaddata %>% subset(.,sov_a3 == "USA" & type == "Major Highway")#
### Step 3: I need to convert foo to data frame so that I can use the data#
### with ggplot2.#
COroads1 <- fortify(COroads)#
# get min/max of long/lat for zooming#
longset <- c(min(data3$long),max(data3$long))#
latset <- c(min(data3$lat),max(data3$lat))#
COroads2 <- filter(COroads1, long > longset[1] & long < longset[2])#
COroads2 <- filter(COroads2, lat > latset[1] & lat < latset[2])#
########
# data <- shapefile2 %>% fortify(region = "COUNTY")#
data <- shapefile2 %>% fortify(region = "GMUID")#
#
data2 <- merge(data, shapefile2@data, by.x = 'id', by.y = 'GMUID')#
data2$GMUID <- as.character(data2$id)#
#
#determine breaks for all of 2014 charts#
RAll <- filter(ElkHarvestRifleAll, Season == "All" & Type == "Rifle" & Year == 2014)#
#data3 <- left_join(data2,RAll, by=c("GMUID"))#
fill_field_percentiles <- quantile(RAll$Success, c(.125, .25, .375, .5, .625, .75, .875),na.rm=TRUE) #
breaks <- as.vector(c(0,fill_field_percentiles,max(RAll$Success,na.rm=TRUE)))#
fill_field_max <- max(RAll$Success,na.rm=TRUE)#
fill_field_min <- min(RAll$Success,na.rm=TRUE)#
plot_limits <- c(fill_field_min, fill_field_max)#
# Season Charts#
#filter season#
R1 <- filter(ElkHarvestRifle2014, Season == "First")#
data3 <- left_join(data2,R1, by=c("GMUID"))
setwd("/Users/psarnow/Dropbox/DOW/CPW_GMUBoundaries/")#
#
library(maptools)#
library(gpclib)#
library(sp)#
library(ggplot2)#
library(ggmap)#
library(rgdal)#
library(dplyr)#
library(magrittr)#
require(scales)#
require(plyr)#
require(RColorBrewer)#
NCPalette <- c("#643165", "#8FC44E", "#F29632", "#BE8CBE", "#BAD892", "#EDAE68", "#BE8CBE", "#342D6C", "#BE8C44", "#BAD892")#
hcpalette <- c("#7cb5ec", "#434348","#beaed4","#fdc086","#90ed7d")#
# require(devtools)#
# install_github('rCharts', 'ramnathv')#
#
gpclibPermit()#
# read data into R#
# shapefile <- readShapeSpatial("BigGameGMUBoundaries03172015.shp", proj4string = CRS("+proj=utm +datum=WGS84"))#
ElkHarvest2013 <- read.csv(file = "/Users/psarnow/Dropbox/DOW/ElkHarvest2013.csv")#
ElkHarvest2014 <- read.csv(file = "/Users/psarnow/Dropbox/DOW/2014_EstimatedHarvest.csv")#
#
ElkHarvest2013$Type <- as.character(ElkHarvest2013$Type)#
ElkHarvest2013$Season <- as.character(ElkHarvest2013$Season)#
ElkHarvest2013$GMUID <- as.character(ElkHarvest2013$GMUID)#
#
ElkHarvest2014$Type <- as.character(ElkHarvest2014$Type)#
ElkHarvest2014$Season <- as.character(ElkHarvest2014$Season)#
ElkHarvest2014$GMUID <- as.character(ElkHarvest2014$GMUID)#
#
ElkHarvestRifleAll <- rbind(ElkHarvest2013,ElkHarvest2014)#
ElkHarvestRifle2014 <- filter(ElkHarvestRifleAll, Season == "First" | Season == "Second" #
                                      | Season == "Third" | Season == "Fourth"#
                                      & Type == "Rifle")#
ElkHarvestRifle2014 <- filter(ElkHarvestRifle2014, Year == 2014)#
#
shapefile <- readShapeSpatial("BigGameGMUBoundaries03172015.shp", proj4string = CRS("+proj=utm +zone=13"))#
# converting utm to longlat#
shapefile2 <- spTransform(shapefile, CRS("+proj=longlat +datum=WGS84"))#
#######
# Centroids of GMUID#
# use gCentroid in the rgeos package if you want to label at the true centroid#
shapefile_centroids <- shapefile2#
shapefile_centroids@data$centroids <- as.data.frame(coordinates(shapefile_centroids))#
shapefile_centroids2 <- shapefile_centroids %>% fortify(region = "GMUID")#
#
shapefile_centroids2 <- merge(shapefile_centroids2, shapefile_centroids@data, by.x = 'id', by.y = 'GMUID')#
shapefile_centroids2$GMUID <- as.character(shapefile_centroids2$id)#
shapefile_centroids2$longitude <- shapefile_centroids2$centroids$V1#
shapefile_centroids2$latitude <- shapefile_centroids2$centroids$V2#
data_centroids <- select(shapefile_centroids2,GMUID, group,longitude,latitude)#
data_centroids <- data_centroids[!duplicated(data_centroids$GMUID),]#
#######
### Step 1: shapefile becomes SpatialLinesDataFrame.#
setwd("/Users/psarnow/Dropbox/DOW/ne_10m_roads/")#
#
roaddata <- readShapeLines("ne_10m_roads.shp")#
### Step 2: If necessary, subset data before I use fortify().#
### dplyr does not work with SpatialLinesDataFrame at this point.#
COroads <- roaddata %>% subset(.,sov_a3 == "USA" & type == "Major Highway")#
### Step 3: I need to convert foo to data frame so that I can use the data#
### with ggplot2.#
COroads1 <- fortify(COroads)#
# get min/max of long/lat for zooming#
longset <- c(min(data3$long),max(data3$long))#
latset <- c(min(data3$lat),max(data3$lat))#
COroads2 <- filter(COroads1, long > longset[1] & long < longset[2])#
COroads2 <- filter(COroads2, lat > latset[1] & lat < latset[2])#
########
# data <- shapefile2 %>% fortify(region = "COUNTY")#
data <- shapefile2 %>% fortify(region = "GMUID")#
#
data2 <- merge(data, shapefile2@data, by.x = 'id', by.y = 'GMUID')#
data2$GMUID <- as.character(data2$id)#
#
#determine breaks for all of 2014 charts#
RAll <- filter(ElkHarvestRifleAll, Season == "All" & Type == "Rifle" & Year == 2014)#
#data3 <- left_join(data2,RAll, by=c("GMUID"))#
fill_field_percentiles <- quantile(RAll$Success, c(.125, .25, .375, .5, .625, .75, .875),na.rm=TRUE) #
breaks <- as.vector(c(0,fill_field_percentiles,max(RAll$Success,na.rm=TRUE)))#
fill_field_max <- max(RAll$Success,na.rm=TRUE)#
fill_field_min <- min(RAll$Success,na.rm=TRUE)#
plot_limits <- c(fill_field_min, fill_field_max)#
# Season Charts#
#filter season#
R1 <- filter(ElkHarvestRifle2014, Season == "First")#
data3 <- left_join(data2,R1, by=c("GMUID"))
fill_field <- "Success"#
data4 <- data3[,c("id","long","lat","order","hole","piece","group","GMUID","Season",fill_field)]#
colnames(data4) <- c("id","long","lat","order","hole","piece","group","GMUID","Season","fill_field")#
#
data4$fill_field[(data4$fill_field > breaks[8])] <- fill_field_max#
data4$fill_field[(breaks[7] < data4$fill_field) & (data4$fill_field < breaks[8])] <- breaks[8]#
data4$fill_field[(breaks[6] < data4$fill_field) & (data4$fill_field < breaks[7])] <- breaks[7]#
data4$fill_field[(breaks[5] < data4$fill_field) & (data4$fill_field < breaks[6])] <- breaks[6]#
data4$fill_field[(breaks[4] < data4$fill_field) & (data4$fill_field < breaks[5])] <- breaks[5]#
data4$fill_field[(breaks[3] < data4$fill_field) & (data4$fill_field < breaks[4])] <- breaks[4]#
data4$fill_field[(breaks[2] < data4$fill_field) & (data4$fill_field < breaks[3])] <- breaks[3]#
data4$fill_field[(breaks[1] < data4$fill_field) & (data4$fill_field < breaks[2])] <- breaks[2]#
#
myPalette <- c("#d73027", "#f46d43", "#fdae61", #
               "#fee090", "#ffffbf", "#e0f3f8",#
               "#abd9e9", "#74add1", "#4575b4")#
#
plot_R1 <- ggplot(data4, aes(long, lat, group = group)) + #
    geom_polygon(aes(fill = fill_field),colour = "black", size = .1) +#
    geom_text(data=data_centroids,aes(x=longitude,y=latitude,label = GMUID),size=3) +#
    geom_path(data = COroads2,aes(x = long, y = lat, group = group), color="#3878C7",size=2) +#
    #facet_grid(. ~ Season) +#
    scale_fill_gradientn(limits = plot_limits,#
                       values = rescale(breaks),#
                       breaks = breaks, #
                       colours = myPalette, #
                       guide = "legend", #
                       name = fill_field,#
                       na.value = "grey") +#
    #scale_fill_gradient(low="red",high = "blue") +#
    xlab("") + #
    ylab("") +#
    theme(axis.title=element_text(size=20, colour="#434348", family="ApexRounded-Bold")) +#
    theme(axis.title.x=element_text()) +#
    theme(axis.text.x=element_text(size=0, family="ApexRounded-Medium")) +#
    theme(axis.text.y=element_text(size=0, family="ApexRounded-Medium")) +#
    theme(plot.title=element_text(size=20, colour="#434348", family="ApexRounded-Bold")) +#
    theme(legend.text=element_text(size=20, family="ApexRounded-Medium")) +#
    theme(legend.title=element_text(size=20, colour="#434348", family="ApexRounded-Medium")) +#
    theme(panel.background = element_rect(fill='white')) +#
    theme(panel.grid.major= element_line(color='white')) +#
    theme(panel.grid.minor= element_line(color='white')) +#
    ggtitle("First Season")
print(plot_R1)
roaddata@data
colnames(roaddata@data)
COroads <- roaddata %>% subset(.,sov_a3 == "USA" & (type == "Major Highway" | type == "Secondary Highway")#
### Step 3: I need to convert foo to data frame so that I can use the data#
### with ggplot2.#
COroads1 <- fortify(COroads)#
# get min/max of long/lat for zooming#
longset <- c(min(data3$long),max(data3$long))#
latset <- c(min(data3$lat),max(data3$lat))#
COroads2 <- filter(COroads1, long > longset[1] & long < longset[2])#
COroads2 <- filter(COroads2, lat > latset[1] & lat < latset[2])
COroads <- roaddata %>% subset(.,sov_a3 == "USA" & (type == "Major Highway" | type == "Secondary Highway"))#
### Step 3: I need to convert foo to data frame so that I can use the data#
### with ggplot2.#
COroads1 <- fortify(COroads)#
# get min/max of long/lat for zooming#
longset <- c(min(data3$long),max(data3$long))#
latset <- c(min(data3$lat),max(data3$lat))#
COroads2 <- filter(COroads1, long > longset[1] & long < longset[2])#
COroads2 <- filter(COroads2, lat > latset[1] & lat < latset[2])
plot_R1 <- ggplot(data4, aes(long, lat, group = group)) + #
    geom_polygon(aes(fill = fill_field),colour = "black", size = .1) +#
    geom_text(data=data_centroids,aes(x=longitude,y=latitude,label = GMUID),size=3) +#
    geom_path(data = COroads2,aes(x = long, y = lat, group = group), color="#3878C7",size=2) +#
    #facet_grid(. ~ Season) +#
    scale_fill_gradientn(limits = plot_limits,#
                       values = rescale(breaks),#
                       breaks = breaks, #
                       colours = myPalette, #
                       guide = "legend", #
                       name = fill_field,#
                       na.value = "grey") +#
    #scale_fill_gradient(low="red",high = "blue") +#
    xlab("") + #
    ylab("") +#
    theme(axis.title=element_text(size=20, colour="#434348", family="ApexRounded-Bold")) +#
    theme(axis.title.x=element_text()) +#
    theme(axis.text.x=element_text(size=0, family="ApexRounded-Medium")) +#
    theme(axis.text.y=element_text(size=0, family="ApexRounded-Medium")) +#
    theme(plot.title=element_text(size=20, colour="#434348", family="ApexRounded-Bold")) +#
    theme(legend.text=element_text(size=20, family="ApexRounded-Medium")) +#
    theme(legend.title=element_text(size=20, colour="#434348", family="ApexRounded-Medium")) +#
    theme(panel.background = element_rect(fill='white')) +#
    theme(panel.grid.major= element_line(color='white')) +#
    theme(panel.grid.minor= element_line(color='white')) +#
    ggtitle("First Season")
print(plot_R1)
COroads <- roaddata %>% subset(.,sov_a3 == "USA" & type == "Major Highway")#
### Step 3: I need to convert foo to data frame so that I can use the data#
### with ggplot2.#
COroads1 <- fortify(COroads)#
# get min/max of long/lat for zooming#
longset <- c(min(data3$long),max(data3$long))#
latset <- c(min(data3$lat),max(data3$lat))#
COroads2 <- filter(COroads1, long > longset[1] & long < longset[2])#
COroads2 <- filter(COroads2, lat > latset[1] & lat < latset[2])
q()
